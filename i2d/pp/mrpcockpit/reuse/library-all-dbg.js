/*
 * Copyright (C) 2009-2014 SAP SE or an SAP affiliate company. All rights reserved
 */
// This file has been generated by the SAPUI5 'AllInOne' Builder

sap.ui.controller("i2d.pp.mrpcockpit.reuse.view.AoRAddDialog", {

	_DIALOG_ID : "DLG_SELECT",
	/**
	 * Called when a controller is instantiated and its View controls (if available) are already created. Can be used to
	 * modify the View before it is displayed, to bind event handlers and do other one-time initialization.
	 * 
	 * @memberOf About
	 */
	onInit : function() {
		 var effectiveUrl = jQuery.sap.getModulePath("i2d.pp.mrpcockpit.reuse") + "/" + "i18n/i18n.properties";
		 var oBundle = new sap.ui.model.resource.ResourceModel({
			 bundleUrl : effectiveUrl
		 });
		 
		 this.getView().setModel(oBundle, "commondialogs_i18n");
		 
		jQuery.sap.require("sap.m.MessageToast");

		var oDlg = this.getView().byId(this._DIALOG_ID);
		var oOkButton = ( oDlg._getOkButton ? oDlg._getOkButton() : oDlg.getOkButton());
		oOkButton.setEnabled(false);
		oDlg._list.attachSelectionChange(function(oEvent) {
			var list = oEvent.getSource();
			if (list.getSelectedItems().length > 0) {
				oOkButton.setEnabled(true);
			} else {
				oOkButton.setEnabled(false);
			}
		});
		
	//Workaround to show loading indicator (Fix is in UI5 1.20) 
		oDlg._list.attachUpdateStarted(function(){
			var localBusyIndicator = oDlg._busyIndicator || oDlg._oBusyIndicator;
			oDlg._listUpdateRequested += oDlg._ListUpdateRequested;
			if(oDlg._listUpdateRequested > 0) {
				oDlg._list.addStyleClass('sapMSelectDialogListHide');
		    localBusyIndicator.$().css('display', 'inline-block');
			}  
		}, this);
    
	//Workaround to show loading indicator (Fix is in UI5 1.20) 
		oDlg._list.attachUpdateFinished(function(){
			var localBusyIndicator = oDlg._busyIndicator || oDlg._oBusyIndicator;			
			oDlg._list.removeStyleClass('sapMSelectDialogListHide');
			localBusyIndicator.$().css('display', 'none');
			oDlg._listUpdateRequested = 0;
			oDlg._ListUpdateRequested = 0;
			oDlg._list.setShowNoData(true);
		}, this);

	},

	/**
	 * onConfirmDialog: function(oEvent) { var txfVariantName = this.getView().byId(this._VARIANT_NAME_ID); var oResult = {
	 * isConfirmed: true, sInput: txfVariantName.getValue() }; var oDlg = this.getView().byId(this._DIALOG_ID); if
	 * (txfVariantName.getValue() == "") { //
	 * sap.m.MessageToast.show(this.oResourceBundle.getText("VariantMessageEmptyName")); sap.m.MessageToast.show("Please
	 * insert a name for the variant"); } else { var fnSave = oDlg.getModel().getProperty("/saveFunction");
	 * fnSave(txfVariantName.getValue(), oDlg.getModel().getProperty("/data"),
	 * this.getView().byId("CHB_VARIANT_AS_TILE").getSelected()); txfVariantName.setValue(""); // empty the value for the
	 * next call. this.closeDialog(oResult); } }, checkVariantName: function(oData) { },
	 */

	/*
	 * onCancelDialog : function(oEvent) { var oResult = { isConfirmed : false }; this.closeDialog(oResult); },
	 */

	/*
	 * closeDialog : function(oResult) { var oDlg = this.getView().byId(this._DIALOG_ID); var fnClose =
	 * oDlg.getModel().getProperty("/closeFunction"); oDlg.close(); fnClose(oResult); },
	 */

	// Handling of both confirm and cancel; clear the filter
	handleClose : function(oEvent) {
		var oDlg = this.getView().byId(this._DIALOG_ID);
		var fnClose = oDlg.getModel().getProperty("/closeFunction");
		// oDlg.close();
		fnClose(oEvent);

		// oEvent.getSource().getBinding("items").filter([]);
	},
	
	handleConfirm : function(oEvent) {
		var oDlg = this.getView().byId(this._DIALOG_ID);
		var fnConfirm = oDlg.getModel().getProperty("/confirmFunction");
		// oDlg.close();
		fnConfirm(oEvent);

		// oEvent.getSource().getBinding("items").filter([]);
	},

	search : function(oEvt) {

		var sValue = oEvt.getParameter("value");
		var aFilter = [];
		var oFilter1 = new sap.ui.model.Filter("TextSearch", sap.ui.model.FilterOperator.Contains, sValue);
		aFilter.push(oFilter1);

		var oBinding = oEvt.getSource().getBinding("items");
		var oOrFilter = new sap.ui.model.Filter(aFilter, false);
		oBinding.filter(oOrFilter);

	},

/**
 * variantNameChanged: function(oControlEvent) { var oDlg = this.getView().byId(this._DIALOG_ID); var allVariantNames =
 * oDlg.getModel().getProperty("/variantList"); var variantExsits = false; if (allVariantNames != null) { for ( var i =
 * 0; i < allVariantNames.length; i++) { if (allVariantNames[i] == oControlEvent.getParameters.value) { variantExsits =
 * true; } } } if (variantExsits) { this.getView().byId("BTN_CONFIRM").setText("Rewrite"); } else {
 * this.getView().byId("BTN_CONFIRM").setText("Save"); } } /** Similar to onAfterRendering, but this hook is invoked
 * before the controller's View is re-rendered (NOT before the first rendering! onInit() is used for that one!).
 * 
 * @memberOf About
 */
// onBeforeRendering: function() {
//
// },
/**
 * Called when the View has been rendered (so its HTML is part of the document). Post-rendering manipulations of the
 * HTML could be done here. This hook is the same one that SAPUI5 controls get after being rendered.
 * 
 * @memberOf About
 */
// onAfterRendering: function() {
//
// },
/**
 * Called when the Controller is destroyed. Use this one to free resources and finalize activities.
 * 
 * @memberOf About
 */
// onExit: function() {
//
// }
});


sap.ui.controller("i2d.pp.mrpcockpit.reuse.view.AoRMainDialog", {

	_DIALOG_ID : "DLG_AOR_ID",
	/**
	 * Called when a controller is instantiated and its View controls (if available) are already created. Can be used to
	 * modify the View before it is displayed, to bind event handlers and do other one-time initialization..
	 * 
	 * @memberOf About
	 */
	onInit : function() {
		 
		var effectiveUrl = jQuery.sap.getModulePath("i2d.pp.mrpcockpit.reuse") + "/" + "i18n/i18n.properties";
		 var oBundle = new sap.ui.model.resource.ResourceModel({
			 bundleUrl : effectiveUrl
		 });
		 
		 this.getView().setModel(oBundle, "commondialogs_i18n");

		jQuery.sap.require("sap.m.MessageToast");

	},

	beforeOpen : function(oEvent) {
		var aFilter = [];
		var oFilter1 = new sap.ui.model.Filter("AreaOfResponsibility", sap.ui.model.FilterOperator.EQ, true);

		aFilter.push(oFilter1);
		var oBinding = oEvent.getSource().getBinding("items");
		var oOrFilter = new sap.ui.model.Filter(aFilter, false);
		oBinding.filter(oOrFilter);

	},

	openSelDialog : function(oEvent) {
		var oDlg = sap.ui.getCore().byId(this._DIALOG_ID);
		var fnOpenSelDialog = oDlg.getModel().getProperty("/addFunction");
		fnOpenSelDialog(oEvent);
		oDlg.close();
	},

	onConfirmDialog : function(oEvent) {
		var oDlg = this.getView().byId(this._DIALOG_ID);
		var fnConfirm = oDlg.getModel().getProperty("/confirmFunction");
		oDlg.close();
		fnConfirm(oEvent);

	},

	myDelete : function(evt) {
		var item = evt.getParameter("listItem");
		var model = item.getParent().getModel("items");
		var data = model.getData();
		jQuery.each(item.getParent().getItems(), function(index, myItem) {
			if (myItem == item) {
				data.data.splice(index, 1);
				return;
			}
		});

		model.setData(data);
	},

	checkNumberOfItems : function(oEvent) {

		var oDlg = sap.ui.getCore().byId(this._DIALOG_ID);
		if (oEvent.getParameters().actual > 0) {
			setTimeout(function() {
				oDlg.getBeginButton().setEnabled(true);
				}, 0);
		} else {
			setTimeout(function() {
				oDlg.getBeginButton().setEnabled(false);
			}, 0);
		}
	}

/**
 * Similar to onAfterRendering, but this hook is invoked before the controller's View is re-rendered (NOT before the
 * first rendering! onInit() is used for that one!).
 * 
 * @memberOf About
 */
// onBeforeRendering: function() {
//
// },
/**
 * Called when the View has been rendered (so its HTML is part of the document). Post-rendering manipulations of the
 * HTML could be done here. This hook is the same one that SAPUI5 controls get after being rendered.
 * 
 * @memberOf About
 */
// onAfterRendering: function() {
//
// },
/**
 * Called when the Controller is destroyed. Use this one to free resources and finalize activities.
 * 
 * @memberOf About
 */
// onExit: function() {
//
// }
});



sap.ui.controller("i2d.pp.mrpcockpit.reuse.view.VariantDeleteDialog", {
	_VARIANT_NAME_ID : "TXF_VARIANT_NAME",
	_DIALOG_ID : "DLG_VARIANT_DELETE",
	/**
	 * Called when a controller is instantiated and its View controls (if available) are already created. Can be used to
	 * modify the View before it is displayed, to bind event handlers and do other one-time initialization.
	 * 
	 * @memberOf About
	 */
	onInit : function() {
		 var effectiveUrl = jQuery.sap.getModulePath("i2d.pp.mrpcockpit.reuse") + "/" + "i18n/i18n.properties";
		 var oBundle = new sap.ui.model.resource.ResourceModel({
			 bundleUrl : effectiveUrl
		 });
		 
		 this.getView().setModel(oBundle, "commondialogs_i18n");

	},

//	onConfirmDialog : function(oEvent) {
//		jQuery.sap.require("sap.m.MessageToast");
//
//		this.closeDialog(oEvent);
//
//	},

	onCancelDialog : function(oEvent) {
		var oResult = {
			isConfirmed : false
		};
		this.closeDialog(oResult);
	},

	closeDialog : function(oResult) {
		var oDlg = this.getView().byId(this._DIALOG_ID);
		var fnClose = oDlg.getModel().getProperty("/closeFunction");
		oDlg.close();
		fnClose(oResult);
	},
	onConfirmDialog : function(oEvent) {

		var oDlg = this.getView().byId(this._DIALOG_ID);
		var fnConfirm = oDlg.getModel().getProperty("/confirmFunction");
		oDlg.close();
		fnConfirm(oEvent);

	}

/**
 * Similar to onAfterRendering, but this hook is invoked before the controller's View is re-rendered (NOT before the
 * first rendering! onInit() is used for that one!).
 * 
 * @memberOf About
 */
// onBeforeRendering: function() {
//
// },
/**
 * Called when the View has been rendered (so its HTML is part of the document). Post-rendering manipulations of the
 * HTML could be done here. This hook is the same one that SAPUI5 controls get after being rendered.
 * 
 * @memberOf About
 */
// onAfterRendering: function() {
//
// },
/**
 * Called when the Controller is destroyed. Use this one to free resources and finalize activities.
 * 
 * @memberOf About
 */
// onExit: function() {
//
// }
});

jQuery.sap.declare('i2d.pp.mrpcockpit.reuse.library-all');
jQuery.sap.declare('i2d.pp.mrpcockpit.reuse.view.AoRAddDialog'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('i2d.pp.mrpcockpit.reuse.view.AoRMainDialog'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('i2d.pp.mrpcockpit.reuse.view.VariantDeleteDialog'); // raw module, declared by SAPUI5 'AllInOne' Builder
if ( !jQuery.sap.isDeclared('i2d.pp.mrpcockpit.reuse.controls.ChartValue') ) {
jQuery.sap.declare("i2d.pp.mrpcockpit.reuse.controls.ChartValue");

sap.ui.core.Element.extend("i2d.pp.mrpcockpit.reuse.controls.ChartValue", {
	metadata : {
		properties : {
			date : "string",
			demand : {
				type : "float",
				defaultValue : 0
			},
			supply : {
				type : "float",
				defaultValue : 0
			},
			shortageAccepted : {
				type : "boolean",
				defaultValue : false
			}
		}
	}
});

}; // end of i2d/pp/mrpcockpit/reuse/controls/ChartValue.js
if ( !jQuery.sap.isDeclared('i2d.pp.mrpcockpit.reuse.controls.ObjectIdentifier') ) {
/* ==|==  Object Identifier (JS) ==========================================================
 *
 *  Custom Control to extend functionality of the current sap.m.ObjectIdentifier
 *  @see sap.m.ObjectIdentifier
 *
 * author: SAP AG
 * version: 05.05.2014
 * ============================================================
 */

//"use strict";
jQuery.sap.declare("i2d.pp.mrpcockpit.reuse.controls.ObjectIdentifier");

sap.m.ObjectIdentifier
		.extend(
				"i2d.pp.mrpcockpit.reuse.controls.ObjectIdentifier",
				{
					/**
					 * @memberOf i2d.pp.mrpcockpit.reuse.controls.ObjectIdentifier
					 */
					
					metadata : {
						aggregations : {
							"link"	:  {type : "sap.m.Link", multiple : false, singularName: "link"}
						},
						defaultAggregation: "link"
					},
					
					/**
					 * if supplied link is enabled - uses the modified ObjectIdentifierRenderer (version 1.19.1)
					 * if supplied link is not enabled - uses the parent renderer
					 */
					renderer : function(r, o) {						
						var oLink = o.getAggregation("link");						
						if (oLink && oLink.getEnabled()) {
							// use parent renderer from 1.19 with Link instead of Title
							r.write("<div");
							r.writeControlData(o);
							r.addClass("sapMObjectIdentifier sapMRPObjectIdentifier");
							r.writeClasses();
							r.write(">");
							r.write("<div");
							r.addClass("sapMObjectIdentifierTopRow");
							r.writeClasses();
							r.write(">");
							r.write("<div");
							r.addClass("sapMObjectIdentifierIcons");
							r.writeClasses();
							r.write(">");
							if(o.getBadgeAttachments()){
								r.write("<span");
						  	r.addClass("sapMObjectIdentifierIconSpan");
						  	r.writeClasses();
							  r.write(">");
						  	r.renderControl(o._getAttachmentsIcon());
						  	r.write("</span>");
						  }
							if(o.getBadgeNotes()){
								r.write("<span");
						  	r.addClass("sapMObjectIdentifierIconSpan");
						  	r.writeClasses();
						  	r.write(">");
						  	r.renderControl(o._getNotesIcon());
					  		r.write("</span>");
					  	}
							if(o.getBadgePeople()){
								r.write("<span");
							  r.addClass("sapMObjectIdentifierIconSpan");
						  	r.writeClasses();
						  	r.write(">");
						  	r.renderControl(o._getPeopleIcon());
						  	r.write("</span>");
						  }
							r.write("</div>");
							r.write("<div");
							r.addClass("sapMObjectIdentifierTitle");
							r.writeClasses();
							r.write(">"); 
							r.renderControl(oLink);  
							/*r.writeEscaped(o.getTitle());*/ 
							r.write("</div>");
							r.write("</div>");
							r.write("<div");
							r.addClass("sapMObjectIdentifierText");
							r.writeClasses();
							r.write(">");
							r.writeEscaped(o.getText());
							r.write("</div>");
							r.write("</div>");						
						} else {
							// use parent renderer
							sap.m.ObjectIdentifierRenderer.render(r, o);							
						}
					},
				}); // end control




}; // end of i2d/pp/mrpcockpit/reuse/controls/ObjectIdentifier.js
if ( !jQuery.sap.isDeclared('i2d.pp.mrpcockpit.reuse.controls.ObjectStatusBar') ) {
/* ==|==  Object Status Bar (JS) ==========================================================
 *
 *  Custom Control to extend functionality of the current sap.m.ObjectStatus
 *  Designed to create several icon statuses in a line (bar)
 *  @see sap.m.ObjectStatus
 *  @see ObjectStatus.css
 * author: SAP AG
 * version: 26.05.2014
 * ============================================================
 */

//"use strict";
jQuery.sap.declare("i2d.pp.mrpcockpit.reuse.controls.ObjectStatusBar");

sap.m.ObjectStatus
		.extend(
				"i2d.pp.mrpcockpit.reuse.controls.ObjectStatusBar",
				{
							/**
							 * @memberOf i2d.pp.mrpcockpit.reuse.controls.ObjectStatusBar
							 */
							metadata : {												
								aggregations: {
									layout: {type: "sap.ui.layout.HorizontalLayout", hidden: true, multiple: false},
									content : {type : "sap.m.ObjectStatus",	multiple : true},				
								},
							},
							
							
							init : function() {
								this.setAggregation("layout", new sap.ui.layout.HorizontalLayout());
							},
							
							addContent : function(oStatus) {
								return this.getAggregation("layout").addContent(oStatus);
							},
							
							removeContent : function(oStatus) {
								return this.getAggregation("layout").removeContent(oStatus);
							},
							
							destroyContent : function(oStatus) {
								return this.getAggregation("layout").destroyContent(oStatus);
							},

							indexOfContent : function(oStatus) {
								return this.getAggregation("layout").indexOfContent(oStatus);
							},

							removeAllContent : function() {
								return this.getAggregation("layout").removeAllContent();
							},
							
							
							/**
							 * renders layout aggregation inside html container
							 */
							renderer : function(r, o) {
								r.write("<div"); r.writeControlData(o);	r.addClass("sapMRPObjStatusBar"); r.writeClasses(); r.write(">");
								r.renderControl(o.getAggregation("layout"));
								r.write("</div>");
							},
						}); // end control


}; // end of i2d/pp/mrpcockpit/reuse/controls/ObjectStatusBar.js
if ( !jQuery.sap.isDeclared('i2d.pp.mrpcockpit.reuse.controls.Stock') ) {
  jQuery.sap.declare('i2d.pp.mrpcockpit.reuse.controls.Stock');
jQuery.sap.require('sap.ca.ui.model.format.NumberFormat'); // unlisted dependency retained


sap.ui.core.Control.extend("i2d.pp.mrpcockpit.reuse.controls.Stock", {
	metadata : {
		properties : {
			"name" : "string",
			"number" : "string",
			"numberUnit" : "string",
			"mrpavailability" : "string",
			"mergingKey" : "string",
			"renderAsButton" : "boolean", // true = render a button, false = render a label
			"tooltip" : "string"
		},
		events : {
			"press" : {}
		}
	},

	renderer : function(oRm, oControl) { // the part creating the HTML

		if (oControl.getRenderAsButton()) {

			// construct button
			var oButton = new sap.m.Button({
				text : oControl.getNumber() + " " + oControl.getNumberUnit(),
				icon : "sap-icon://navigation-right-arrow",
				tooltip : oControl.getTooltip(),
				press : function() {
					oControl.firePress();
				}
			});

			// Switch Button Coloring
			switch (oControl.getMrpavailability()) {
				case i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_AVAILABILITY_NOSHORTAGE : // black
					// no Button!
					break;
				case i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_AVAILABILITY_SAFETYSTOCK : // yellow
					oButton.addStyleClass("sapMRPStockSafetyStockBtn");
					break;
				case i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_AVAILABILITY_BELOWZERO : // red
					oButton.addStyleClass("sapMRPStockShortageBtn");
					break;
				case i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_AVAILABILITY_ACCEPTED : // grey
					oButton.addStyleClass("sapMRPStockAcceptedBtn");
					break;
				default :
					break;
			}

			// icon to the right
			oButton.setIconFirst(false);
			// generic CSS class
			oButton.addStyleClass("sapMRPStockBtn");

			// render the control
			oRm.renderControl(oButton);

		} else { // button not required

			// construct object number
			var oObjectNumber = new sap.m.ObjectNumber({
				number : oControl.getNumber(),
				numberUnit : oControl.getNumberUnit()
			});

			// Switch Label Coloring
			switch (oControl.getMrpavailability()) {
				case i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_AVAILABILITY_NOSHORTAGE : // black
					break;
				case i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_AVAILABILITY_SAFETYSTOCK : // yellow
					oObjectNumber.addStyleClass("sapMRPStockSafetyStockNumber");
					break;
				case i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_AVAILABILITY_BELOWZERO : // red
					oObjectNumber.addStyleClass("sapMRPStockShortageNumber");
					break;
				case i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_AVAILABILITY_ACCEPTED : // grey
					oObjectNumber.addStyleClass("sapMRPStockAcceptedNumber");
					break;
				default :
					break;
			}

			// render the control
			oRm.renderControl(oObjectNumber);
		}

	}

});

}; // end of i2d/pp/mrpcockpit/reuse/controls/Stock.js
if ( !jQuery.sap.isDeclared('i2d.pp.mrpcockpit.reuse.controls.VisualStatusForecast') ) {
"use strict";
jQuery.sap.declare("i2d.pp.mrpcockpit.reuse.controls.VisualStatusForecast");

sap.ui.core.Control.extend("i2d.pp.mrpcockpit.reuse.controls.VisualStatusForecast", {
	/**
	 * @memberOf i2d.pp.mrpcockpit.reuse.controls.VisualStatusForecast
	 */

	sControlName : "STOCKAVAILABILITYCHART",

	metadata : {
		properties : {
			"internStatus" : "string",
			"daysNo" : "int",
			"tooltip" : "string"
		},

		aggregations : {
			content : {
				type : "i2d.pp.mrpcockpit.reuse.controls.VisualStatus",
				multiple : true,
				singularName : "content"
			}
		}
	},

	setInternStatus : function(sAvailabilityChart) {
		this.removeAllContent();
		// cut days number to maximal string lenght from backend : 0 ..31, daysNo[0] means yesterday, daysNo[1]
		// means today,
		var iDaysNo = this.getDaysNo() > 31 ? 31 : this.getDaysNo();
		if (sAvailabilityChart) {
			for ( var i = 1; i <= iDaysNo; i++) { // starting with second value, meaning today
				this.addContent(new i2d.pp.mrpcockpit.reuse.controls.VisualStatus({
					status : sAvailabilityChart.slice(i, i + 1)
				}).setTooltip(this.getTooltip_AsString()));
			}
			this.setProperty("internStatus", sAvailabilityChart, true);
		}
	},

	getControlName : function() {
		return this.sControlName;
	},

	renderer : function(oRm, oControl) {

		// read Materials-attribute "AvailabilityChart" = string[32]{0/1/2/3/4/5}
		// dissolve the string, build 32-array status variable Header
		oRm.write("<div");

		oRm.addClass("sapUiVisualStatusForecast");
		oRm.writeControlData(oControl);
		oRm.writeClasses();
		if (null !== oControl.getTooltip()) {
			oRm.write(" title=\"");
			oRm.writeEscaped(oControl.getTooltip());
			oRm.write("\"");
		}
		oRm.write(">");

		var aChildren = oControl.getContent();
		for ( var i = 0; i < aChildren.length; i++) {
			// loop over all child Controls,
			// render the colored box around them

			oRm.renderControl(aChildren[i]); // render the child Control
		}

		// close element
		oRm.write("</div>");

	},

	init : function(evt) {
	},

}); // end control

sap.ui.core.Control.extend("i2d.pp.mrpcockpit.reuse.controls.VisualStatus", {

	metadata : {
		properties : {
			status : "string", // color code: from service we get "0/1/2/3/4/5"
			text : "string", // possible text value
			tooltip : "string" // possible tooltip value (@TODO)
		}
	},

	/**
	 * Renderer
	 * 
	 * @param oRm
	 * @param oControl
	 */
	renderer : function(oRm, oControl) {
		// evaluate status. From service we get 0/1/2/3/4/5.
		// Map to positive/warning/negative
		var status = "negative";
		switch (oControl.getStatus()) {
			case "0" :
				status = "positive";
				break;
			case "1" :
				status = "warning";
				break;
			case "2" :
				status = "negative";
				break;
			case "3" :
				status = "positive_we";
				break;
			case "4" :
				status = "warning_we";
				break;
			case "5" :
				status = "negative_we";
				break;
			case "6" :
				status = "negative_acc";
				break;
			case "7" :
				status = "negative_we_acc";
				break;
			default :
				status = "negative";
				break;
		}

		oRm.write("<span");
		oRm.addClass(status);
		oRm.writeControlData(oControl);
		oRm.writeClasses();
		oRm.write(">");

		oRm.write("</span>"); // end of the box around the
		// respective child

	},

});

}; // end of i2d/pp/mrpcockpit/reuse/controls/VisualStatusForecast.js
if ( !jQuery.sap.isDeclared('i2d.pp.mrpcockpit.reuse.library') ) {
/* -----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ----------------------------------------------------------------------------------- */

/**
 * Initialization Code and shared classes of library i2d.pp.mrpcockpit.reuse (1.5.7)
 */
jQuery.sap.declare("i2d.pp.mrpcockpit.reuse.library");
jQuery.sap.require('sap.ui.core.Core'); // unlisted dependency retained

/**
 * SAP UI library: i2d.pp.mrpcockpit.reuse (by SAP, Author)
 *
 * @namespace
 * @name i2d.pp.mrpcockpit.reuse
 * @public
 */


// library dependencies
jQuery.sap.require('sap.ui.core.library'); // unlisted dependency retained


// delegate further initialization of this library to the Core
sap.ui.getCore().initLibrary({
	name : "i2d.pp.mrpcockpit.reuse",
	dependencies : ["sap.ui.core"],
	types: [],
	interfaces: [],
	controls: [],
	elements: [],
	noLibraryCSS: true,
	version: "1.5.7"
});


}; // end of i2d/pp/mrpcockpit/reuse/library.js
if ( !jQuery.sap.isDeclared('i2d.pp.mrpcockpit.reuse.util.CommonConstants') ) {
/*
 * CommonConstants.js - App independent Constants
 * 
 * @author D054795
 * 
 * @version 24.10.2013
 * 
 * =============================================================================
 * 
 * (c) Copyright 2011-2013 by SAP AG, Dornierstr. 3, 88677 Markdorf, Germany All
 * rights reserved.
 * =============================================================================
 * 
 * This material is a CONFIDENTIAL, unpublished work of authorship created
 * between 2011 and 2013 and subsequently updated. It is a TRADE SECRET which is
 * property of SAP AG, if not explicitly agreed to otherwise.
 * 
 * All use, disclosure, and / or reproduction not specifically authorized by SAP
 * AG in writing is prohibited.
 */

jQuery.sap.declare("i2d.pp.mrpcockpit.reuse.util.CommonConstants");

//"use strict";
/**
 * Default constructor<br>
 * 
 * @class This is a static class for constants
 * @constructor
 * @public
 */
i2d.pp.mrpcockpit.reuse.util.CommonConstants = {};

/**
 * constants for Events
 */
i2d.pp.mrpcockpit.reuse.util.CommonConstants.EVENT_CHANNELID_CARD_DIALOG_DATACHANGED = "i2d.pp.mrpcockpit.reuse.fragments.DialogChange";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.EVENT_CHANNELID_CARD_PREVIEW = "i2d.pp.materialshortge.details.preview";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.EVENT_CHANNELID_SOLCARD = "i2d.pp.materialshortge.details.solCard";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.EVENT_CHANNELID_AOR_CHANGED = "i2d.pp.mrpcockpit.reuse.view.AoRHandler.AORChange";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.EVENT_CHANNELID_CHANGE_REQUEST = "i2d.pp.changerequest.details.Changed";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.EVENT_CHANNELID_CHANGE_REQUEST_STR = "i2d.pp.changerequest.details.ChangedSTR";

i2d.pp.mrpcockpit.reuse.util.CommonConstants.EVENT_EVENTID_PROCESSED = "processed";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.EVENT_EVENTID_EXECUTE = "execute";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.EVENT_EVENTID_SetToRequested = "setToRequested";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.EVENT_EVENTID_RUN = "run";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.EVENT_EVENTID_OK = "ok";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.EVENT_EVENTID_CANCEL = "cancel";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.EVENT_EVENTID_ERROR = "error";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.EVENT_EVENTID_DIALOG_START = "dialogStart";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.EVENT_EVENTID_DIALOG_CANCEL = "dialogCancel";

/**
 * constants for the solution cards
 */
i2d.pp.mrpcockpit.reuse.util.CommonConstants.CARD_STATE_ENABLED = "01";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.CARD_STATE_DISABLED = "02";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.CARD_STATE_ACTIVE = "03";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.CARD_STATE_LOCKED = "04";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.CARD_STATE_CLICKED = "05";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.CARD_STATE_HIDDEN = "06";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.CARD_TYPE_ACCEPTED = "01";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.CARD_TYPE_REJECTED = "02";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.CARD_TYPE_PENDING = "03";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.CARD_TYPE_CANCELLED = "04";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.CARD_CATEGORY_ACCEPT = "01";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.CARD_CATEGORY_INCREASE = "02";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.CARD_CATEGORY_RESCHEDULE = "03";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.CARD_CATEGORY_CHANGE = "04";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.CARD_ICON_ACCEPT = "sap-icon://accept";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.CARD_ICON_ACCEPT_REMOVE = "sap-icon://accept";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.CARD_ICON_INCREASE = "sap-icon://BusinessSuiteInAppSymbols/icon-increase";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.CARD_ICON_RESCHEDULE = "sap-icon://BusinessSuiteInAppSymbols/icon-expedite";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.CARD_ICON_CHANGE = "sap-icon://edit";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.CARD_ICON_TRANSFER = "sap-icon://shipping-status";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.CARD_ICON_PROCURE = "sap-icon://cart-2";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.CARD_AREA_INSIDE = "OnCard";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.CARD_AREA_ICON = "OnIcon";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.CARD_AREA_EXECUTE = "OnExecute";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.CARD_AREA_OUTSIDE = "NotOnCard";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.CARD_AREA_SCROLLLEFT = "OnScrollLeft";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.CARD_AREA_SCROLLRIGHT = "OnScrollRight";
/**
 * constants for MRP elements
 */
i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_ELEMENT_CATEGORY_ORDRES = "AR";
// Category - Purchase Requisition
i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_ELEMENT_CATEGORY_PURRQS = "BA";
// Category - Subcontractor Requirements of Material Provided
i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_ELEMENT_CATEGORY_SUBREQ = "BB";
// Category - PO Item
i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_ELEMENT_CATEGORY_POITEM = "BE";
// Category - Process Order
i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_ELEMENT_CATEGORY_PRCORD = "BR";
// Category - Production Order
i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_ELEMENT_CATEGORY_PRDORD = "FE";
// Category - Maintenance Order
i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_ELEMENT_CATEGORY_PMORDR = "IH";
// Category - Shipping Notification
i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_ELEMENT_CATEGORY_SHPGNT = "LA";
// Category - SA Delivery Schedule Line
i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_ELEMENT_CATEGORY_SCHLNE = "LE";
// Category - Network Order
i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_ELEMENT_CATEGORY_NTWORD = "NE";
// Category - Planned Order
i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_ELEMENT_CATEGORY_PLDORD = "PA";
// Category - Planned Independent Requirement
i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_ELEMENT_CATEGORY_INDREQ = "PP";
// Category - Returns Item
i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_ELEMENT_CATEGORY_RETURN = "RP";
// Category - Dependent Requirement
i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_ELEMENT_CATEGORY_DEPREQ = "SB";
// Category - Stock Transfer Order
i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_ELEMENT_CATEGORY_RELORD = "U1";
// Category - Release Order for a Stock Transfer Requisition
i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_ELEMENT_CATEGORY_PRQREL = "U2";
//Category - Release Order for a Stock Transfer Requisition
i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_ELEMENT_CATEGORY_PLOREL = "U3";
// Category - Reservation in Another Plant
i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_ELEMENT_CATEGORY_STTRES = "UL";
// Category - Stock Transfer Reservation
i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_ELEMENT_CATEGORY_TRNRES = "UR";
// Category - Order
i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_ELEMENT_CATEGORY_CUSORD = "VC";
// Category - Plant Stock
i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_ELEMENT_CATEGORY_STOCK = "WB";
// Business Partner Type - Supplier
i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_ELEMENT_BUSINESSPARTNERTYPE_SUPPLIER = "1";
// Business Partner Type - Customer
i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_ELEMENT_BUSINESSPARTNERTYPE_CUSTOMER = "2";
// Business Partner Type - IssuingLocation
i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_ELEMENT_BUSINESSPARTNERTYPE_ISSUINGLOC = "3";
// Business Partner Type - ReceivingLocation
i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_ELEMENT_BUSINESSPARTNERTYPE_RECEIVLOC = "4";

/**
 * constants for the MaterialShortageSolutionType
 */
i2d.pp.mrpcockpit.reuse.util.CommonConstants.SOLUTIONTYPE_ACCEPT = "00";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.SOLUTIONTYPE_ACCEPT_REMOVE = "01";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.SOLUTIONTYPE_PO_CREATE = "11";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.SOLUTIONTYPE_PO_INCREASE = "12";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.SOLUTIONTYPE_PO_RESCHEDULE = "13";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.SOLUTIONTYPE_PR_CREATE = "14";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.SOLUTIONTYPE_PR_INCREASE = "15";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.SOLUTIONTYPE_PR_RESCHEDULE = "16";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.SOLUTIONTYPE_TO_CREATE = "17";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.SOLUTIONTYPE_TO_INCREASE = "18";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.SOLUTIONTYPE_TO_RESCHEDULE = "19";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.SOLUTIONTYPE_TOR_CREATE = "20";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.SOLUTIONTYPE_TOR_INCREASE = "21";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.SOLUTIONTYPE_TOR_RESCHEDULE = "22";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.SOLUTIONTYPE_PO_CHANGE = "23";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.SOLUTIONTYPE_PR_CHANGE = "24";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.SOLUTIONTYPE_TO_CHANGE = "25";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.SOLUTIONTYPE_TOR_CHANGE = "26";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.SOLUTIONTYPE_PA_STOCK_CHANGE = "41";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.SOLUTIONTYPE_PA_VENDOR_CHANGE = "42";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.SOLUTIONTYPE_PA_UNSRC_CHANGE = "43";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.SOLUTIONTYPE_PA_PLANT_CHANGE = "44";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.SOLUTIONTYPE_PA_PROD_CHANGE = "45";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.SOLUTIONTYPE_PA_REPLANT_CHANGE = "46";

/**
 * constants for the Solution Dialog Action
 */
i2d.pp.mrpcockpit.reuse.util.CommonConstants.SolutionDialogAction_PO_CHANGE = "PO_CHANGE";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.SolutionDialogAction_TO_CHANGE = "TO_CHANGE";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.SolutionDialogAction_PO_CREATE = "PO_CREATE";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.SolutionDialogAction_TO_CREATE = "TO_CREATE";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.SolutionDialogAction_PR_CHANGE = "PR_CHANGE";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.SolutionDialogAction_PR_CREATE = "PR_CREATE";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.SolutionDialogAction_PR_CONVERT = "PR_CONVERT";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.SolutionDialogAction_TOR_CHANGE = "TOR_CHANGE";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.SolutionDialogAction_TOR_CREATE = "TOR_CREATE";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.SolutionDialogAction_TOR_CONVERT = "TOR_CONVERT";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.SolutionDialogAction_ACCEPT = "SHORTAGE_ACCEPT";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.SolutionDialogAction_PA_CHANGE = "PA_CHANGE";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.SolutionDialogAction_PROD_CONVERT = "PROD_CONVERT";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.SolutionDialogAction_PROC_CONVERT = "PROC_CONVERT";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.SolutionDialogAction_REQ_CONVERT = "REQ_CONVERT";


/**
 * constants for the Solution Dialog / Activity
 */
i2d.pp.mrpcockpit.reuse.util.CommonConstants.SolutionDialogActivity_EXECUTE = "01";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.SolutionDialogActivity_CR_REQUEST = "02";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.SolutionDialogActivity_CR_COLLECT = "03";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.SolutionDialogActivity_PROD_CONVERT = "04";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.SolutionDialogActivity_PROC_CONVERT = "05";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.SolutionDialogActivity_REQ_CONVERT = "06";
/**
 * constants for Change Requests / SolutionRequestStatus
 */
i2d.pp.mrpcockpit.reuse.util.CommonConstants.REQUEST_STATUS_REQUESTED = "01";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.REQUEST_STATUS_APPLIED = "02";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.REQUEST_STATUS_DISCARDED = "03";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.REQUEST_STATUS_ANSWERED = "04";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.REQUEST_STATUS_COLLECTED = "05";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.REQUEST_STATUS_CLOSED = "C1";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.REQUEST_ACTIVE = true;
i2d.pp.mrpcockpit.reuse.util.CommonConstants.REQUEST_INACTIVE = false;

/**
 * constants for Change Requests / VendorResponseStatus
 */
i2d.pp.mrpcockpit.reuse.util.CommonConstants.VENDOR_RESPONSE_ACCEPTED = "01";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.VENDOR_RESPONSE_REJECTED = "02";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.VENDOR_RESPONSE_PROPOSED = "03";

/**
 * constants for Change Requests / Communication Channel
 */
i2d.pp.mrpcockpit.reuse.util.CommonConstants.COMMUNICATION_CHANNEL_TEL = "01";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.COMMUNICATION_CHANNEL_MAIL_DIRECT = "02";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.COMMUNICATION_CHANNEL_MAIL_COLLECTIVE = "03";

/**
 * constants for CRUD / OData Operations
 */
i2d.pp.mrpcockpit.reuse.util.CommonConstants.CRUD_CREATE = "POST";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.CRUD_READ = "GET";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.CRUD_UPDATE = "MERGE";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.CRUD_DELETE = "DELETE";

/**
 * constants for OData / Entity Sets
 */
i2d.pp.mrpcockpit.reuse.util.CommonConstants.ODATA_ENTITYSET_CHANGEREQUEST = "/ChangeRequests";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.ODATA_ENTITYSET_CHANGEREQUESTVENDOR = "/ChangeRequestVendors"; 
i2d.pp.mrpcockpit.reuse.util.CommonConstants.ODATA_ENTITYSET_CHANGEREQUESTPROPOSAL = "/ChangeRequestProposals";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.ODATA_ENTITYSET_ACCEPTSHORTAGE = "/AcceptedShortages";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.ODATA_ENTITYSET_MM_PO_HEADER = "/MMPurchaseOrderHeaders";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.ODATA_ENTITYSET_MM_PO_SCHEDLINE = "/MMPurchaseOrderScheduleLines";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.ODATA_ENTITYSET_MM_PR_HEADER = "/MMPurchaseRequisitionHeaders";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.ODATA_ENTITYSET_MM_PR_ITEM = "/MMPurchaseRequisitionItems";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.ODATA_ENTITYSET_QUICKVIEWS = "/QuickViews";
/**
 * MasterList Status
 */
i2d.pp.mrpcockpit.reuse.util.CommonConstants.MASTER_LIST_STATUS_SHORTAGE = 0;
i2d.pp.mrpcockpit.reuse.util.CommonConstants.MASTER_LIST_STATUS_ACCEPTED = 1;
i2d.pp.mrpcockpit.reuse.util.CommonConstants.MASTER_LIST_STATUS_PENDING = 2;
i2d.pp.mrpcockpit.reuse.util.CommonConstants.MASTER_LIST_STATUS_PROCESSED = 3;
i2d.pp.mrpcockpit.reuse.util.CommonConstants.MASTER_LIST_STATUS_NO_SHORTAGE = 4;

/**
 * Days of Supply Duration, i.e. how long lasts the current stock/supply
 */
i2d.pp.mrpcockpit.reuse.util.CommonConstants.DAYS_OF_SUPPLY_NO_SHORTAGE = 999;

/**
 * Detail/Solution View
 */
i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_AVAILABILITY_NOSHORTAGE = "0"; // green
i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_AVAILABILITY_SAFETYSTOCK = "1"; // yellow
i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_AVAILABILITY_BELOWZERO = "2"; // red
i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_AVAILABILITY_ACCEPTED = "6"; // grey

i2d.pp.mrpcockpit.reuse.util.CommonConstants.VIEW_S3 = "S3";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.VIEW_S4 = "S4";

/**
 * Demand Types
 */
i2d.pp.mrpcockpit.reuse.util.CommonConstants.DEMAND_TYPE_SALES_ORDER = "1";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.DEMAND_TYPE_TRANSPORT_ORDER = "2";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.DEMAND_TYPE_PRODUCTION_ORDER = "4";

/**
 * Constants for AoR
 */
i2d.pp.mrpcockpit.reuse.util.CommonConstants.AOR_DEFINITION_CANCELED = "AOR_DEFINITION_CANCELED";
i2d.pp.mrpcockpit.reuse.util.CommonConstants.AOR_DEFINITION_FAILED = "AOR_DEFINITION_FAILED";

/**
 * Constants for Quick View Category
 */
i2d.pp.mrpcockpit.reuse.util.CommonConstants.QUICKVIEW_CAT = {
	PRDORD : "031",
	ORDRES : "032",
	PRCORD : "033",
	PLANORD_STOCK : "041",
	PLANORD_VENDOR : "042",
	PLANORD_UNSRC : "043",
	PLANORD_PLANT : "044",
	PLANORD_PROD : "045",
	PLANORD_REPLANT : "046",
	CHANGE_PLANORD : "000",
	CONV_REQ : "100",
	CONV_PROD : "200",
	CONV_PROC : "300"
};

/**
 * ConstantsObject as MRP Element Category Model
 */
i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRPElementCategory = {
	MRP_ELEMENT_CATEGORY_ORDRES : "AR",
	// Category - Purchase Requisition
	MRP_ELEMENT_CATEGORY_PURRQS : "BA",
	// Category - Subcontractor Requirements of Material Provided
	MRP_ELEMENT_CATEGORY_SUBREQ : "BB",
	// Category - PO Item
	MRP_ELEMENT_CATEGORY_POITEM : "BE",
	// Category - Process Order
	MRP_ELEMENT_CATEGORY_PRCORD : "BR",
	// Category - Production Order
	MRP_ELEMENT_CATEGORY_PRDORD : "FE",
	// Category - Maintenance Order
	MRP_ELEMENT_CATEGORY_PMORDR : "IH",
	// Category - Shipping Notification
	MRP_ELEMENT_CATEGORY_SHPGNT : "LA",
	// Category - SA Delivery Schedule Line
	MRP_ELEMENT_CATEGORY_SCHLNE : "LE",
	// Category - Network Order
	MRP_ELEMENT_CATEGORY_NTWORD : "NE",
	// Category - Planned Order
	MRP_ELEMENT_CATEGORY_PLDORD : "PA",
	// Category - Planned Independent Requirement
	MRP_ELEMENT_CATEGORY_INDREQ : "PP",
	// Category - Returns Item
	MRP_ELEMENT_CATEGORY_RETURN : "RP",
	// Category - Dependent Requirement
	MRP_ELEMENT_CATEGORY_DEPREQ : "SB",
	// Category - Stock Transfer Order
	MRP_ELEMENT_CATEGORY_RELORD : "U1",
	// Category - Release Order for a Stock Transfer Requisition
	MRP_ELEMENT_CATEGORY_PRQREL : "U2",
	//Category - Release Order for a Stock Transfer Requisition
	MRP_ELEMENT_CATEGORY_PLOREL : "U3",
	// Category - Reservation in Another Plant
	MRP_ELEMENT_CATEGORY_STTRES : "UL",
	// Category - Stock Transfer Reservation
	MRP_ELEMENT_CATEGORY_TRNRES : "UR",
	// Category - Order
	MRP_ELEMENT_CATEGORY_CUSORD : "VC",
	// Category - Plant Stock
	MRP_ELEMENT_CATEGORY_STOCK : "WB"
};

/**
 * Constants for Routing
 */
i2d.pp.mrpcockpit.reuse.util.CommonConstants.ROUTING = {
	DETAIL : "MRPDetailRoute",
	SUB_DETAIL : "subDetail",
	SUB_DETAIL_WAVE3 : "subDetail_Wave3"
};

i2d.pp.mrpcockpit.reuse.util.CommonConstants.NavToCR = "MRPCockpitNavigation.540";

/**
 * Constants for View State
 */
i2d.pp.mrpcockpit.reuse.util.CommonConstants.VIEW_STATE_VALIDITY_TIME = 60;

/**
 * Constants for Model S backend check
 */
i2d.pp.mrpcockpit.reuse.util.CommonConstants.BACKEND_MODEL_S = 99;
i2d.pp.mrpcockpit.reuse.util.CommonConstants.ONE_CODELINE_TEXT = false;

}; // end of i2d/pp/mrpcockpit/reuse/util/CommonConstants.js
if ( !jQuery.sap.isDeclared('i2d.pp.mrpcockpit.reuse.util.CommonFormatter') ) {
jQuery.sap.declare("i2d.pp.mrpcockpit.reuse.util.CommonFormatter");
jQuery.sap.require('sap.ca.ui.model.format.DateFormat'); // unlisted dependency retained

jQuery.sap.require('sap.ca.ui.model.format.NumberFormat'); // unlisted dependency retained

jQuery.sap.require('sap.ca.ui.model.format.QuantityFormat'); // unlisted dependency retained


i2d.pp.mrpcockpit.reuse.util.CommonFormatter = {

	/**
	 * hides the quantity if the shortage has status "Accepted" or "Processed"
	 * 
	 * @memberOf CommonFormatter
	 */
	hideQuantityBasedOnStatus : function(value, precision, statusCode) {
		// if status is "accepted" or "pending", shortage quantity shall not be
		// displayed
		switch (Number(statusCode)) {

			case i2d.pp.mrpcockpit.reuse.util.CommonConstants.MASTER_LIST_STATUS_ACCEPTED : // Accepted
				return "";

			case i2d.pp.mrpcockpit.reuse.util.CommonConstants.MASTER_LIST_STATUS_PENDING : // Request
				// Pending
				if (value) {
					return sap.ca.ui.model.format.NumberFormat.getInstance({
						decimals : precision
					}).format(value);
				}
				return "";

			case i2d.pp.mrpcockpit.reuse.util.CommonConstants.MASTER_LIST_STATUS_PROCESSED : // Processed
				return "";

			default :
				if (value === 0.000) {
					return "";
				} else if (value) {
					return sap.ca.ui.model.format.NumberFormat.getInstance({
						decimals : precision
					}).format(value);
				}
		}
	},

	/**
	 * Color formatting of different status
	 * 
	 * @memberOf CommonFormatter
	 */
	colorFormatObjectStatus : function(statusCode, supplyDuration, shortQuantity) {

		// identify no shortage until MASTER_LIST_STATUS_NO_SHORTAGE is provided from the backend
		if ((statusCode == "") && (supplyDuration == 0) && (shortQuantity == 0)) {
			// No shortage
			return sap.ui.core.ValueState.Success;
		}

		switch (Number(statusCode)) {
			case i2d.pp.mrpcockpit.reuse.util.CommonConstants.MASTER_LIST_STATUS_SHORTAGE :
				// Shortage
				return sap.ui.core.ValueState.None;
			case i2d.pp.mrpcockpit.reuse.util.CommonConstants.MASTER_LIST_STATUS_ACCEPTED :
				// Accepted
				return sap.ui.core.ValueState.Success;
			case i2d.pp.mrpcockpit.reuse.util.CommonConstants.MASTER_LIST_STATUS_PENDING :
				// Request Pending
				return sap.ui.core.ValueState.None;
			case i2d.pp.mrpcockpit.reuse.util.CommonConstants.MASTER_LIST_STATUS_PROCESSED :
				// Processed
				return sap.ui.core.ValueState.Success;
			case i2d.pp.mrpcockpit.reuse.util.CommonConstants.MASTER_LIST_STATUS_NO_SHORTAGE :
				// No shortage
				return sap.ui.core.ValueState.Success;
			default :
				return sap.ui.core.ValueState.None;
		}
	},

	// returns the icons indicating the status of a request
	requestStatusIcon : function(requestStatus) {
		// We want to display just the pending status in the supply demand item list
		if (requestStatus === i2d.pp.mrpcockpit.reuse.util.CommonConstants.REQUEST_STATUS_PENDING) {
			return "sap-icon://pending";
		} else {
			return "";
		}
	},

	// returns the icons indicating the status of a request on the solution view
	requestStatusIconSolView : function(requestStatus, catID, quantity) {
		// If the MRP Element is the plant stock, or the values is negative we don't
		// display the status
		// if (catID === "WB" || (quantity < 0)) {
		if (catID === i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_ELEMENT_CATEGORY_STOCK || (quantity < 0)) {
			return "";
		} else {
			return i2d.pp.mrpcockpit.reuse.util.CommonFormatter.requestStatusIcon(requestStatus);
		}
	},

	/**
	 * This method decides whether to show the notes on the solution dialog or not based on the current status of the
	 * change request. Used in solution dialog to show the note-area
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.util.CommonFormatter
	 */
	getSolutionDialogNotesVisible : function(iDialogActivity) {
		if (iDialogActivity === i2d.pp.mrpcockpit.reuse.util.CommonConstants.SolutionDialogActivity_EXECUTE) {
			return false;
		} else {
			return true;
		}
	},

	/**
	 * This method decides whether to show the icon in the S3/S4 Supply Demand Items section based on the status of the
	 * Change Request
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.util.CommonFormatter
	 */
	getChangeRequestVisibility : function(requestStatus, catID, quantity) {
		if (requestStatus === i2d.pp.mrpcockpit.reuse.util.CommonConstants.REQUEST_STATUS_REQUESTED
				|| requestStatus === i2d.pp.mrpcockpit.reuse.util.CommonConstants.REQUEST_STATUS_ANSWERED
				|| requestStatus === i2d.pp.mrpcockpit.reuse.util.CommonConstants.REQUEST_STATUS_COLLECTED) {
			return true;
		} else {
			return false;
		}
	},

	/**
	 * This method determines the tooltip for the Change Request Icon that is shown on the S4 screen in the area of the
	 * supply demand items. Important: This method also sets CCS classes that are responsible for the color of the icon.
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.util.CommonFormatter
	 */
	getChangeRequestTooltip : function(iRequestStatus, iVendorResponse) {
		if (iRequestStatus === i2d.pp.mrpcockpit.reuse.util.CommonConstants.REQUEST_STATUS_REQUESTED) {
			this.addStyleClass("sapMRPIconNormal");
			return this.getModel('Common_i18n').getResourceBundle().getText("REQUEST_STATUS_TOOLTIP_CREATED");
		} else if (iRequestStatus === i2d.pp.mrpcockpit.reuse.util.CommonConstants.REQUEST_STATUS_COLLECTED) {
			this.addStyleClass("sapMRPIconNormal");
			return this.getModel('Common_i18n').getResourceBundle().getText("REQUEST_STATUS_TOOLTIP_COLLECTED");
		} else if (iRequestStatus === i2d.pp.mrpcockpit.reuse.util.CommonConstants.REQUEST_STATUS_ANSWERED) {
			switch (iVendorResponse) {
				case i2d.pp.mrpcockpit.reuse.util.CommonConstants.VENDOR_RESPONSE_ACCEPTED :
					this.addStyleClass("sapMRPIconGreen");
					return this.getModel('Common_i18n').getResourceBundle().getText("REQUEST_STATUS_TOOLTIP_ACCEPTED");
				case i2d.pp.mrpcockpit.reuse.util.CommonConstants.VENDOR_RESPONSE_REJECTED :
					this.addStyleClass("sapMRPIconRed");
					return this.getModel('Common_i18n').getResourceBundle().getText("REQUEST_STATUS_TOOLTIP_REJECTED");
				case i2d.pp.mrpcockpit.reuse.util.CommonConstants.VENDOR_RESPONSE_PROPOSED :
					this.addStyleClass("sapMRPIconOrange");
					// ONE CODE LINE : NO TOOLTIP!>>> NO oController, no aDiffFieldText, so do the uncool version
					if (i2d.pp.mrpcockpit.reuse.util.CommonConstants.ONE_CODELINE_TEXT) {
						if (this.getModel('ServiceVersions')) {
							var sI18nID = i2d.pp.mrpcockpit.reuse.util.Helper.getSpecialTextForFieldInt({sI18nID : "REQUEST_STATUS_TOOLTIP_PROPOSED", 
								sSoHI18nID : "REQUEST_STATUS_TOOLTIP_PROPOSEDSoH", sModSI18nID : "REQUEST_STATUS_TOOLTIP_PROPOSEDModS", 
								iServiceVersion : this.getModel('ServiceVersions').getData().iServiceSchemaVersion});
							return this.getModel('Common_i18n').getResourceBundle().getText(sI18nID);
						}
					}
					// ONE CODE LINE <<<
					return this.getModel('Common_i18n').getResourceBundle().getText("REQUEST_STATUS_TOOLTIP_PROPOSED");
				default :
					this.addStyleClass("sapMRPIconNormal");
					return this.getModel('Common_i18n').getResourceBundle().getText("CARD_TIT_UNKNOWN");
			}
		} else {
			this.addStyleClass("sapMRPIconNormal");
			return "";
		}
	},

	/**
	 * This method returns the icons indicating - firm requisition - released production order - partially delivered Used
	 * in S3 Supply Demand Items
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.util.CommonFormatter
	 */
	flagIconSrc : function(isFirm, isReleased, isPartiallyDelivered) {
		if (isFirm) {
			return "sap-icon://locked";

			// When isPartiallyDelivered is true, isReleased is always true as well
			// because status "released" is prerequisite for "partially delivered",
			// but we want to display only "partially delivered". So isPartiallyDdelivered
			// has to be checked before isReleased is checked.
		} else if (isPartiallyDelivered) {
			return "sap-icon://BusinessSuiteInAppSymbols/icon-partially-delivered";

		} else if (isReleased) {
			return "sap-icon://BusinessSuiteInAppSymbols/icon-approved";

		} else {
			return "";
		}
	},

	/**
	 * This method decides whether the icon shall be visible. If one of the bound fields is true, the icon shall be
	 * visible
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.util.CommonFormatter
	 */
	flagIconVisible : function(isFirm, isReleased, isPartiallyDelivered) {
		if (isFirm) {
			return true;
		} else if (isPartiallyDelivered) {
			return true;
		} else if (isReleased) {
			return true;
		} else {
			return false;
		}
	},

	/**
	 * This method returns a tooltip for the icons indicating - firm requisition - released production order - partially
	 * delivered
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.util.CommonFormatter
	 */
	flagIconTooltip : function(isFirm, isReleased, isPartiallyDelivered, context) {
		if (!context) {
			context = this;
		}
		if (isFirm) {
			return context.getModel('Common_i18n').getResourceBundle().getText("IS_FIRM");

			// When isPartiallyDelivered is true, isReleased is always true as well
			// because status "released" is prerequisite for "partially delivered",
			// but we want to display only "partially delivered". So isPartiallyDdelivered
			// has to be checked before isReleased is checked.
		} else if (isPartiallyDelivered) {
			return context.getModel('Common_i18n').getResourceBundle().getText("IS_PARTIALLY_DELIVERED");
		} else if (isReleased) {
			return context.getModel('Common_i18n').getResourceBundle().getText("IS_RELEASED");
		} else {
			return "";
		}
	},

	/**
	 * This method returns the icons indicating - firm requisition - released production order - partially delivered Used
	 * in S4 Solution View
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.util.CommonFormatter
	 */
	flagIconSolView : function(isFirm, isReleased, isPartiallyDelivered, catID, quantity) {
		// If the MRP Element is the plant stock, or the values is negative we don't
		// display the flags
		if (catID === i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_ELEMENT_CATEGORY_STOCK || (quantity < 0)) {
			return "";
		} else {
			return i2d.pp.mrpcockpit.reuse.util.CommonFormatter.flagIconSrc(isFirm, isReleased, isPartiallyDelivered);
		}
	},

	/**
	 * This method decides whether the icon shall be visible Used in S4 Solution View
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.util.CommonFormatter
	 */
	flagIconSolViewVisible : function(isFirm, isReleased, isPartiallyDelivered, catID, quantity) {
		if (catID === i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_ELEMENT_CATEGORY_STOCK || (quantity < 0)) {
			return false;
		} else {
			return true;
		}
	},

	/**
	 * This method returns a tooltip for the icons indicating - firm requisition - released production order - partially
	 * delivered
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.util.CommonFormatter
	 */
	flagIconSolViewTooltip : function(isFirm, isReleased, isPartiallyDelivered, catID, quantity) {
		// If the MRP Element is the plant stock, or the values is negative we don't
		// display the flags
		if (catID === i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_ELEMENT_CATEGORY_STOCK || (quantity < 0)) {
			return "";
		} else {
			return i2d.pp.mrpcockpit.reuse.util.CommonFormatter.flagIconTooltip(isFirm, isReleased, isPartiallyDelivered,
					this);
		}
	},

	// returns the icon indicating a supply or a demand in the table
	// based on a positive or negative quantity.
	sditemicon : function(quantity, catID) {
		if ((Number(quantity) == 0) || i2d.pp.mrpcockpit.reuse.util.CommonFormatter.isStockItem(catID)) {
			return "sap-icon://BusinessSuiteInAppSymbols/icon-current-stock";
		}
		if (Number(quantity) < 0) {
			return "sap-icon://down";
		} else {
			return "sap-icon://up";
		}
	},

	// returns the tooltip indicating a supply or a demand in the table
	// based on a positive or negative quantity.
	sditemtooltip : function(quantity, catID) {
		if ((Number(quantity) == 0) || i2d.pp.mrpcockpit.reuse.util.CommonFormatter.isStockItem(catID)) {
			return this.getModel('Common_i18n').getResourceBundle().getText("XTOL_CURRENT_STOCK");
		}
		if (Number(quantity) < 0) {
			return this.getModel('Common_i18n').getResourceBundle().getText("XTOL_REQIREMENT_QTY");
		} else {
			return this.getModel('Common_i18n').getResourceBundle().getText("XTOL_RECEIPT_QTY");
		}
	},

	// returns a shortage indication (true or false) based on a given value
	// at the moment value 0 defines the shortage
	isShortage : function(value) {
		if (value < 0) {
			return true;
		} else {
			return false;
		}
	},

	// TODO: clarify concatenating in that way is allowed
	// returns relevant information about the mrp element dependendent on the MRP element category
	categoryLongName : function(catID, catName, name, item, documentType, sourceCatID, sourceName, sourceItem) {

		switch (catID) {

			case i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_ELEMENT_CATEGORY_INDREQ : // Planned Idependent
				// Requirements
				return catName + " " + documentType;

			case i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_ELEMENT_CATEGORY_SUBREQ : // Subcontractor
				// requirements of
				// material provided
				if (!sourceItem) {
					return catName + " " + sourceName + " (" + sourceCatID + ")";
				} else {
					return catName + " " + sourceName + "-" + sourceItem + " (" + sourceCatID + ")";
				}
				break;

//			case i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_ELEMENT_CATEGORY_DEPREQ : // Dependent requirement
			case i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_ELEMENT_CATEGORY_ORDRES :// Dependent reservation
				return catName + " " + sourceName;

			default : // all other MRP element categories
				if (!item) {
					return catName + " " + name;
				} else {
					return catName + " " + name + "-" + item;
				}
		}

	},

	/**
	 * Defines a separate CSS class for Supply/Demand arrow icons in S3 and S4 views
	 * 
	 */
	sdIconState : function(value, catID) {

		if ((Number(value) == 0) || i2d.pp.mrpcockpit.reuse.util.CommonFormatter.isStockItem(catID)) {
			return sap.ui.core.ValueState.None;
		}
		if (Number(value) > 0) {
			return sap.ui.core.ValueState.Success;
		} else {
			return sap.ui.core.ValueState.Error;
		}

	},		
	
	/**
	 * Returns an HTML "mailto:" link for the given mail address
	 */
	email : function(value) {
		return "mailto:" + value;
	},

	/**
	 * Returns an HTML "tel:" link for the given number. Special characters are removed if needed
	 */
	tel : function(value) {
		if (value) {
			value = value.replace(/[\s\-\[\]\/\{\}\(\)\*\?\.\\\^\$\|]/g, "");
			return "tel:" + value;
		}
		return value;
	},

	getVendorOrPlantLabel : function(solutionType) {
		switch (solutionType) {
			case i2d.pp.mrpcockpit.reuse.util.CommonConstants.SOLUTIONTYPE_PO_CREATE :
			case i2d.pp.mrpcockpit.reuse.util.CommonConstants.SOLUTIONTYPE_PO_INCREASE :
			case i2d.pp.mrpcockpit.reuse.util.CommonConstants.SOLUTIONTYPE_PO_RESCHEDULE :
			case i2d.pp.mrpcockpit.reuse.util.CommonConstants.SOLUTIONTYPE_PR_CREATE :
			case i2d.pp.mrpcockpit.reuse.util.CommonConstants.SOLUTIONTYPE_PR_INCREASE :
			case i2d.pp.mrpcockpit.reuse.util.CommonConstants.SOLUTIONTYPE_PR_RESCHEDULE :
			case i2d.pp.mrpcockpit.reuse.util.CommonConstants.SOLUTIONTYPE_PO_CHANGE :
			case i2d.pp.mrpcockpit.reuse.util.CommonConstants.SOLUTIONTYPE_PR_CHANGE :
			case i2d.pp.mrpcockpit.reuse.util.CommonConstants.SOLUTIONTYPE_PA_VENDOR_CHANGE :
			case i2d.pp.mrpcockpit.reuse.util.CommonConstants.SOLUTIONTYPE_PA_UNSRC_CHANGE :
				return this.getModel('Common_i18n').getResourceBundle().getText("VENDOR");
			case i2d.pp.mrpcockpit.reuse.util.CommonConstants.SOLUTIONTYPE_TO_CREATE :
			case i2d.pp.mrpcockpit.reuse.util.CommonConstants.SOLUTIONTYPE_TO_INCREASE :
			case i2d.pp.mrpcockpit.reuse.util.CommonConstants.SOLUTIONTYPE_TO_RESCHEDULE :
			case i2d.pp.mrpcockpit.reuse.util.CommonConstants.SOLUTIONTYPE_TOR_CREATE :
			case i2d.pp.mrpcockpit.reuse.util.CommonConstants.SOLUTIONTYPE_TOR_INCREASE :
			case i2d.pp.mrpcockpit.reuse.util.CommonConstants.SOLUTIONTYPE_TOR_RESCHEDULE :
			case i2d.pp.mrpcockpit.reuse.util.CommonConstants.SOLUTIONTYPE_TO_CHANGE :
			case i2d.pp.mrpcockpit.reuse.util.CommonConstants.SOLUTIONTYPE_TOR_CHANGE :
			case i2d.pp.mrpcockpit.reuse.util.CommonConstants.SOLUTIONTYPE_PA_PLANT_CHANGE :
			case i2d.pp.mrpcockpit.reuse.util.CommonConstants.SOLUTIONTYPE_PA_REPLANT_CHANGE :
				return this.getModel('Common_i18n').getResourceBundle().getText("PLANT");
			case i2d.pp.mrpcockpit.reuse.util.CommonConstants.SOLUTIONTYPE_PA_STOCK_CHANGE :
			case i2d.pp.mrpcockpit.reuse.util.CommonConstants.SOLUTIONTYPE_PA_PROD_CHANGE :
				return this.getModel('Common_i18n').getResourceBundle().getText("PRODUCTION_SUPERVISOR");
		}
	},

	getVendorOrPlantName : function(plantID, name) {
		if (plantID) {
			if (name) {
				return this.getModel('Common_i18n').getResourceBundle().getText("TUPEL_WITH_PARENTHESIS", [plantID, name]);
			} else {
				return plantID;
			}
		} else if (name) {
			return name;
		} else {
			return this.getModel('Common_i18n').getResourceBundle().getText("NOT_YET_DETERMINED");
		}
	},

	quantity : function(quantity, precision) {
		var value = Math.abs(quantity);
		return sap.ca.ui.model.format.NumberFormat.getInstance({
			decimals : precision
		}).format(value);

	},

	stockQuantity : function(quantity, precision) {
		var quant = Number(quantity);
		return sap.ca.ui.model.format.NumberFormat.getInstance({
			decimals : precision
		}).format(quant);
	},

	stockQuantitySolView : function(quantity, precision, unit) {
		var quant = i2d.pp.mrpcockpit.reuse.util.CommonFormatter.stockQuantity(quantity, precision);

		return quant + " " + unit;
	},

	/**
	 * Returns true if the supplied MRPElementCategory is a purchase requisition or a stock transfer requisition
	 */
	isRequisition : function(catID) {
		if ((catID == i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_ELEMENT_CATEGORY_PURRQS)
				|| (catID == i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_ELEMENT_CATEGORY_PRQREL)) {
			return true;
		}
		return false;

	},

	/**
	 * Returns true if the supplied MRPElementCategory is not a purchase requisition or a stock transfer requisition
	 */
	isNoRequisition : function(catID) {
		return !i2d.pp.mrpcockpit.reuse.util.CommonFormatter.isRequisition(catID);
	},

	/**
	 * Returns true if an MRPElementCategory is no stock category
	 */
	isSupplyDemandItem : function(catID) {
		return !i2d.pp.mrpcockpit.reuse.util.CommonFormatter.isStockItem(catID);
	},

	// Returns true if an MRPElementCategory is a stock category
	isStockItem : function(catID) {
		return (catID === i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_ELEMENT_CATEGORY_STOCK);
	},

	hideStockDate : function(catID, date) {
		if (date && !i2d.pp.mrpcockpit.reuse.util.CommonFormatter.isStockItem(catID)) {
			return date.toLocaleDateString();
		} else {
			return "";
		};
	},

	/**
	 * Merging Key for the Available Quantity. Category, Date and Quantity needs to be considered
	 */
	availableQuantityMergingKey : function(catID, date, quantity) {
		if (catID === i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_ELEMENT_CATEGORY_STOCK) {
			return catID + date + quantity;
		}
		return date + quantity;
	},

	/**
	 * Refactoring for new Stock control
	 * 
	 * @author Vladimir (please keep it for a while)
	 */
	/*
	 * getStockClass : function (catID, mrpAvailability) { var className = "sapMRPStockHiddenBtn"; if (catID === "WB" ||
	 * mrpAvailability === i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_AVAILABILITY_NOSHORTAGE) { className =
	 * "sapMRPStockHiddenBtn"; } return className; },
	 */

	// converts begin and end date into one string
	dateTo : function(dateBegin, dateEnd) {

		var dateBeginTxt = (new sap.ca.ui.model.type.Date()).oOutputFormat.format(dateBegin, {
			style : 'medium'
		});
		var dateEndTxt = (new sap.ca.ui.model.type.Date()).oOutputFormat.format(dateEnd, {
			style : 'medium'
		});

		return this.getModel('Common_i18n').getResourceBundle().getText("DATE_TO", [dateBeginTxt, dateEndTxt]);

	},

	vendorOrReq : function(requirementCounter, catID, name, type, businessPartnerID, documentType, assembly, safetyStock,
			precision, unit) {
		if (Number(requirementCounter) > 0) {
			return "";
		} else {
			return i2d.pp.mrpcockpit.reuse.util.CommonFormatter.getBusinessPartnerName(catID, name, type, businessPartnerID,
					documentType, assembly, safetyStock, precision, unit, this);
		}

	},

	/**
	 * Returns a combination of the supplied value and the suffix 'day(s)' If the supplied value is empty, the returned
	 * combination is also empty
	 */
	formatDayValue : function(dayValue) {

		if (dayValue && (dayValue == 1)) {
			return this.getModel('Common_i18n').getResourceBundle().getText("ONE_DAY");
		} else if (dayValue && (dayValue > 1)) {
			return this.getModel('Common_i18n').getResourceBundle().getText("DAYS", [dayValue]);
		} else {
			return "";
		}
	},

	/**
	 * Returns 'No' for Boolean.FALSE or empty value <br>
	 * Returns YES' in any other case
	 */
	formatBooleanValue : function(booleanValue, context) {
		if (!context) {
			context = this;
		}
		if (booleanValue) {
			return context.getModel('Common_i18n').getResourceBundle().getText("YES_TEXT");
		} else {
			return context.getModel('Common_i18n').getResourceBundle().getText("NO_TEXT");
		}
	},

	getRequirements : function(reqCount, catID, catName, name, item, documentType, sourceCatID, sourceName, sourceItem) {

		if (Number(reqCount) > 0) {
			return this.getModel('Common_i18n').getResourceBundle().getText("REQUIREMENT_COUNT", [reqCount]);
		}

		return i2d.pp.mrpcockpit.reuse.util.CommonFormatter.categoryLongName(catID, catName, name, item, documentType,
				sourceCatID, sourceName, sourceItem);

	},

	// returns the business partner information dependent on the MRP element category
	getBusinessPartnerName : function(catID, name, type, businessPartnerID, documentType, assembly, safetyStock,
			precision, unit, context) {
		if (!context) {
			context = this;
		}
		var unsourcedTxt = context.getModel('Common_i18n').getResourceBundle().getText("UNSOURCED");
		var plantLong = context.getModel('Common_i18n').getResourceBundle()
				.getText("PLANT_LONG", [businessPartnerID, name]);

		var formattedQuantity = 0;

		switch (catID) {

			case i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_ELEMENT_CATEGORY_STOCK : // stock
				if (Number(safetyStock) > 0) {
					formattedQuantity = i2d.pp.mrpcockpit.reuse.util.CommonFormatter.stockQuantity(safetyStock, precision);
					return context.getModel('Common_i18n').getResourceBundle().getText("SAFETY_STOCK", [formattedQuantity, unit]);
				} else {
					return context.getModel('Common_i18n').getResourceBundle().getText("NO_SAFETY_STOCK");
				}
			case i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_ELEMENT_CATEGORY_PURRQS : // purchase requisition
			case i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_ELEMENT_CATEGORY_POITEM : // purchase order
			case i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_ELEMENT_CATEGORY_SHPGNT : // shipping notification
			case i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_ELEMENT_CATEGORY_SCHLNE : // SA delivery schedule
				// line
			case i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_ELEMENT_CATEGORY_RETURN : // returns item
			case i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_ELEMENT_CATEGORY_STTRES : // reservation in another
				// plant
			case i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_ELEMENT_CATEGORY_TRNRES : // stock transfer
				// reservation
			case i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_ELEMENT_CATEGORY_RELORD : // stock transfer order
			case i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_ELEMENT_CATEGORY_PRQREL : // stock Transfer
				// requisition
				if (type === i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_ELEMENT_BUSINESSPARTNERTYPE_SUPPLIER
						|| type === i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_ELEMENT_BUSINESSPARTNERTYPE_CUSTOMER) {
					// in case business partner is a supplier or customer, return only the name of the business partner
					return name;
				} else if (type === i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_ELEMENT_BUSINESSPARTNERTYPE_ISSUINGLOC
						|| type === i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_ELEMENT_BUSINESSPARTNERTYPE_RECEIVLOC) {
					// in case the business partner is a plant, return plant id and plant name formatted
					return plantLong;
				} else {
					// if no business partner is provided, return unsourced text
					return unsourcedTxt;
				}
				break;

			case i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_ELEMENT_CATEGORY_CUSORD : // sales order
				if (!name) {
					return unsourcedTxt;
				} else {
					return name;
				}
				break;

			case i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_ELEMENT_CATEGORY_PRCORD : // process order
			case i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_ELEMENT_CATEGORY_PRDORD : // production order
			case i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_ELEMENT_CATEGORY_PMORDR : // maintenance order
			case i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_ELEMENT_CATEGORY_NTWORD : // network order
			case i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_ELEMENT_CATEGORY_PLDORD : // planned order
				return documentType;
			case i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_ELEMENT_CATEGORY_SUBREQ : // Subcontractor
				// requirements of
				// material provided
			case i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_ELEMENT_CATEGORY_DEPREQ : // Dependent requirement
			case i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_ELEMENT_CATEGORY_ORDRES : // Dependent reservation
				return assembly;
			default : // all other MRP element categories
				return "";
		}

	},

	/**
	 * Returns true if at least one of the given arguments is not initial <br>
	 * Returns false if all given arguments are initial, strings representing an empty quantity (e.g. "0.000") are also
	 * considered as initial
	 */
	hasValue : function() {

		// "a", true
		// "0.5", true
		// -5, true
		// "2014-10-01T12:00:00", true
		// "+497544970", true

		// "", false
		// " ", false
		// 0, false
		// "0.000", false

		for ( var i in arguments) {
			if (arguments[i] && !(/^\s*$/.test(arguments[i])) && (Number(arguments[i]) !== 0)) {
				return true;
			}
		}
		return false;
	},

	/**
	 * Returns true if both given arguments are not initial <br>
	 * Returns false if at least one of the given arguments is initial <br>
	 * Strings representing an empty quantity (e.g. "0.000") are also considered as initial
	 */
	hasValueAll : function(value, value2) {

		// "", false
		// " ", false
		// 0, false
		// "0.000", false
		if ((!value || /^\s*$/.test(value) || (Number(value) == 0))
				|| (!value2 || /^\s*$/.test(value2) || (Number(value2) == 0))) {
			return false;
		}
		// "a", true
		// "0.5", true
		// -5, true
		// "2014-10-01T12:00:00", true
		// "+497544970", true
		return true;
	},

	/**
	 * Returns true if the first given argument is not initial and the second argument is initial<br>
	 * Returns false in all other cases <br>
	 * Strings representing an empty quantity (e.g. "0.000") are also considered as initial
	 */
	hasFirstValueOnly : function(value, value2) {

		// "", false
		// " ", false
		// 0, false
		// "0.000", false
		if (((value && !/^\s*$/.test(value)) || (Number(value) != 0))
				&& (!value2 || /^\s*$/.test(value2) || (Number(value2) == 0))) {
			return true;
		}
		// "a", true
		// "0.5", true
		// -5, true
		// "2014-10-01T12:00:00", true
		// "+497544970", true
		return false;
	},

	/**
	 * Color formatting of object number (detailed view)
	 * 
	 * @memberOf CommonFormatter
	 */
	colorFormatStockStatus : function(statusCode) {

		// Switch Button Coloring
		switch (statusCode) {
			case i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_AVAILABILITY_NOSHORTAGE : // grey
				// no Button!
				return sap.ui.core.ValueState.None;
			case i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_AVAILABILITY_SAFETYSTOCK : // yellow
				return sap.ui.core.ValueState.Warning;
			case i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_AVAILABILITY_BELOWZERO : // red
				return sap.ui.core.ValueState.Error;
			case i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_AVAILABILITY_ACCEPTED : // grey
				return sap.ui.core.ValueState.None;
			default :
				return sap.ui.core.ValueState.None;
		}

	},

	/**
	 * line Break for status Text
	 * 
	 * @memberOf CommonFormatter
	 */
	formatLineBreak : function(sText) {
		if (sText) {
			var aArr = sText.split(" ");
			var slineBreak = aArr[0] + "\n" + aArr.slice(1).join(" ");
			return slineBreak;
		} else {
			return "";
		}
	},

	/**
	 * Returns the merging key for the available quantity. The MRP elements shall be grouped by date and id, so these two
	 * attributes are concatenated and returned as merging key. In order to avoid that the stock line is merged, we return
	 * a different merging key for the stock line
	 */
	// getMergingKeyStock : function(catID, date, quantity) {
	// if (i2d.pp.mrpcockpit.reuse.util.CommonFormatter.isStockItem(catID)) {
	// return catID;
	// } else {
	// return date + "-" + quantity;
	// }
	// },
	/**
	 * refactor: haven'tfind the way how to use scaffolding formatter directly in XML that's why the wrapper here
	 * 
	 * @author: d046669
	 */

	numberFormat : function(number, decimals) {
		return sap.ca.ui.model.format.NumberFormat.getInstance({
			decimals : decimals
		}).format(number);
	},

	numberWithNoLeadingZeros : function(number) {
		if (number && typeof (number) === "string") {
			return number.replace(/^0*((?:[1-9]\d*)|0)$/, "$1");
		} else {
			return number;
		}
	},

	formatDateShort : function(dDate) {
		if (dDate) {
			return sap.ca.ui.model.format.DateFormat.getDateInstance({
				style : "short"}).format(dDate);
		};
		return "";
	},

	formatQuantity : function(value, precision, unit) {
		if (i2d.pp.mrpcockpit.reuse.util.CommonFormatter.hasValue(value)) {
			if (unit) {
				var sFormattedValue = sap.ca.ui.model.format.QuantityFormat.FormatQuantityStandard(value, unit, precision);
				return sFormattedValue + " " + unit;
			};
			return value;
		};
		return "";
	},
	
	/**
	 * Tries to format the quantity and returns the value multiplied with -1 
	 */
	formatQuantityMultiplyMinusOne : function(value, precision, unit) {
		if (i2d.pp.mrpcockpit.reuse.util.CommonFormatter.hasValue(value)) {
						if (unit) {
				var sFormattedValue = sap.ca.ui.model.format.QuantityFormat.FormatQuantityStandard(value, unit, precision);
				var multipliedValue = sFormattedValue * (-1);
				return multipliedValue + " " + unit;
			};
			var multipliedValue = sFormattedValue * (-1);
			return multipliedValue;
		};
		return false;
	},

	formatQuantityWithSign : function(value, precision, unit) {
		if (i2d.pp.mrpcockpit.reuse.util.CommonFormatter.hasValue(value)) {
			if (unit) {
				var sFormattedValue = sap.ca.ui.model.format.QuantityFormat.FormatQuantityStandard(value, unit, precision);
				if (value > 0){
					return "+" + sFormattedValue + " " + unit;
					} else {
						return sFormattedValue + " " + unit;
				};
			};
			if (value > 0){
				return "+" + value;
				} else {
					return value;
			};
		};
		return "";
	},

	/**
	 * Returns a string of the form {minValue} {unit} / {mavValue} {unit}
	 * 
	 */
	formatMinMaxQuantity : function(minValue, maxValue, precision, unit) {
		// Format the values according to the precision and concatenate the unit
		var minValueFormatted = i2d.pp.mrpcockpit.reuse.util.CommonFormatter.formatQuantity(minValue, precision, unit);
		var maxValueFormatted = i2d.pp.mrpcockpit.reuse.util.CommonFormatter.formatQuantity(maxValue, precision, unit);

		// Finally concatenate both values separated by /
		// Note: Even when one value is initial we want to return the "/". Otherwise the user could not
		// recognize if the value is the min or the max value.
		// NEW --> if both values are empty - no / should be shown
		if (((minValue == 0) || (minValue == null)) && ((maxValue == 0) || (maxValue == null))) {
			return "";
		} else if ((((minValue == 0) || (minValue == null)) && ((maxValue > 0) || (maxValue > null))) ||
		          (((minValue > 0) || (minValue > null)) && ((maxValue == 0) || (maxValue = null)))) {
		      	return this.getModel('Common_i18n').getResourceBundle().getText("TUPEL_WITH_BLANK", 
		      		[minValueFormatted, maxValueFormatted]);
		       } else {
		        return this.getModel('Common_i18n').getResourceBundle().getText("TUPEL_WITH_SLASH",
			      	[minValueFormatted, maxValueFormatted]);
		};
	},

	formatRatioInPct : function(value, precision) {
		if ((value != null) && (precision != null)) {
			var sFormattedValue = sap.ca.ui.model.format.QuantityFormat.FormatQuantityStandard(value, precision);
			return sFormattedValue + " " + "%";
		};
		return value + " " + "%";
	},

	formatTitle : function(title, text) {
		if ((title === null) || (title === "")) {
			return text;
		} else {
			return title;
		};

	},

	formatText : function(title, text) {
		if ((title === null) || (title === "")) {
			return null;
		} else {
			return text;
		};
	},

	/**
	 * Returns true (visible) for desktop device <BR>
	 * Returns false (hidden) for mobile devices
	 */
	visibleOnlyOnDesktop : function() {
		if (sap.ui.Device.system.desktop) {
			return true;
		} else {
			return false;
		}
	},

	/**
	 * Returns e.g. "Partial delivery allowed (9 times)" if both parameters are supplied <br>
	 * Returns e.g. "Only complete delivery allowed" if only the first parameter is supplied
	 */
	getPartialDelivery : function(partialDeliveryStatus, numberOfPartialDeliveries) {
		if (partialDeliveryStatus && numberOfPartialDeliveries) {
			return this.getModel('Common_i18n').getResourceBundle().getText("PARTIAL_DELIVERY",
					[partialDeliveryStatus, numberOfPartialDeliveries]);
		} else if (partialDeliveryStatus && !numberOfPartialDeliveries) {
			return partialDeliveryStatus;
		} else {
			return "";
		}
	},

	/**
	 * Returns a combination of <code>mainString</code> and <code>additionalString</code> with
	 * <code>additionalString</code> in parenthesis <br>
	 * i.e. mainString (additionalString)
	 */
	getTextPairWithParenthesis : function(mainString, additionalString, context) {
		if (!context) {
			context = this;
		}
		if (mainString && additionalString) {
			return context.getModel('Common_i18n').getResourceBundle().getText("TUPEL_WITH_PARENTHESIS",
					[mainString, additionalString]);
		} else if (mainString && !additionalString) {
			return mainString;
		} else if (!mainString && additionalString) {
			return additionalString;
		} else {
			return "";
		}
	},

	/**
	 * Returns a combination of <code>firstString</code> and <code>secondString</code> separated by a "Dash" <br>
	 * i.e. firstString - secondString <br>
	 * If one string is not supplied, only the other w/o a separator is displayed, e.g. "secondString"
	 */
	getTextPairWithDash : function(mainString, additionalString) {
		if (mainString && additionalString) {
			return this.getModel('Common_i18n').getResourceBundle()
					.getText("TUPEL_WITH_DASH", [mainString, additionalString]);
		} else if (mainString) {
			return mainString;
		} else if (additionalString) {
			return additionalString;
		} else {
			return "";
		}
	},

	/**
	 * Returns a combination of <code>firstString</code> and <code>secondString</code> separated by a "Slash" <br>
	 * i.e. firstString / secondString <br>
	 * If one string is not supplied, only the other w/o a separator is displayed, e.g. "secondString"
	 */
	getTextPairWithSlash : function(firstString, secondString) {
		if (firstString && secondString) {
			return this.getModel('Common_i18n').getResourceBundle().getText("TUPEL_WITH_SLASH", [firstString, secondString]);
		} else if (firstString) {
			return firstString;
		} else if (secondString) {
			return secondString;
		} else {
			return "";

		}
	},

	/**
	 * Converts both given strings into Boolean values and returns these strings separated by a "Slash" <br>
	 * i.e. No / Yes <br>
	 */
	getBooleanPairWithSlash : function(firstString, secondString) {
		firstString = i2d.pp.mrpcockpit.reuse.util.CommonFormatter.formatBooleanValue(firstString, this);
		secondString = i2d.pp.mrpcockpit.reuse.util.CommonFormatter.formatBooleanValue(secondString, this);
		return this.getModel('Common_i18n').getResourceBundle().getText("TUPEL_WITH_SLASH", [firstString, secondString]);
	},

	/**
	 * Returns one out of two texts depending on the boolean value of the first parameter
	 */
	getAlternativeText : function(bSelect, sText1, sText2, sText1SoH, sText2SoH, sText1ModS, sText2ModS) {
		// ONE CODE LINE >>>
		if (i2d.pp.mrpcockpit.reuse.util.CommonConstants.ONE_CODELINE_TEXT) {
			var sI18nID, sI18nIDSoH, sI18nIDModS;
			if (bSelect) {
				sI18nID = sText1; 
				sI18nIDSoH = (sText1SoH) ? sText1SoH : sI18nID;
				sI18nIDModS =  (sText1ModS) ? sText1ModS : sI18nID;
			} else {
				sI18nID = sText2;
				sI18nIDSoH = (sText2SoH) ? sText2SoH : sI18nID;
				sI18nIDModS =  (sText2ModS) ? sText2ModS : sI18nID;
			}
			
			if (!this.getModel('ServiceVersions')) {
				return sI18nID;
			}	else if (this.getModel('ServiceVersions').getData().iServiceSchemaVersion === i2d.pp.mrpcockpit.reuse.util.CommonConstants.BACKEND_MODEL_S) {
		    return sI18nIDModS;
		  } else {
		    return sI18nIDSoH;
		  }
		}
		// ONE CODE LINE <<<
		return (bSelect) ? sText1 : sText2;
	},

	/**
	 * Returns one out of 3 texts depending on the boolean value of the first two parameters
	 */
	getTextOutOf3Alternatives : function(bSelect1, bSelect2, sText1, sText2, sText3, sText2SoH, sText2ModS) {
		if (bSelect1) {
			return sText1;
		} else if (bSelect2) {
			// ONE CODE LINE >>>
			if (i2d.pp.mrpcockpit.reuse.util.CommonConstants.ONE_CODELINE_TEXT) {
				if (!this.getModel('ServiceVersions')) {
					return sText2;
				}	else if (this.getModel('ServiceVersions').getData().iServiceSchemaVersion === i2d.pp.mrpcockpit.reuse.util.CommonConstants.BACKEND_MODEL_S) {
			    return sText2ModS;
			  } else {
			    return sText2SoH;
			  }
			}
			// ONE CODE LINE <<<
			return sText2;
		} else {
			return sText3;
		}
	},

	/**
	 * Returns the second argument if the MRP element category is purchase requisition<br>
	 * Returns the third argument if the MRP element category is not purchase requisition<br>
	 */
	getPurchaseDocumentText : function(catID, purchaseRequisitionText, purchaseOrderText) {
		if (i2d.pp.mrpcockpit.reuse.util.CommonFormatter.isRequisition(catID)) {
			return purchaseRequisitionText;
		} else {
			return purchaseOrderText;
		}
	},

	/**
	 * Returns either MRP area or plant as "MRP Area <MRP Area ID>" or "Plant <PlantID>" respectively
	 */
	getMRPAreaOrPlant : function(mrpArea, plant, context) {
		if (!context) {
			context = this;
		}
		if (plant && (!mrpArea || mrpArea === plant)) {
			// Plant has a value and either MRP area is empty or has the same value as plant
			return context.getModel('Common_i18n').getResourceBundle().getText("PLANT_WITH_ID", [plant]);
		} else if (mrpArea) {
			// MRP area is not empty and differs from plant
			// The MRP area starts with the plant ID so it is sufficient to display the MRP area
			return context.getModel('Common_i18n').getResourceBundle().getText("MRPAREA_WITH_ID", [mrpArea]);
		} else {
			// MRP area and plant are empty
			// Just in case... But there should always at least be a plant available
			return "";
		}
	},

	/**
	 * Returns either "MRP Area" or "Plant" as string
	 */
	getMRPAreaOrPlantLabel : function(mrpArea, plant, context) {
		if (!context) {
			context = this;
		}
		if (plant && (!mrpArea || mrpArea === plant)) {
			// Plant has a value and either MRP area is empty or has the same value as plant
			return context.getModel('Common_i18n').getResourceBundle().getText("PLANT");
		} else if (mrpArea) {
			// MRP area is not empty and differs from plant
			// The MRP area starts with the plant ID so it is sufficient to display the MRP area
			return context.getModel('Common_i18n').getResourceBundle().getText("MRPAREA");
		} else {
			// MRP area and plant are empty
			// Just in case... But there should always at least be a plant available
			return "";
		}
	},

	/**
	 * Returns the material number with MRP area or plant in parenthesis like this: {material number} (plant {plant ID})
	 * The logic to select MRP area or plant is implemented in getMRPAreaOrPlant()
	 */
	getMaterialWithPlant : function(material, mrpArea, plant) {
		// Create the string with either MRP area or plant
		var plantOrMRPArea = i2d.pp.mrpcockpit.reuse.util.CommonFormatter.getMRPAreaOrPlant(mrpArea, plant, this);
		// Create the string with material and MRP area/plant in parenthesis
		return i2d.pp.mrpcockpit.reuse.util.CommonFormatter.getTextPairWithParenthesis(material, plantOrMRPArea, this);
	},

	/**
	 * Returns the material number with MRP area or plant in parenthesis like this: {material number} (plant {plant ID})
	 * The logic to select MRP area or plant is implemented in getMRPAreaOrPlant()
	 */
	getMaterialWithPlantTooltip : function(mrpArea, plant) {
		// Create the label for either MRP Area or Plant
		var plantOrMRPAreaLabel = i2d.pp.mrpcockpit.reuse.util.CommonFormatter.getMRPAreaOrPlantLabel(mrpArea, plant, this);
		// Create the string with "Material Number" and label MRP Area/Plant in parenthesis
		return this.getModel('Common_i18n').getResourceBundle().getText("MATERIAL_NUMBER_PLANT_TOOLTIP",
				[plantOrMRPAreaLabel]);
	},

	formatPlantController : function(name, id) {
		if (name && id) {
			return name + " (" + id + ")";
		} else if (name) {
			return name;
		} else if (id) {
			return id;
		} else {
			return null;
		}
	},

	/**
	 * Returns true if the stock control shall be rendered as Button (false = render as Label)
	 * 
	 * @param {Number}
	 *          mrpAvailability
	 * @param {String}
	 *          mrpElementCategory
	 * @param {Boolean}
	 *          decisionSupport (true if we want to have a shortage button)
	 * @param {String}
	 *          backendVersion - the backends service schema version
	 */
	allowSolutionNavigation : function(mrpAvailability, mrpElementCategory, decisionSupport, backendVersion) {

		if (backendVersion === 1) {

			if (mrpAvailability !== i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_AVAILABILITY_NOSHORTAGE
					&& mrpElementCategory !== i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_ELEMENT_CATEGORY_STOCK) {
				return true;
			} else {
				return false;
			}

		} else {
			return decisionSupport;
		}

	},
	
	/**
	 * more neutral wrapper
	 */
	showStockNavigation : function(mrpAvailability, mrpElementCategory, decisionSupport, backendVersion) {
		return i2d.pp.mrpcockpit.reuse.util.CommonFormatter.allowSolutionNavigation(mrpAvailability, mrpElementCategory, decisionSupport, backendVersion);
	},
	
	/**
	 * returns the correct CSS class based on Stock situation
	 * 
	 * @param {Number}
	 *          mrpAvailability
	 */
	stockCSSClass: function (mrpAvailability) {
		
		switch (mrpAvailability) {
			case i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_AVAILABILITY_NOSHORTAGE : // green
				return "sapMRPStockNoShortage";
			case i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_AVAILABILITY_SAFETYSTOCK : // yellow
				return "sapMRPShortageSafetyStock";
			case i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_AVAILABILITY_BELOWZERO : // red
				return "sapMRPShortage";
			case i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_AVAILABILITY_ACCEPTED : // grey
				return "sapMRPShortageAccepted";
			default :
				return "sapMRPStockNoShortage";
		}
	},
	
	formatDateLong : function(dDate) {
		if (dDate) {
			return sap.ca.ui.model.format.DateFormat.getDateInstance({
				style : "long"}).format(dDate);
		}
	},

	textStockAvailability : function(sAvailabilityChart) {
		// return "Stock in 21 Days";

		// if (sAvailabilityChart) {
		return this.getModel('Common_i18n').getResourceBundle().getText("VisualStatusForecast", ['21']);
		// };
	},
	
	
	lapseOfStockAvailability : function(Text) {
		// return "Stock in 21 Days";

		// if (sAvailabilityChart) {
		return this.getModel('Common_i18n').getResourceBundle().getText( Text, ['21']);
		// };
	},

	deleteFirstLeadingZeros : function(number) {
		if (number) {
			// Also true for "00", "000"...
			if (number == 0) {
				return "0";
			}
		} else {
			return "";
		}
	},

	formatDelay : function(number) {
		if (number) {
			// Also true for "00", "000"...
			if (number == 0) {
					return this.getModel('Common_i18n').getResourceBundle().getText("DAYS", [0]);
			} else if ((number == 1) || (number == -1)) {
					return this.getModel('Common_i18n').getResourceBundle().getText("DAY", [number.replace(/^(0+)/g, '')]);
			} else if (number > 0) {
					return this.getModel('Common_i18n').getResourceBundle().getText("DAYS", [number.replace(/^(0+)/g, '')]);
			} else {
					return this.getModel('Common_i18n').getResourceBundle().getText("DAYS", [number]);
			}
		} else {
				return "";
		}
	},

	formatDelayInt : function(number) {
		if (number == 0) {
				return this.getModel('Common_i18n').getResourceBundle().getText("DAYS", [0]);
		} else if ((number == 1) || (number == -1)) {
				return this.getModel('Common_i18n').getResourceBundle().getText("DAY", [number]);
		} else {
				return this.getModel('Common_i18n').getResourceBundle().getText("DAYS", [number]);
		}
	},

	/**
	 * Returns time in a short format e.g 10:30PM
	 */
	formatTimeShort : function(dDate) {
		if (dDate) {
			return sap.ca.ui.model.format.DateFormat.getTimeInstance({
				style : "short"	}).format(dDate);
		}
		return "";
	},

	/**
	 * Returns Button Text for EditButton of QuickView
	 */
	getQVEditButtonText : function(catID, CRstatus) {
		switch(catID){
			case i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_ELEMENT_CATEGORY_PURRQS:
				return this.getModel('Common_i18n').getResourceBundle().getText("QV_PR_EditButton");
			case i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_ELEMENT_CATEGORY_POITEM:
				if(i2d.pp.mrpcockpit.reuse.util.CommonFormatter.getChangeRequestVisibility(CRstatus)){
					return this.getModel('Common_i18n').getResourceBundle().getText("QV_CR_EditButton");
				}else{
					return this.getModel('Common_i18n').getResourceBundle().getText("QV_PO_EditButton");
				}
				break;
			default:
				return "";
		}
	},
	
	joinedByHyphen : function(value1,value2 ) {
			return value1 + "-" + value2;
	},
	
	// returns a true or false based on a given value
	// value 0 should be handled different than a value greater 0
	isValueGreaterEqualZero : function(value) {
		var lnumber = Math.round(value);
		if (lnumber >= 0) {
			return true;
		} else {
			return false;
		}
	},
	
	formatQuantityAlways : function(value, precision, unit) {
	  if (unit) {
			var sFormattedValue = sap.ca.ui.model.format.QuantityFormat.FormatQuantityStandard(value, unit, precision);
			return sFormattedValue + " " + unit;
		};
		return value;
	},
	
	/**
	 * Returns a combination of the supplied value and the suffix 'day(s)' If the supplied value is empty, the returned
	 * combination is also filled
	 */
	formatDayValueAlways : function(dayValue) {

		if (dayValue && (dayValue == 1)) {
			return this.getModel('Common_i18n').getResourceBundle().getText("ONE_DAY");
		} else if (dayValue && (dayValue > 1)) {
			return this.getModel('Common_i18n').getResourceBundle().getText("DAYS", [dayValue]);
		} else {
			return this.getModel('Common_i18n').getResourceBundle().getText("DAYS", [dayValue]);
		}
	},
	
	/**
	 * Returns a Min/Max or only Min or Max depending on filled value
	 */
	formatMinMaxQuantityText : function(minValue, maxValue) {

		if ((minValue > 0) && (maxValue > 0)) {
			return this.getModel('Common_i18n').getResourceBundle().getText("MIN_MAX_LOT_SIZE");
		} else if ((minValue > 0) && (maxValue < 1)) {
			return this.getModel('Common_i18n').getResourceBundle().getText("xfldMaterialMinLotSizeQty");
		} else if ((minValue < 1) && (maxValue > 0)) {
			return this.getModel('Common_i18n').getResourceBundle().getText("xfldMaterialMaxLotSizeQty");			
		} else {
			return this.getModel('Common_i18n').getResourceBundle().getText("MIN_MAX_LOT_SIZE");
		}
	},
	
	/**
	 * Returns false (hidden) for ModelS
	 */
	releaseVisibleCheck : function(value,that) {
		if(!that){
		  that = this;
		}
		var iVersion = that.getModel('ServiceVersions').getData().iServiceSchemaVersion;
		if(iVersion === i2d.pp.mrpcockpit.reuse.util.CommonConstants.BACKEND_MODEL_S) {
			return false;  		 /** ModelS invisible */
		} else {
			return true;		/** SoH visible */
		}	
	},	

	
	/**
	 * Returns true (show) for ModelS
	 */
	visibleForModelS : function(value,that) {
		if(!that){
		  that = this;
		}
		var iVersion = that.getModel('ServiceVersions').getData().iServiceSchemaVersion;
		if(iVersion === i2d.pp.mrpcockpit.reuse.util.CommonConstants.BACKEND_MODEL_S) {
			return true;  		 /** ModelS visible */
		} else {
			return false;		   /** SoH invisible */
		}	
	},	
	
	/**
	 * Returns hidden for ModelS and mobile devices
	 */	
	visibleCheck : function() {
		
		if( (i2d.pp.mrpcockpit.reuse.util.CommonFormatter.visibleOnlyOnDesktop() === false) || (i2d.pp.mrpcockpit.reuse.util.CommonFormatter.releaseVisibleCheck(null,this) === false) ) {
			return false;  				/**  ModelS or Mobile device */
		} else {
			return true;				/** SoH and Desktop device  */
		}		
	},	
	
	/**
	 * Check if PO Navigation should be visible on PO Quickview
	 * SOH on Mobile -> Invisible and visible for the rest
	 */	
	VisibleCheckPONavigation : function() {
		
		if( (i2d.pp.mrpcockpit.reuse.util.CommonFormatter.visibleOnlyOnDesktop() === false) && (i2d.pp.mrpcockpit.reuse.util.CommonFormatter.releaseVisibleCheck(null,this) === true) ) {
			return false;  				/**  SoH and Mobile device */
		} else {
			return true;				/** Visible for rest */
		}		
	},		
	
	/**
	 * Returns a Version dependent text sSuite/ModelS/sLog vs. SoH Texts  / USES THE SWITCH ONE_CODELINE_TEXT
	 */
	formatVersionTextSoHVsSLog : function(textID, textIDSoH, textIDModelS) {
		// ONE CODELINE
		if (i2d.pp.mrpcockpit.reuse.util.CommonConstants.ONE_CODELINE_TEXT) {
			if (!this.getModel('ServiceVersions')) {
				return textIDSoH;
			}	else if (this.getModel('ServiceVersions').getData().iServiceSchemaVersion === i2d.pp.mrpcockpit.reuse.util.CommonConstants.BACKEND_MODEL_S) {
		    return textIDModelS;
		  } else {
		    return textIDSoH;
		  }
		} else {
	    return textID;
		}
	},

	/**
	 * Returns a text which depends on sSuite/ModelS/sLog vs. SoH  / DOES NOT use the switch ONE_CODELINE_TEXT
	 */
	formatTextSoHVsSLog : function(textSoH, textModelS) {
			if (!this.getModel('ServiceVersions')) {
				return textSoH;
			}	else if (this.getModel('ServiceVersions').getData().iServiceSchemaVersion === i2d.pp.mrpcockpit.reuse.util.CommonConstants.BACKEND_MODEL_S) {
		    return textModelS;
		  } else { // default is the SoH Text, in case the ServiceVersion can not be calculated (missing model)
		    return textSoH;
		  }
	},

	/**
	 * Truncates the input text to 5 characters and concatenates 35 characters to simulate long material numbers.
	 */
	formatLAMA : function(sMatNr) {
		if (sMatNr !== null){
			var sTextPattern = "OxOxOxOxOxOxOxOxO-";
			return sMatNr + "-" + sTextPattern.slice(sMatNr.length - 1) + "TestLongMaterialNumber";
		}
	},
	
	formatDateDaysAgo : function(dDate){
		if (dDate) {
			return sap.ca.ui.model.format.DateFormat.getDateInstance({
				style : "daysAgo"}).format(dDate);
		};
		return "";
	},

	formatStatusState : function(status, vendorResponse){
		var oValueState = "None";
		switch (status) {
			case i2d.pp.mrpcockpit.reuse.util.CommonConstants.REQUEST_STATUS_REQUESTED:	//Requested 
			  oValueState = "Error"; 
			  break;
			case i2d.pp.mrpcockpit.reuse.util.CommonConstants.REQUEST_STATUS_APPLIED: //Applied			
				oValueState = "Success"; 
				break;			
			case i2d.pp.mrpcockpit.reuse.util.CommonConstants.REQUEST_STATUS_DISCARDED:	//Discarded 
				oValueState = "Error"; 
				break;
			case i2d.pp.mrpcockpit.reuse.util.CommonConstants.REQUEST_STATUS_ANSWERED:	//Answered 
				if (vendorResponse === i2d.pp.mrpcockpit.reuse.util.CommonConstants.VENDOR_RESPONSE_ACCEPTED) {  //"Accepted" 
				  oValueState = "Success"; 							
			   }	else if (vendorResponse === i2d.pp.mrpcockpit.reuse.util.CommonConstants.VENDOR_RESPONSE_REJECTED) { //"Rejected" 
				  oValueState = "Error"; 			
			   }	else if (vendorResponse === i2d.pp.mrpcockpit.reuse.util.CommonConstants.VENDOR_RESPONSE_PROPOSED) { //"New Proposal" 
				  oValueState = "Warning"; 				
			   }		
				break;	
			case i2d.pp.mrpcockpit.reuse.util.CommonConstants.REQUEST_STATUS_COLLECTED:	//New 
				oValueState = "None"; 
				break;
			case i2d.pp.mrpcockpit.reuse.util.CommonConstants.REQUEST_STATUS_CLOSED:	//Closed 
				oValueState = "None"; 
				break;
			default :
				oValueState = "None"; 		
		}	
		
		return oValueState;
		
	},
	
	/**
	 * This method decides whether to show the edit button or not depending on flag MRPElementIsEditable
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.util.CommonFormatter
	 */
	getIsEditButtonVisible : function(MRPElementIsEditable) {
		if (MRPElementIsEditable === 'X') {
			return true;
		} else {
			return false;
		}
	},
	
	noMatchedValue : function(value,notAllowedValue){
		if(value && notAllowedValue){
			if(value === notAllowedValue){
				return false;
			}
			return true;
		}
	},
	
	catNotAllowedAndHasValue : function(value,cat,notAllowedCat){
		if(cat && notAllowedCat){
			if(i2d.pp.mrpcockpit.reuse.util.CommonFormatter.noMatchedValue(cat,notAllowedCat)){
				if(i2d.pp.mrpcockpit.reuse.util.CommonFormatter.hasValue(value)){
					return true;
				}
				return false;
			}
			return false;
		}	
}

};



}; // end of i2d/pp/mrpcockpit/reuse/util/CommonFormatter.js
if ( !jQuery.sap.isDeclared('i2d.pp.mrpcockpit.reuse.util.Helper') ) {
jQuery.sap.declare("i2d.pp.mrpcockpit.reuse.util.Helper");
jQuery.sap.require('sap.ca.ui.utils.Lessifier'); // unlisted dependency retained


i2d.pp.mrpcockpit.reuse.util.Helper = {

	/**
	 * Checks if batch mode is still active
	 * 
	 * @memberOf: Helper
	 */
	isBatchModeActive : function() {
		// var noBatch = jQuery.sap.getUriParameters().get("nobatch");
		var noBatch;
		if (noBatch == "X") {
			return false;
		}
		return true;
	},

	factsheetNavigate : function(semanticObject, action, params) {
		// init CrossApplicationNavigation object
		var fgetService = sap.ushell && sap.ushell.Container && sap.ushell.Container.getService;
		this.oCrossAppNavigator = fgetService && fgetService("CrossApplicationNavigation");
		
		if (this.oCrossAppNavigator) {
			this.oCrossAppNavigator.toExternal({ 
				target : { 
					semanticObject : semanticObject, action : action
					}, 
					params : params });
				}
	},

	/**
	 * Creates and returns a multi-value OR filter
	 * 
	 * @returns {sap.ui.model.Filter}
	 */
	getORMultiFilter : function(filterKey, aValues) {

		var aORFilter = new Array();
		for ( var i = 0; i < aValues.length; i++) {
			aORFilter.push(new sap.ui.model.Filter(filterKey, sap.ui.model.FilterOperator.EQ, aValues[i]));
		}
		var oORFilter = new sap.ui.model.Filter(aORFilter, false); // OR
		return oORFilter;

	},

	/**
	 * This method extracts an error message out of a given stream. The method can handle XML and JSON but both have to
	 * follow a special format.
	 * 
	 * @param oBundle
	 *          object representing the i18n resource bundle to read general error texts
	 * @param sXml
	 *          string containing an XML (document) that contains an XML node 'message' containing the error message
	 *          defined at the backend.
	 * @memberOf i2d.pp.mrpcockpit.reuse.util.Helper
	 */
	extractErrorMsgFromStream : function(oBundle, sXml) {
		var sText = "";
		// First we assume that the string/"stream" contains an XML - so we try to extract the xml node 'message'
		try {
			var oParser = new DOMParser();
			var xmlDoc = oParser.parseFromString(sXml, "text/xml");
			var aMsg = [];
			if (xmlDoc) {
				aMsg = xmlDoc.getElementsByTagName("message");
			}
			// Check if the required node has been found in the xml
			if (aMsg.length > 0) {
				// Success: It is an XML and the message can be extracted out of the node
				// Ensure that the node has the required format
				if (aMsg[0] && aMsg[0].childNodes[0] && aMsg[0].childNodes[0].nodeValue) {
					sText = aMsg[0].childNodes[0].nodeValue;
				} else {
					sText = oBundle.getText("SOLUTION_DIALOG_ERROR_UNKNOWN");
				}
			} else {
				// Failure: It is probably an JSON
				var oModelJSON = new sap.ui.model.json.JSONModel();
				oModelJSON.setJSON(sXml);
				// Ensure that the JSON has the required format
				if (oModelJSON.oData && oModelJSON.oData.error && oModelJSON.oData.error.message
						&& oModelJSON.oData.error.message.value) {
					sText = oModelJSON.oData.error.message.value;
				} else {
					// The stream contains data whose format is unknown for us. So we add an appropriate (default) error message.
					sText = oBundle.getText("SOLUTION_DIALOG_ERROR_UNKNOWN");
				}
			}
		} catch (e) {
			// If an exception occurred (could be with IE9), we try to extract the message out of JSON.
			// If that fails, we use the whole response within the details.
			var oModelJSON = new sap.ui.model.json.JSONModel();
			oModelJSON.setJSON(sXml);
			// Ensure that the JSON has the required format
			if (oModelJSON.oData && oModelJSON.oData.error && oModelJSON.oData.error.message
					&& oModelJSON.oData.error.message.value) {
				sText += oModelJSON.oData.error.message.value;
			} else {
				sText = sXml;
			}
		}
		return sText;
	},

	/**
	 * This method extracts an error message out of a given array of HTTP response objects which contain a XML or JSON
	 * which has the error message within the section <message>
	 * 
	 * @param oBundle
	 *          object representing the i18n resource bundle to read general error texts
	 * @param aErrorResponses
	 *          array of HTTP response objects containing error messages in XML or JSON format
	 * @memberOf i2d.pp.mrpcockpit.reuse.util.Helper
	 */
	extractErrorMsgFromBatchResponse : function(oBundle, aErrorResponses) {
		var sErrorText = "";
		var sText = "";
		// Extract the error message out of each item in the array and concatenate it with ';'
		for ( var i = 0; i < aErrorResponses.length; i++) {
			if (i > 0) {
				sErrorText += "; ";
			}
			// Ensure that the response object has the required structure
			if (aErrorResponses[i].response && aErrorResponses[i].response.body) {
				sText = i2d.pp.mrpcockpit.reuse.util.Helper
						.extractErrorMsgFromStream(oBundle, aErrorResponses[i].response.body);
			} else {
				sText = oBundle.getText("SOLUTION_DIALOG_ERROR_UNKNOWN");
			}
			sErrorText += sText;
		}
		return sErrorText;
	},

	/**
	 * Resizing of the UI controls for the S3 and S4 view
	 * <p>
	 * Prerequisites for calculation is to set on the page the following ID's:
	 * <ul>
	 * <li> - mainPage , for the page (S3, S4)
	 * <li> - panel , for the panel where the chart is inside
	 * <li> - panelToolbar , for the toolbar in the mentioned panel
	 * <li> - supDemItemsTab, in case a icon tab bar is used, the resizing has to be done as well in case the user clicks
	 * <li> - oScrollContainer, for the page S4 on the tab where the chart is in. We check on the key="supDemItemsTab" of
	 * the icon tab bar
	 * </ul>
	 * You can use the offset in px to reduce the height of the chart
	 */
	resizeUiControls : function(context, sSourceView, offsetChart) {
		// The chart is embedded within a panel
		var $PanelContent = jQuery("#" + context.getView().getId() + "--" + 'panel');

		// get the size of the solution cards (fixed size on the screen)
		var iSolCardHeight = $('.sapMRPSolutions').height();
		if (iSolCardHeight === null || iSolCardHeight === undefined) {
			// they don't exist for S3
			iSolCardHeight = 0;
		}

		// calculate the space that is available for the Chart
		if ($PanelContent && $PanelContent.length) {
		
			// ------------------------------------------
			// Set the size of the chart
			// ------------------------------------------		
			var oChart = context.getView().byId("chart");
			var parent;
			var width = 0;
			var offsetTop = 0;
			var pageHeight = 0;
			var chartHeight = 0;
			var parentBottom = "";
			var offsetBottom = 0;

			offsetTop = $PanelContent[0].offsetTop;
			width = $PanelContent.width();
			parent = $PanelContent.parent();

			// consider the padding of the parent node (in principle the bottom-padding,
			// bottom-margin and bottom-border of all nodes to the page node should be
			// considered, but right now only the parent node has a padding)
			parentBottom = parent.css("padding-bottom");
			offsetBottom = (parentBottom) ? parseInt(parentBottom) : 0;

			// collect all offsets at the top
			while ((parent.length != 0) && !(parent.attr('id') == context.getView().getId() + "--" + "mainPage-cont")) {
				offsetTop += parent[0].offsetTop;
				parent = parent.parent();
			}

			// determine the available height for the page
			pageHeight = (parent) ? parent.height() : 0;
			// On mobile devices the page has a border at the bottom. We also use this
			// space for the Nav Container and the chart (otherwise we would loose that
			// space)
			parentBottom = (parent) ? parent.css("border-bottom") : "";
			pageHeight += (parentBottom) ? parseInt(parentBottom) : 0;

			// calculate the available space for the chart
			// It depends on the screen (S3||S4) if the height of the solution cards has to be considered
			if (sSourceView === i2d.pp.mrpcockpit.reuse.util.CommonConstants.VIEW_S3) {
				chartHeight = pageHeight - offsetTop - offsetBottom;
			} else if (sSourceView === i2d.pp.mrpcockpit.reuse.util.CommonConstants.VIEW_S4) {
				chartHeight = pageHeight - offsetTop - offsetBottom - iSolCardHeight;
			} else {
				// fallback
				chartHeight = pageHeight - offsetTop - offsetBottom;
			}

			// if space is not sufficient, stop the calculation here
			if ((width < 64) && (chartHeight < 10)) {
				return;
			}
			if (width < 64) {
				oChart.setHeight((chartHeight - 2) + "px");
				return;
			}
			if (chartHeight < 10) {
				oChart.setWidth((width - 64) + "px", true);
				return;
			}

			// chart height must be reduced by the chartOffset, if provided
			if (offsetChart > 0) {
				chartHeight = chartHeight - offsetChart;
			}

			// available space for chart must be reduced by the height of the panel toolbar
			var $PanelToolbar = jQuery("#" + context.getView().getId() + "--" + 'panelToolbar');
			chartHeight = chartHeight - $PanelToolbar[0].offsetHeight;

			jQuery.sap.log.debug("set chart size of S3 chart: " + (width - 64) + "x" + (chartHeight - 10));
			// Set the width but don't let the chart render itself because we have to set the height as well
			oChart.setWidth((width - 64) + "px", true);
			// Set the height and let the chart render itself
			oChart.setHeight((chartHeight - 2) + "px");
			
			// ------------------------------------------
			// Set the size of the overall Scroll container of S4
			// ------------------------------------------			
			// set the size of the outer scroll container of the page if available
			var iScrollContainerHeight = pageHeight - iSolCardHeight;
			var sScrollContainerHeight = iScrollContainerHeight + "px";
			var oScrollContainer = context.getView().byId("oScrollContainer");
			if (oScrollContainer) {
				oScrollContainer.setHeight(sScrollContainerHeight);
			}

		}
	},

	/**
	 * Convert the status of the Master List item in case the user uses a solution card.
	 */
	convertStatusToMasterListStatus : function(data) {

		var constants = i2d.pp.mrpcockpit.reuse.util.CommonConstants;

		// as fallback the shortage is shown
		var statusCode = constants.MASTER_LIST_STATUS_SHORTAGE;

		if (data && data.model && data.model.cardModel && data.model.cardModel.getData()) {

			// we first test if change requests are involved
			switch (data.model.cardModel.getData().SolutionRequestStatus) {

				case constants.REQUEST_STATUS_REQUESTED :
					// follow up request was created => this is processed for us
					statusCode = constants.MASTER_LIST_STATUS_PROCESSED;
					break;
				case constants.REQUEST_STATUS_APPLIED :
					// solution was executed directly => this is processed for us
					statusCode = constants.MASTER_LIST_STATUS_PROCESSED;
					break;
				case constants.REQUEST_STATUS_DISCARDED :
					// the solution was discarded. although this technically this creates a change request
					// the shortage is not processed for us. therefore we still show "shortage"
					statusCode = constants.MASTER_LIST_STATUS_SHORTAGE;
					break;
				case constants.REQUEST_STATUS_ANSWERED :
					// follow up request was created, already answered => this is processed for us
					// this should not occur in reality
					statusCode = constants.MASTER_LIST_STATUS_PROCESSED;
					break;
				case constants.REQUEST_STATUS_COLLECTED :
					// a collected change request was sent
					// => this is processed for us
					statusCode = constants.MASTER_LIST_STATUS_PROCESSED;
					break;
				default :
					// if no solution request status is set,
					// no change requests are involved
					// this means the user has done an action that processed this entry
					statusCode = constants.MASTER_LIST_STATUS_PROCESSED;
					break;
			}
		}
		return statusCode;

	},

	/**
	 * Lessify CSS for x30 Apps
	 */
	lessifyCSSx30 : function() {

		// add less processor for custom CSS
		if (sap.ca.ui.utils.Lessifier) {

			// This code is a temporary solution for wave2 to get things clean, it will be removed in wave3
			// the if condition is here to avoid failure at that point

			// general x30 styles
			sap.ca.ui.utils.Lessifier.lessifyCSS("i2d.pp.mrpcockpit.reuse", "styles/sapMRPx30.css", true);

			// Solution Cards
			sap.ca.ui.utils.Lessifier.lessifyCSS("i2d.pp.mrpcockpit.reuse", "controls/SolutionCards.css", true);

			// Chart
			sap.ca.ui.utils.Lessifier.lessifyCSS("i2d.pp.mrpcockpit.reuse", "controls/Chart.css", true);

			// Stock Button
			sap.ca.ui.utils.Lessifier.lessifyCSS("i2d.pp.mrpcockpit.reuse", "controls/Stock.css", true);

			// Scrollbar (Chrome)
			sap.ca.ui.utils.Lessifier.lessifyCSS("i2d.pp.mrpcockpit.reuse", "styles/sapMRPScrollbar.css", true);
		}

	},

	/**
	 * Lessify CSS for x10 Apps
	 */
	lessifyCSSx10 : function() {

		// add less processor for custom CSS
		if (sap.ca.ui.utils.Lessifier) {

			// This code is a temporary solution for wave2 to get things clean, it will be removed in wave3
			// the if condition is here to avoid failure at that point
			sap.ca.ui.utils.Lessifier.lessifyCSS("i2d.pp.mrpcockpit.reuse", "styles/sapMRPx10.css", true);

			// refactor: move in app neutral reuse part
			// Scrollbar (Chrome)
			sap.ca.ui.utils.Lessifier.lessifyCSS("i2d.pp.mrpcockpit.reuse", "styles/sapMRPScrollbar.css", true);

		}

	},

	/**
	 * Returns Entity Text -> Different Texts for Suite on HANA and ModelS
	 */
	getSpecialTextForField : function(pField, oController, aDiffFieldText) {
		// returns a SoH or ModelS specific field text if maintained in the array aDiffFieldText
		//Paramerter: 
		//oController: from App to check SchemaVersion
		//pField: UI-FieldID in i18n.properties
		//aDiffFieldText: Array with special text-IDs for ModelS and SoH (if not given oController.aDiffFieldText is used)
    // Schema-Pattern for aDiffFieldText: [[<fieldname>, [<i18nIDSoH>, <i18nIDModS>]], ...]
		// --> should be declared in INIT of App-Controller (see material.shortge S1.controller.js for example)
		// search in aDiffFieldText[n][0] for import parameter pField, if found, check what text for SoH or ModS exist
		// return aDiffFieldText[n][1][0] for SoH Text!
		// return aDiffFieldText[n][1][1] for ModelS Text!
		var seekIndexInArray = function(pArray, pValue) {
			// little helper function to check if a given value pValue is in a given array pArray like a aDefaultSorting
			var i, index = -1;
			for (i = 0; i < pArray.length; i++) {
				if (pArray[i][0] === pValue) {
					index = i;
					break;
				}
			}
			return index;
		};
		
		//BASIC Check : Is One Codeline NOT active?
		if (!i2d.pp.mrpcockpit.reuse.util.CommonConstants.ONE_CODELINE_TEXT) {
			return pField;
		}
		// check if aDiffFieldText array is given as a parameter / exists in oController
		if (!aDiffFieldText) {
			if (!oController) {
				// return pField
				return pField;
			} else if (oController.aDiffFieldText){
				aDiffFieldText = oController.aDiffFieldText;
			}
		}

		if (aDiffFieldText) {
			var myIndex = seekIndexInArray(aDiffFieldText, pField);
			if (myIndex >= 0) {
				if (aDiffFieldText[myIndex][1]) {
					if (oController.getServiceSchemaVersion() === i2d.pp.mrpcockpit.reuse.util.CommonConstants.BACKEND_MODEL_S) {
						return aDiffFieldText[myIndex][1][1];
					} else {
						return aDiffFieldText[myIndex][1][0];
					}
				} else { // no entry for aDiffFieldText["pField"][2] maintained -> no differences in SoH and ModelS Text ->
					// return pField
					return pField;
				}
			} else { // no entry for aDiffFieldText["pField"] maintained -> no differences in SoH and ModelS Text -> return
				// pField
				return pField;
			}
		} else { // no array to look in -> no differences in SoH and ModelS Texts at all in the App -> return pField
			return pField;
		}
	},

	/**
	 * Returns Entity Text -> Different Texts for Suite on HANA and ModelS
	 */
	getSpecialTextForFieldInt : function(options) {
		// returns a SoH or ModelS specific i18n ID or field text
		// Possible options: 
		//sI18nID : the Default field name (i18n.properties) w/o SoH or ModS 
		//oController : controller context from the App (with a textmodel, aDiffFieldText, getServiceSchemaVersion, ... in it  
		//aDiffFieldText : array with special text IDs for ModelS and SoH (if not want to use the one from controller)
    // Schema-Pattern for aDiffFieldText: [[<fieldname>, [<i18nIDSoH>, <i18nIDModS>]], ...]
			// --> should be declared in INIT of App-Controller (see material.shortge S1.controller.js for example)
			// search in aDiffFieldText[n][0] for import parameter pField, if found, check what text for SoH or ModS exist
			// return aDiffFieldText[n][1][0] for SoH Text!
			// return aDiffFieldText[n][1][1] for ModelS Text!
		//iServiceVersion : ServiceVersion (e.g. 99 for ModelS) if not want to use the getServiceSchemaVersion from the controller
		//sSoHI18nID : given i18n-ID for the SoH (Suite on Hana) Text
		//sModSI18nID : given i18n-ID for the ModS (ModelS) Text
		
		var defaultOptions = {
			bGetText				: false, //get the ID not the Text	
			sI18nID 				: null, 
			oController 		: null, 
			aDiffFieldText 	: null, 
			iServiceVersion : null, 
			sSoHI18nID			: null,  
			sModSI18nID			: null
		};
		options = $.extend({}, defaultOptions, options);

		var myIndex = null;
		var seekIndexInArray = function(pArray, pValue) {
			// little helper function to check if a given value pValue is in a given array pArray like a aDefaultSorting
			var i, index = -1;
			for (i = 0; i < pArray.length; i++) {
				if (pArray[i][0] === pValue) {
					index = i;
					break;
				}
			}
			return index;
		};
		var getResult = function(iSerVer, sDefID, sSoHID, sModSID){
			var sID = sDefID; //Init the default with default i18n ID
			if (iSerVer) {
				switch (iSerVer) {
					case i2d.pp.mrpcockpit.reuse.util.CommonConstants.BACKEND_MODEL_S : // Model S
						if (sModSID) { sID = sModSID;	}
						break;
					default : // For the current version.
						if (sSoHID) { sID = sSoHID; }
					  break;
				}		
			}
			if (options.bGetText && options.oController.oResourceBundle.getText){
					return options.oController.oResourceBundle.getText(sID);
			}
			// default: return the i18n ID
			return sID;
		};

		//BASIC Check : Is One Codeline NOT active?
		if (!i2d.pp.mrpcockpit.reuse.util.CommonConstants.ONE_CODELINE_TEXT) {
			return getResult(options.iServiceVersion, options.sI18nID, options.sI18nID, options.sI18nID);
		}

		// check if minimum is given or short call
		if (!options.sI18nID) {
			if (!(options.iServiceVersion && options.sSoHI18nID && options.sModSI18nID)) {
				if (options.sSoHI18nID) {	
					return options.sSoHI18nID; 
				} 
				else if (options.sModSI18nID) { 
					return options.sModSI18nID; 
				} else { 
					return null; 
				}
			}
		}
		
		// 1st : check if options.iServiceVersion, sSohText, sModSText is given -> if yes, use it preferred
		if (options.iServiceVersion && options.sSoHI18nID && options.sModSI18nID) {
			// Choose ID or Text and return
			return getResult(options.iServiceVersion, options.sI18nID, options.sSoHI18nID, options.sModSI18nID);
		}
		
		// 2nd : check if options.oController is given -> if yes, use it preferred
		if (options.oController){
			//check if options.iServiceVersion is given -> if yes use it preferred otherwise use the one in options.oController
			if (!options.iServiceVersion){
				if (options.oController.getServiceSchemaVersion) {
					options.iServiceVersion = options.oController.getServiceSchemaVersion();
				} else {
					options.iServiceVersion = 2;
				}
			}
			//check if options.aDiffFieldText is given -> if yes use it preferred otherwise use the one in options.oController
			if (!options.aDiffFieldText) {
				if (options.oController.aDiffFieldText){
					options.aDiffFieldText = options.oController.aDiffFieldText;
				} else { // no aDiffFieldText available -> choose the sSoHI18nID, sModSI18nID if given
					return getResult(options.iServiceVersion, options.sI18nID, options.sSoHI18nID, options.sModSI18nID);				
				}
			} 
			
			//get the right id from options.aDiffFieldText
			if (options.aDiffFieldText) {
				myIndex = seekIndexInArray(options.aDiffFieldText, options.sI18nID);
				if (myIndex >= 0) {
					if (options.aDiffFieldText[myIndex][1]) {
						options.sSoHI18nID = options.aDiffFieldText[myIndex][1][0];
						options.sModSI18nID = options.aDiffFieldText[myIndex][1][1];
						return getResult(options.iServiceVersion, options.sI18nID, options.sSoHI18nID, options.sModSI18nID);
					}
				}
			}
		} else {
			// no options.oController -> last chance with options.aDiffFieldText & options.iServiceVersion
			if (options.aDiffFieldText && options.iServiceVersion) {
				myIndex = seekIndexInArray(options.aDiffFieldText, options.sI18nID);
				if (myIndex >= 0) {
					if (options.aDiffFieldText[myIndex][1]) {
						return getResult(options.iServiceVersion, options.sI18nID, options.aDiffFieldText[myIndex][1][0], options.aDiffFieldText[myIndex][1][1]);
					}
				}
			}
		}
		return options.sI18nID;
	}
	
	
};
}; // end of i2d/pp/mrpcockpit/reuse/util/Helper.js
if ( !jQuery.sap.isDeclared('i2d.pp.mrpcockpit.reuse.util.InteroperabilityHelper') ) {
jQuery.sap.declare("i2d.pp.mrpcockpit.reuse.util.InteroperabilityHelper");

i2d.pp.mrpcockpit.reuse.util.InteroperabilityHelper = {

	/**
	 * Determine and store the OData model's service version and service schema version (backend)
	 */
	initialize : function(oModel, sEntityName, oApplicationFacade) {
		var theModel = oModel;

		if (oModel === undefined || oModel === null) {
			theModel = sap.ca.scfld.md.app.Application.getImpl().getODataModel();
		}

		var iServiceSchemaVersion = this._getServiceSchemaVersion(theModel, sEntityName);
		var iServiceVersion = this._getServiceVersion(theModel, sEntityName);

		// store versions in a global hashmap for the application
		var oVersions = {
			iServiceSchemaVersion : iServiceSchemaVersion,
			iServiceVersion : iServiceVersion
		};
		oApplicationFacade.setApplicationModel("ServiceVersions", new sap.ui.model.json.JSONModel(oVersions));
	},

	/**
	 * Returns the Interoperability model <br>
	 * This model contains all information regarding interoperability
	 * 
	 * @param {object}
	 *          oModel - the global data model
	 * @param {String}
	 *          sEntityName - the master entity name
	 * @returns {sap.ui.model.json.JSONModel}
	 */
	getInteroperabilityModel : function(oModel, sEntityName) {

		return new sap.ui.model.json.JSONModel({
			backendVersion : i2d.pp.mrpcockpit.reuse.util.InteroperabilityHelper
					._getServiceSchemaVersion(oModel, sEntityName),
			frontendVersion : i2d.pp.mrpcockpit.reuse.util.InteroperabilityHelper.getFrontendVersion()
		});

	},

	/**
	 * Returns the current Frontend Version <br>
	 * It has to be updated to the current Frontend Version! <br>
	 * Return space for Version 1 = SP03/SP04 Backend
	 */
	getFilterFrontendVersion : function() {
		// Version 3 corresponds to SP07
		return new sap.ui.model.Filter("Version", sap.ui.model.FilterOperator.EQ, "3"); // Version 3
	},

	getFrontendVersion : function() {
		// Version 3 corresponds to SP07
		return "3"; // Version 3
	},

	/**
	 * Adds a filter representing the "current Frontend Version" to the list of oData filters
	 * 
	 * @param {array}
	 *          [aFilters] filters array used for oData call
	 * @param {object}
	 *          [oModel] The OData model object.
	 * @param {string}
	 *          [sEntityName] The name of the entity that is annotated (optional)
	 */
	addFilterFrontendVersion : function(aFilters, oModel, sEntityName) {
		// since wave 5 the backend supports a new filter named 'Version'. This filter shall be set to the current ui
		// version
		if (i2d.pp.mrpcockpit.reuse.util.InteroperabilityHelper._getServiceSchemaVersion(oModel, sEntityName) > 1) {
			aFilters.push(i2d.pp.mrpcockpit.reuse.util.InteroperabilityHelper.getFilterFrontendVersion());
		}
	},

	/**
	 * Returns the current service version of the OData model/service.
	 */
	getServiceVersion : function(oApplicationFacade) {
		if (oApplicationFacade.getApplicationModel("ServiceVersions")) {
			return oApplicationFacade.getApplicationModel("ServiceVersions").getData().iServiceVersion;
		} else {
			return undefined;
		}
	},

	/**
	 * Returns the current service schema version of the OData model/service.
	 */
	getServiceSchemaVersion : function(oApplicationFacade) {
		if (oApplicationFacade.getApplicationModel("ServiceVersions")) {
			return oApplicationFacade.getApplicationModel("ServiceVersions").getData().iServiceSchemaVersion;
		} else {
			return undefined;
		}
	},

	/**
	 * Determine an entity's annotation of the OData model/service.
	 * 
	 * @param {object}
	 *          [oModel] The OData model object.
	 * @param {string}
	 *          sAnnotationName The name/key of the annotation
	 * @param {string}
	 *          [sEntityName] The name of the entity that is annotated (optional)
	 * @return The annotation value as string.
	 * @private
	 */
	_getEntityAnnotation : function(oModel, sAnnotationName, sEntityName) {
		// retrieve the metadata of the passed OData model
		var oModelMetadata = oModel.getServiceMetadata();
		// check for proper metadata structure
		if ((oModelMetadata != null) && (oModelMetadata.dataServices != null)
				&& (oModelMetadata.dataServices.schema != null) && (oModelMetadata.dataServices.schema.length > 0)
				&& (oModelMetadata.dataServices.schema[0].entityType != null)) {
			// determine the annotation by name using the first annotated entity
			var aEntityTypes = oModelMetadata.dataServices.schema[0].entityType;
			// loop the entities
			for ( var i = 0; i < aEntityTypes.length; i++) {
				if (aEntityTypes[i].extensions != null) {
					// loop the annotations of the the entity
					for ( var j = 0; j < aEntityTypes[i].extensions.length; j++) {
						if (((sEntityName === undefined) || (sEntityName === aEntityTypes[i].name))
								&& (aEntityTypes[i].extensions[j].name === sAnnotationName)) {
							return aEntityTypes[i].extensions[j].value;
						}
					}
				}
			}
		}
		return null;
	},

	getEntityPropertyNames : function(oModel, sEntityName) {
		var oModelMetadata = oModel.getServiceMetadata();
		// check for proper metadata structure
		if ((oModelMetadata != null) && (oModelMetadata.dataServices != null)
				&& (oModelMetadata.dataServices.schema != null) && (oModelMetadata.dataServices.schema.length > 0)
				&& (oModelMetadata.dataServices.schema[0].entityType != null)) {
			// determine the annotation by name using the first annotated entity
			var aEntityTypes = oModelMetadata.dataServices.schema[0].entityType;
			var aEntityPropertyNames = [];
			// loop the entities
			for ( var i = 0; i < aEntityTypes.length; i++) {
				if (sEntityName === aEntityTypes[i].name) {
					for ( var j = 0; j < aEntityTypes[i].property.length; j++) {
						aEntityPropertyNames.push(aEntityTypes[i].property[j].name);
					}
					return aEntityPropertyNames;
				}
			}
		}
		return null;
	},

	/**
	 * Retrieve the service schema version of the OData model/service. As an intermediate solution the service schema
	 * version is an annotation to one (arbitrary) entity.
	 * 
	 * @param {object}
	 *          [oModel] The OData model object.
	 * @param {string}
	 *          [sEntityName] The name of the entity that is annotated (optional)
	 * @return The service schema version as an integer or 1 as default for an initial version.
	 * @private
	 */
	_getServiceSchemaVersion : function(oModel, sEntityName) {
		var version = this._getEntityAnnotation(oModel, "service-schema-version", sEntityName);
		// defaults to initial service schema version (1)
		return (version != null) ? parseInt(version) : 1;
	},

	/**
	 * Retrieve the service version of the OData model/service. As an intermediate solution the service version is an
	 * annotation to one (arbitrary) entity.
	 * 
	 * @param {object}
	 *          [oModel] The OData model object.
	 * @param {string}
	 *          [sEntityName] The name of the entity that is annotated (optional)
	 * @return The service version as an integer or 1 as default for an initial version.
	 * @private
	 */
	_getServiceVersion : function(oModel, sEntityName) {
		var version = this._getEntityAnnotation(oModel, "service-version", sEntityName);
		// defaults to initial service version (1)
		return (version != null) ? parseInt(version) : 1;
	},

	// compares metadata properties with table columns and removes needless columns
	removeNeedlessColumnsFromTable : function(oModel, sEntityName, oTable, sDataFieldId) {
		var aEntityPropertyNames = this.getEntityPropertyNames(oModel, sEntityName);
		if ((aEntityPropertyNames != null) && (aEntityPropertyNames != undefined)) {
			var aColumns = oTable.getColumns();
			for ( var i = 0; i < aColumns.length; i++) {
				var aThisColumnFields = [];
				var sThisColumnFields = "";
				sThisColumnFields = aColumns[i].data(sDataFieldId);// get real column names
				if (sThisColumnFields != "") {
					aThisColumnFields = sThisColumnFields.split(","); // if more than one backend field
					var bEntityPropertyExists = false; // initialize
					for ( var j = 0; j < aThisColumnFields.length; j++) {
						if ((j > 0) && (bEntityPropertyExists == false)) {
							break; // run before ended with FALSE, no additional loop needed
						} // minimum one backend field does not exist
						bEntityPropertyExists = false; // initialize with false for next check
						for ( var k = 0; k < aEntityPropertyNames.length; k++) {
							if (aThisColumnFields[j] == aEntityPropertyNames[k]) {
								bEntityPropertyExists = true;
								break;
							}
						}
					}
					if (!bEntityPropertyExists) {
						oTable.removeColumn(aColumns[i].sId);
					}
				}
			}
		}
	}

};

}; // end of i2d/pp/mrpcockpit/reuse/util/InteroperabilityHelper.js
if ( !jQuery.sap.isDeclared('i2d.pp.mrpcockpit.reuse.util.Lessifier') ) {
jQuery.sap.declare("i2d.pp.mrpcockpit.reuse.util.Lessifier");
jQuery.sap.require('sap.ca.ui.utils.Lessifier'); // unlisted dependency retained


i2d.pp.mrpcockpit.reuse.util.Lessifier = {

	lessifyCSSx10 : function(){
		if (sap.ca.ui.utils.Lessifier) {
			sap.ca.ui.utils.Lessifier.lessifyCSS("i2d.pp.mrpcockpit.reuse", "styles/sapMRP.css", true);
			sap.ca.ui.utils.Lessifier.lessifyCSS("i2d.pp.mrpcockpit.reuse", "styles/sapMRPx10.css", true);
			sap.ca.ui.utils.Lessifier.lessifyCSS("i2d.pp.mrpcockpit.reuse", "controls/VisualStatusForecast.css", true);
			}
	},
	lessifyCSSx30 : function(){
		if (sap.ca.ui.utils.Lessifier) {
			sap.ca.ui.utils.Lessifier.lessifyCSS("i2d.pp.mrpcockpit.reuse", "styles/sapMRP.css", true);
			sap.ca.ui.utils.Lessifier.lessifyCSS("i2d.pp.mrpcockpit.reuse", "styles/sapMRPx30.css", true);
			sap.ca.ui.utils.Lessifier.lessifyCSS("i2d.pp.mrpcockpit.reuse", "controls/SolutionCards.css", true);
			sap.ca.ui.utils.Lessifier.lessifyCSS("i2d.pp.mrpcockpit.reuse", "controls/Chart.css", true);
			sap.ca.ui.utils.Lessifier.lessifyCSS("i2d.pp.mrpcockpit.reuse", "controls/Stock.css", true);
			}
	}
};
}; // end of i2d/pp/mrpcockpit/reuse/util/Lessifier.js
if ( !jQuery.sap.isDeclared('i2d.pp.mrpcockpit.reuse.util.QUnitHelper') ) {
jQuery.sap.declare("i2d.pp.mrpcockpit.reuse.util.QUnitHelper");

// Helper method for QUnit
i2d.pp.mrpcockpit.reuse.util.QUnitHelper = {

	/**
	 * @memberOf: Helper Creates a mock infrastructure for controller checks
	 * 
	 */
	mockInfrastructure : function() {
		var oImpl = {};

		oImpl.getImpl = function() {
			var oApplicationImplementation = {};
			var oConfig = {};
			var oApplicationFacade = {};
			oApplicationFacade.getResourceBundle = function() {
				var oBundle = {};
				oBundle.getText = function() {
					var sText = 'Text';
					return sText;
				};
				return oBundle;
			};

			oConfig.oApplicationFacade = oApplicationFacade;
			oApplicationImplementation.oConfiguration = oConfig;

			var oHelper = {};
			oHelper.defineMasterHeaderFooter = function() {
			};
			oApplicationImplementation.oMHFHelper = oHelper;
			return oApplicationImplementation;
		};
		sap.ca.scfld.md.app.Application = oImpl;
	}

};
}; // end of i2d/pp/mrpcockpit/reuse/util/QUnitHelper.js
if ( !jQuery.sap.isDeclared('i2d.pp.mrpcockpit.reuse.util.QuickViewHelper') ) {
jQuery.sap.declare("i2d.pp.mrpcockpit.reuse.util.QuickViewHelper");

/**
 * Helper for Quick Views <br>
 * 
 * Mapping Logic: <br>
 * 
 * 001 sales order <br>
 * 
 * 010 Purchase Order (Vendor) <br>
 * 011 Stock Transport Order (receiving plant) <br>
 * 012 Contract Release Order (supplying plant) <br>
 * 
 * 021 Purchase Requisition (Vendor) <br>
 * 022 Transfer Requisition (receiving Plant) <br>
 * 023 Transfer Requisition (supplying Plant) <br>
 * 024 Unsourced Requisition (w/o plant) <br>
 * 
 * 031 Production Order (Finished Products), PrdOrd <br>
 * 032 Production Order (Components) , OrdRes <br>
 * 033 Process Order (Finished Products & Components) , PrcOrd <br>
 * 
 * 041 Planned Order (Inhouse Production / Make-To-Stock) <br>
 * 042 Planned Order (External Procurement - Supplier) <br>
 * 043 Planned Order (External Procurement - Unsourced) <br>
 * 044 Planned Order (External Procurement - Stock Transfer Sender Side) <br>
 * 045 Planned Order (External Procurement - Component Requirement) <br>
 * 046 Planned Order (External Procurement - Stock Transfer Receiving Plant) <br>
 * 
 */
i2d.pp.mrpcockpit.reuse.util.QuickViewHelper = {

	_quickViewMetaData : {

		// Sales Order, VC
		"001" : {
			semanticObject : "SalesOrder",
			transactionAction : "display",
			factsheetAction : "displayFactSheet",
			editAllowed : false,
			editFragment : "",
			solutionType : "",
			mrpElemParamName : "SalesOrder"
		},

		// Purchase Order, BE
		"010" : {
			semanticObject : "PurchaseOrder",
			transactionAction : "display",
			factsheetAction : "displayFactSheet",
			editAllowed : true,
			editFragment : "i2d.pp.mrpcockpit.reuse.fragments.DialogOrderChange",
			solutionType : i2d.pp.mrpcockpit.reuse.util.CommonConstants.SOLUTIONTYPE_PO_CHANGE,
			mrpElemParamName : "PurchaseOrder"
		},

		// Stock Transport Order (from the perspective of a receiving plant), BE
		"011" : {
			semanticObject : "PurchaseOrder",
			transactionAction : "display",
			factsheetAction : "displayFactSheet",
			editAllowed : true,
			editFragment : "i2d.pp.mrpcockpit.reuse.fragments.DialogOrderChange",
			solutionType : i2d.pp.mrpcockpit.reuse.util.CommonConstants.SOLUTIONTYPE_TO_CHANGE,
			mrpElemParamName : "PurchaseOrder"
		},

		// Contract Release Order (=Stock Transport Order (from the perspective of a supplying plant)), U1
		"012" : {
			semanticObject : "PurchaseOrder",
			transactionAction : "display",
			factsheetAction : "displayFactSheet",
			editAllowed : false,
			editFragment : "",
			solutionType : "",
			mrpElemParamName : "PurchaseOrder"
		},

		// Purchase Requisition, BA
		"021" : {
			semanticObject : "PurchaseRequisition",
			transactionAction : "display",
			factsheetAction : "displayFactSheet",
			editAllowed : true,
			editFragment : "i2d.pp.mrpcockpit.reuse.fragments.DialogOrderReqChange",
			solutionType : i2d.pp.mrpcockpit.reuse.util.CommonConstants.SOLUTIONTYPE_PR_CHANGE,
			mrpElemParamName : "PurchaseRequisition",
			mrpElemItemParamName : "PurchaseRequisitionItem",
			mrpElemItemValueLength : 5
		},

		// Stock Transport Requisition (from the perspective of a receiving plant), BA
		"022" : {
			semanticObject : "PurchaseRequisition",
			transactionAction : "display",
			factsheetAction : "displayFactSheet",
			editAllowed : true,
			editFragment : "i2d.pp.mrpcockpit.reuse.fragments.DialogOrderReqChange",
			solutionType : i2d.pp.mrpcockpit.reuse.util.CommonConstants.SOLUTIONTYPE_TOR_CHANGE,
			mrpElemParamName : "PurchaseRequisition",
			mrpElemItemParamName : "PurchaseRequisitionItem",
			mrpElemItemValueLength : 5
		},

		// Stock Transport Requisition (from the perspective of a supplying plant), U2
		"023" : {
			semanticObject : "PurchaseRequisition",
			transactionAction : "display",
			factsheetAction : "displayFactSheet",
			editAllowed : false,
			editFragment : "",
			solutionType : "",
			mrpElemParamName : "PurchaseRequisition",
			mrpElemItemParamName : "PurchaseRequisitionItem",
			mrpElemItemValueLength : 5
		},

		// Unsourced Requisition (w/o plant), BA
		"024" : {
			semanticObject : "PurchaseRequisition",
			transactionAction : "display",
			factsheetAction : "displayFactSheet",
			editAllowed : true,
			editFragment : "i2d.pp.mrpcockpit.reuse.fragments.DialogOrderReqChange",
			solutionType : i2d.pp.mrpcockpit.reuse.util.CommonConstants.SOLUTIONTYPE_PR_CHANGE,
			mrpElemParamName : "PurchaseRequisition",
			mrpElemItemParamName : "PurchaseRequisitionItem",
			mrpElemItemValueLength : 5
		},

		// Production Order (Finished Products), FE	
		"031" : {
			semanticObject : "ProductionOrder",
			transactionAction : "display",
			factsheetAction : "displayFactSheet",
			editAllowed : false,
			editFragment : "",
			solutionType : "",
			mrpElemParamName : "ProductionOrder"
		},

		// Production Order (Components), AR
		"032" : {
			semanticObject : "ProductionOrder",
			transactionAction : "display",
			factsheetAction : "displayFactSheet",
			editAllowed : false,
			editFragment : "",
			solutionType : "",
			mrpElemParamName : "ProductionOrder"
		},

		// Process Order (Finished Products & Components), BR		
		"033" : {
			semanticObject : "ProcessOrder",
			transactionAction : "display",
			factsheetAction : "displayFactSheet",
			editAllowed : false,
			editFragment : "",
			solutionType : "",
			mrpElemParamName : "ProcessOrder"
		},
		
		// Planned Order (Inhouse Production / Make-To-Stock), PA
		// TODO: Add the edit functionality
		"041" : {
			semanticObject : "PlannedOrder",
			transactionAction : "change",
			factsheetAction : "displayFactSheet",
			editAllowed : true,
			editFragment : "i2d.pp.mrpcockpit.reuse.fragments.DialogPlanOrderChange",
			solutionType : i2d.pp.mrpcockpit.reuse.util.CommonConstants.SOLUTIONTYPE_PA_STOCK_CHANGE,
			mrpElemParamName : "PlannedOrder"
		},

		// Planned Order (External Procurement - Supplier), PA
		// TODO: Add the edit functionality
		"042" : {
			semanticObject : "PlannedOrder",
			transactionAction : "change",
			factsheetAction : "displayFactSheet",
			editAllowed : true,
			editFragment : "i2d.pp.mrpcockpit.reuse.fragments.DialogPlanOrderChange",
			solutionType : i2d.pp.mrpcockpit.reuse.util.CommonConstants.SOLUTIONTYPE_PA_VENDOR_CHANGE,
			mrpElemParamName : "PlannedOrder"
		},

		// Planned Order (External Procurem. - Unsourced), PA
		// TODO: Add the edit functionality
		"043" : {
			semanticObject : "PlannedOrder",
			transactionAction : "change",
			factsheetAction : "displayFactSheet",
			editAllowed : true,
			editFragment : "i2d.pp.mrpcockpit.reuse.fragments.DialogPlanOrderChange",
			solutionType : i2d.pp.mrpcockpit.reuse.util.CommonConstants.SOLUTIONTYPE_PA_UNSRC_CHANGE,
			mrpElemParamName : "PlannedOrder"
		},

		// Planned Order (External Procurement - Stock Transfer Sender Side), PA
		// TODO: Add the edit functionality
		"044" : {
			semanticObject : "PlannedOrder",
			transactionAction : "change",
			factsheetAction : "displayFactSheet",
			editAllowed : true,
			editFragment : "i2d.pp.mrpcockpit.reuse.fragments.DialogPlanOrderChange",
			solutionType : i2d.pp.mrpcockpit.reuse.util.CommonConstants.SOLUTIONTYPE_PA_PLANT_CHANGE,
			mrpElemParamName : "PlannedOrder"
		},

		// Planned Order (External Procurement / Component Requirement), PA
		// TODO: Add the edit functionality
		"045" : {
			semanticObject : "PlannedOrder",
			transactionAction : "change",
			factsheetAction : "displayFactSheet",
			editAllowed : true,
			editFragment : "i2d.pp.mrpcockpit.reuse.fragments.DialogPlanOrderChange",
			solutionType : i2d.pp.mrpcockpit.reuse.util.CommonConstants.SOLUTIONTYPE_PA_PROD_CHANGE,
			mrpElemParamName : "PlannedOrder"
		},		

		// Planned Order (External Procurement - Stock Transfer Receiving Plant), PA
		// TODO: Add the edit functionality
		"046" : {
			semanticObject : "PlannedOrder",
			transactionAction : "change",
			factsheetAction : "displayFactSheet",
			editAllowed : true,
			editFragment : "i2d.pp.mrpcockpit.reuse.fragments.DialogPlanOrderChange",
			solutionType : i2d.pp.mrpcockpit.reuse.util.CommonConstants.SOLUTIONTYPE_PA_REPLANT_CHANGE,
			mrpElemParamName : "PlannedOrder"
		}
		
	},

	getQuickViewMetaData : function(quickViewCategory) {
		return this._quickViewMetaData[quickViewCategory];
	},

	/**
	 * Returns the name of the xml fragment which defines the internal structure and visual representation of the quick
	 * view instance (e.g. i2d.pp.mrpcockpit.reuse.fragments.SalesOrderQuickView")
	 * 
	 * @memberOf QV
	 */
	getQuickViewFragment : function(mrpElementCategory) {

		switch (mrpElementCategory) {

			case i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_ELEMENT_CATEGORY_CUSORD :
				return "i2d.pp.mrpcockpit.reuse.fragments.SalesOrderQuickView";

			case i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_ELEMENT_CATEGORY_POITEM :
			case i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_ELEMENT_CATEGORY_RELORD :
			case i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_ELEMENT_CATEGORY_PURRQS :
			case i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_ELEMENT_CATEGORY_PRQREL :
				return "i2d.pp.mrpcockpit.reuse.fragments.PurchaseOrderQuickView";

			case i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_ELEMENT_CATEGORY_PRDORD :
			case i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_ELEMENT_CATEGORY_PRCORD :
			case i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_ELEMENT_CATEGORY_ORDRES :
				return "i2d.pp.mrpcockpit.reuse.fragments.ProductionOrderQuickView";

			case i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_ELEMENT_CATEGORY_PLDORD :
			case i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_ELEMENT_CATEGORY_DEPREQ :
			case i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_ELEMENT_CATEGORY_PLOREL :
				return "i2d.pp.mrpcockpit.reuse.fragments.PlannedOrderQuickView";

			default :
				return undefined;
		}
	},

	/**
	 * Returns the name of the navigation target object, used for any object related navigation (such as the navigation to
	 * the fact sheet or to the backend navigation)
	 */
	getSemanticObject : function(quickViewCategory) {
		var metaData = i2d.pp.mrpcockpit.reuse.util.QuickViewHelper.getQuickViewMetaData(quickViewCategory);
		if (metaData) {
			return metaData.semanticObject;
		} else {
			return undefined;
		}
	},

	/**
	 * Returns the name of the navigation action for the backend transaction (in most cases "display")
	 */
	getTransactionAction : function(quickViewCategory) {
		var metaData = i2d.pp.mrpcockpit.reuse.util.QuickViewHelper.getQuickViewMetaData(quickViewCategory);
		if (metaData) {
			return metaData.transactionAction;
		} else {
			return undefined;
		}
	},

	/**
	 * Returns the name of the navigation action for the fact sheet (in most cases "displayFactSheet")
	 */
	getFactsheetAction : function(quickViewCategory) {
		var metaData = i2d.pp.mrpcockpit.reuse.util.QuickViewHelper.getQuickViewMetaData(quickViewCategory);
		if (metaData) {
			return metaData.factsheetAction;
		} else {
			return undefined;
		}
	},

	/**
	 * Returns the navigation parameter object for factsheet navigation
	 */
	getNavigationParameter : function(quickViewCategory, mrpElement, mrpElementItem, plannedOrder) {
		var metaData = i2d.pp.mrpcockpit.reuse.util.QuickViewHelper.getQuickViewMetaData(quickViewCategory);
		if (metaData) {
			var navigationParameter = {};
			if (metaData.mrpElemParamName) {
				// quick view category 045 -> mrpElement does not contain the planned order number
				if (quickViewCategory === "045"){ 
					navigationParameter[metaData.mrpElemParamName] = plannedOrder;
				}
				else {
				  navigationParameter[metaData.mrpElemParamName] = mrpElement;
			    }
		    }
			if (metaData.mrpElemItemParamName && mrpElementItem) {
				// Unfortunately we have to handle item numbers with different length
				// So if the length of the item number is specified we use only this number of characters
				if (metaData.mrpElemItemValueLength) {
					// Use the right-most metaData.mrpElemItemValueLength number of characters of the item number
					// remove leading characters if necessary
					navigationParameter[metaData.mrpElemItemParamName] = mrpElementItem.slice(-metaData.mrpElemItemValueLength);
				} else {
					navigationParameter[metaData.mrpElemItemParamName] = mrpElementItem;
				}
			}
			return navigationParameter;
		} else {
			return undefined;
		}
	},

	/**
	 * Returns true if the supplied MRPElementCategory has a QuickView and shall be therefore clickable to open this quick
	 * view
	 */
	isHyperlinkActive : function(mrpElementCategory, serviceSchemaVersion, SourceMRPElementCategory) {

		// if not provided, get the service schema version to check whether the backend does support QuickViews
		var iServiceSchemaVersion = serviceSchemaVersion;
		if (!iServiceSchemaVersion) {
			// prerequisite to get the versions model here is that the versions model is initialized (see onInit of s2.parent
			// using the interoperability helper) and that the versions model is bound to the view (done in S3.parent)
			iServiceSchemaVersion = this.getModel("ServiceVersions").getData().iServiceSchemaVersion;
		}
		switch (iServiceSchemaVersion) {
		 	  // in general the service schema version does support QuickViews, so it depends on the
			  // MRPElementCategory, if a QuickView shall be provided or not
			
			case 1 :// service schema version 1 (= wave 3) does not support QuickViews at all, therefore no QuickView link
				// shall be provided
				return false;
			
			case 2 :// service schema version 2 (= wave 5) not all QuickViews are already supported, therefore only the implemented 
			 // QuickView links shall be provided
				switch (mrpElementCategory) {
					case i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_ELEMENT_CATEGORY_CUSORD :
					case i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_ELEMENT_CATEGORY_POITEM :
					case i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_ELEMENT_CATEGORY_RELORD :
					case i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_ELEMENT_CATEGORY_PURRQS :
					case i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_ELEMENT_CATEGORY_PRQREL :
					case i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_ELEMENT_CATEGORY_PRDORD :
					case i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_ELEMENT_CATEGORY_PLDORD :
						return true;
					
					default :
						return false;
				}
				
			default :// service schema version 3 (= wave 7) all QuickViews are supported, therefore all QuickView links
				// shall be provided				

				switch (mrpElementCategory) {
					case i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_ELEMENT_CATEGORY_CUSORD :
					case i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_ELEMENT_CATEGORY_POITEM :
					case i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_ELEMENT_CATEGORY_RELORD :
					case i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_ELEMENT_CATEGORY_PURRQS :
					case i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_ELEMENT_CATEGORY_PRQREL :
					case i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_ELEMENT_CATEGORY_PRDORD :
					case i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_ELEMENT_CATEGORY_PLDORD :
						return true;

				// QuickView links below are new in wave 7	
					case i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_ELEMENT_CATEGORY_ORDRES :
						if ((SourceMRPElementCategory === i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_ELEMENT_CATEGORY_PRDORD) ||
						    (SourceMRPElementCategory === i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_ELEMENT_CATEGORY_PRCORD)) {
							 return true;
						} else {
						   return false;
						};
					case i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_ELEMENT_CATEGORY_PRCORD :						
					case i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_ELEMENT_CATEGORY_DEPREQ :
					case i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_ELEMENT_CATEGORY_PLOREL :
						return true;

				  default :
						return false;
				}
		}
	},

	/**
	 * Returns true if the quick view shall provide a button to open a quick edit dialog
	 */
	isEditAllowed : function(quickViewCategory) {
		var metaData = i2d.pp.mrpcockpit.reuse.util.QuickViewHelper.getQuickViewMetaData(quickViewCategory);
		if (metaData) {
			return metaData.editAllowed;
		} else {
			return false;
		}
	},

	/**
	 * Returns the xml fragment of the quick edit dialog
	 */
	getEditFragment : function(quickViewCategory) {
		var metaData = i2d.pp.mrpcockpit.reuse.util.QuickViewHelper.getQuickViewMetaData(quickViewCategory);
		if (metaData) {
			return metaData.editFragment;
		} else {
			return undefined;
		}
	},

	/**
	 * Needed by the quick edit dialog to control which kind of change shall be executed (e.g change a purchase order,
	 * change a stock transport order, ...)
	 */
	getSolutionType : function(quickViewCategory) {
		var metaData = i2d.pp.mrpcockpit.reuse.util.QuickViewHelper.getQuickViewMetaData(quickViewCategory);
		if (metaData) {
			return metaData.solutionType;
		} else {
			return undefined;
		}
	},

	/**
	 * Returns true (=visible) if the production plant is different to the own plant and therefore relevant for displaying
	 * 
	 * @param {string}
	 *          prodPlant - the production Plant
	 * @param {string}
	 *          mrpPlant - the own plant
	 */
	getProductionPlantVisible : function(prodPlant, mrpPlant) {
		return prodPlant !== mrpPlant ? true : false;
	},

	/**
	 * Returns the form title for the contact section of the planned order quick view
	 * 
	 * @param {string}
	 *          quickViewCategory - a planned order quick view category
	 */
	getPlannedOrderContactTitle : function(quickViewCategory) {
		// ONE CODE LINE >>>
		if (!i2d.pp.mrpcockpit.reuse.util.CommonConstants.ONE_CODELINE_TEXT) {
			// ONE CODE LINE <<<
			switch (quickViewCategory) {
				case i2d.pp.mrpcockpit.reuse.util.CommonConstants.QUICKVIEW_CAT.PLANORD_STOCK :
					return this.getModel('Common_i18n').getResourceBundle().getText("INTERNAL_CONTACT");
				case i2d.pp.mrpcockpit.reuse.util.CommonConstants.QUICKVIEW_CAT.PLANORD_VENDOR :
					return this.getModel('Common_i18n').getResourceBundle().getText("VENDOR_INFO");
				case i2d.pp.mrpcockpit.reuse.util.CommonConstants.QUICKVIEW_CAT.PLANORD_UNSRC :
					return this.getModel('Common_i18n').getResourceBundle().getText("VENDOR_INFO");
				case i2d.pp.mrpcockpit.reuse.util.CommonConstants.QUICKVIEW_CAT.PLANORD_PLANT :
					return this.getModel('Common_i18n').getResourceBundle().getText("SUPPLYING_PLANT");
				case i2d.pp.mrpcockpit.reuse.util.CommonConstants.QUICKVIEW_CAT.PLANORD_PROD :
					return this.getModel('Common_i18n').getResourceBundle().getText("INTERNAL_CONTACT");
				case i2d.pp.mrpcockpit.reuse.util.CommonConstants.QUICKVIEW_CAT.PLANORD_REPLANT :
					return this.getModel('Common_i18n').getResourceBundle().getText("RECEIVING_PLANT");				
		}
			// ONE CODE LINE >>>
		} else {
			var sI18nID, sSoHI18nID, sModSI18nID;
			switch (quickViewCategory) {
				case i2d.pp.mrpcockpit.reuse.util.CommonConstants.QUICKVIEW_CAT.PLANORD_STOCK :
					sI18nID = "INTERNAL_CONTACT";
					break;
				case i2d.pp.mrpcockpit.reuse.util.CommonConstants.QUICKVIEW_CAT.PLANORD_VENDOR :
				case i2d.pp.mrpcockpit.reuse.util.CommonConstants.QUICKVIEW_CAT.PLANORD_UNSRC :
					sI18nID = "VENDOR_INFO";
					sSoHI18nID = sI18nID + "SoH";
					sModSI18nID = sI18nID + "ModS";
					if (this.getModel('ServiceVersions')) {
						sI18nID = i2d.pp.mrpcockpit.reuse.util.Helper.getSpecialTextForFieldInt({sI18nID : sI18nID, 
							sSoHI18nID : sSoHI18nID, sModSI18nID : sModSI18nID, 
							iServiceVersion : this.getModel('ServiceVersions').getData().iServiceSchemaVersion});
					}
					break;
				case i2d.pp.mrpcockpit.reuse.util.CommonConstants.QUICKVIEW_CAT.PLANORD_PLANT :
					sI18nID = "SUPPLYING_PLANT";
					break;
				case i2d.pp.mrpcockpit.reuse.util.CommonConstants.QUICKVIEW_CAT.PLANORD_PROD :
					sI18nID = "INTERNAL_CONTACT";
					break;
				case i2d.pp.mrpcockpit.reuse.util.CommonConstants.QUICKVIEW_CAT.PLANORD_REPLANT :
					sI18nID = "RECEIVING_PLANT";
					break;
			}
			if (sI18nID) {
				return this.getModel('Common_i18n').getResourceBundle().getText(sI18nID);
			}
		}
		// ONE CODE LINE <<<
	},

	/**
	 * Returns the text provided in parameter text1 if the procurement type provided in quickViewCategory is "internal
	 * procurement" (quick view category Planned Order Make-to-stock)
	 */
	getTextByProcurementType : function(quickViewCategory, text1, text2) {
		return ((quickViewCategory === i2d.pp.mrpcockpit.reuse.util.CommonConstants.QUICKVIEW_CAT.PLANORD_STOCK) ||
		        (quickViewCategory === i2d.pp.mrpcockpit.reuse.util.CommonConstants.QUICKVIEW_CAT.PLANORD_PROD))
				? text1
				: text2;
	},
	
	/**
	 * Returns the text provided in parameter text1 if the quickViewCategory is production order (PRDORD, ORDRES)
	 *  otherwise return text for process order (PRCORD)
	 */
	getTextProductionOrProcess : function(quickViewCategory, text1, text2) {
		return ((quickViewCategory === i2d.pp.mrpcockpit.reuse.util.CommonConstants.QUICKVIEW_CAT.PRDORD) ||
            (quickViewCategory === i2d.pp.mrpcockpit.reuse.util.CommonConstants.QUICKVIEW_CAT.ORDRES))
				? text1
				: text2;
	},	

	/**
	 * Returns true if the quickViewCategory is equal to the required one
	 */
	getVisibilityByQuickViewType : function(quickViewCategory, requiredCategory1) {
		if ((quickViewCategory === i2d.pp.mrpcockpit.reuse.util.CommonConstants.QUICKVIEW_CAT.PLANORD_STOCK) ||
        (quickViewCategory === i2d.pp.mrpcockpit.reuse.util.CommonConstants.QUICKVIEW_CAT.PLANORD_PROD)) {
				return true;
			} else {
				return false;
			}		
		},	

	/**
	 * Returns true if the quickViewCategory is NOT equal to the required one
	 */
	getVisibilityByNotQuickViewType : function(quickViewCategory, requiredCategory1) {
		if ((quickViewCategory === i2d.pp.mrpcockpit.reuse.util.CommonConstants.QUICKVIEW_CAT.PLANORD_STOCK) ||
        (quickViewCategory === i2d.pp.mrpcockpit.reuse.util.CommonConstants.QUICKVIEW_CAT.PLANORD_PROD)) {
				return false;
			} else {
				return true;
			}		
		},
			
	/**
	 * Returns true if the given value is not initial and currentCategory equals to one of the given required categories
	 * 
	 * @param {any}
	 *          value1 - value to be checked for initial
	 * @param {string}
	 *          currentCategory - the currently used quick view category
	 * @param {string}
	 *          requiredCategory[1,2,3,4] - the quick view category for which the data field shall be visible ...
	 */
	matchCategoryAndHasValue : function(value1, currentCategory, requiredCategory1, requiredCategory2, requiredCategory3, requiredCategory4) {
		var hasValue = i2d.pp.mrpcockpit.reuse.util.CommonFormatter.hasValue(value1);
		return (hasValue && (currentCategory === requiredCategory1 || currentCategory === requiredCategory2 || currentCategory === requiredCategory3 || currentCategory === requiredCategory4));
	},

	/**
	 * Returns true if one of the given values is not initial and currentCategory equals to one of the given required
	 * categories
	 * 
	 * @param {any}
	 *          value1 - one of the values being part of the initial check
	 * @param {any}
	 *          value2 - one of the values being part of the initial check
	 * @param {string}
	 *          currentCategory - the currently used quick view category
	 * @param {string}
	 *          requiredCategory[1,2,3,4] - the quick view category for which the data field shall be visible ...
	 */
	matchCategoryAndHasValues : function(value1, value2, currentCategory, requiredCategory1, requiredCategory2,
			requiredCategory3, requiredCategory4) {
		var hasValue = i2d.pp.mrpcockpit.reuse.util.CommonFormatter.hasValue(value1, value2);
		return (hasValue && (currentCategory === requiredCategory1 || currentCategory === requiredCategory2 || currentCategory === requiredCategory3 || currentCategory === requiredCategory4));
	},

	/**
	 * Returns true if one of the given values is not initial and currentCategory equals to one of the given required
	 * categories
	 * 
	 * @param {any}
	 *          value1 - one of the values being part of the initial check
	 * @param {any}
	 *          value2 - one of the values being part of the initial check
	 * @param {any}
	 *          value3 - one of the values being part of the initial check
	 * @param {string}
	 *          currentCategory - the currently used quick view category
	 * @param {string}
	 *          requiredCategory[1,2,3,4] - the quick view category for which the data field shall be visible ...
	 */
	matchCategoryAndHasValues3 : function(value1, value2, value3, currentCategory, requiredCategory1, requiredCategory2,
			requiredCategory3, requiredCategory4) {
		var hasValue = i2d.pp.mrpcockpit.reuse.util.CommonFormatter.hasValue(value1, value2, value3);
		return (hasValue && (currentCategory === requiredCategory1 || currentCategory === requiredCategory2 || currentCategory === requiredCategory3 || currentCategory === requiredCategory4));
	},

	
	/**
	 * Returns true if one of the given values is not initial and currentCategory equals to one of the given required
	 * categories
	 * 
	 * @param {any}
	 *          value1 - one of the values being part of the initial check
	 * @param {any}
	 *          value2 - one of the values being part of the initial check
	 * @param {any}
	 *          value3 - one of the values being part of the initial check
	 @param {any}
	 *          value4 - one of the values being part of the initial check          
	 * @param {string}
	 *          currentCategory - the currently used quick view category
	 * @param {string}
	 *          requiredCategory[1,2,3,4] - the quick view category for which the data field shall be visible ...
	 */
	matchCategoryHasValues5 : function(value1, value2, value3, value4, quickViewCategory) {
	
		if ((value1 == null || value1 == "") ||
				(value2 == null || value2 == "") ||
				(value3 == null || value3 == "") || 
				(value4 == null || value4 == "") ||
			  (quickViewCategory == null || quickViewCategory == "")) {
			    return false; 
		};	
		
		switch (quickViewCategory) {
			case i2d.pp.mrpcockpit.reuse.util.CommonConstants.QUICKVIEW_CAT.PLANORD_PROD :
				if (value1 == 0 &&
						value2 == 0 &&
						value3 == 0 &&
						value4 == 0) {
					return false;
				} else {
					return true;
				}
		default :
			    return false;
		}
	},	
		
	/**
	 * Returns true if one of the given values is not initial and currentCategory equals to one of the given required
	 * categories
	 * 
	 * @param {any}
	 *          value1 - one of the values being part of the initial check
	 * @param {any}
	 *          value2 - one of the values being part of the initial check
	 * @param {any}
	 *          value3 - one of the values being part of the initial check
	 * @param {any}
	 *          value4 - one of the values being part of the initial check
	 * @param {string}
	 *          currentCategory - the currently used quick view category
	 * @param {string}
	 *          requiredCategory[1,2,3,4] - the quick view category for which the data field shall be visible ...
	 */
	matchCategoryHasValues4DiffPlants : function(value1, value2, value3, value4, currentCategory, requiredCategory1, requiredCategory2,
			requiredCategory3, requiredCategory4) {
	
		if   (value1 == null ||
				  value2 == null ||
				  value3 == null ||
				  value4 == null) {
			    return;
		};
		
		if (value3 === value4) {
			if ((value1 == 0) || (value1 == '') &&
					(value2 == 0) || (value2 == '') &&
					(value3 == 0) || (value3 == '') &&
					(value4 == 0) || (value4 == '')) {
				return (false && (currentCategory === requiredCategory1 || currentCategory === requiredCategory2 || currentCategory === requiredCategory3 || currentCategory === requiredCategory4));
			} 
				return (true  && (currentCategory === requiredCategory1 || currentCategory === requiredCategory2 || currentCategory === requiredCategory3 || currentCategory === requiredCategory4));

		} else if (value3 !== value4) {
			  return (true  && (currentCategory === requiredCategory1 || currentCategory === requiredCategory2 || currentCategory === requiredCategory3 || currentCategory === requiredCategory4));
		}
	},	
	
	/**
	 * Returns true for all values (also 0) and currentCategory equals to one of the given required categories
	 * 
	 * @param {any}
	 *          value1 - value to be checked
	 * @param {string}
	 *          currentCategory - the currently used quick view category
	 * @param {string}
	 *          requiredCategory[1,2,3,4] - the quick view category for which the data field shall be visible ...
	 */
	matchCategoryForEveryValue : function(value1, currentCategory, requiredCategory1, requiredCategory2,
			requiredCategory3, requiredCategory4) {
		var everyValue = i2d.pp.mrpcockpit.reuse.util.CommonFormatter.isValueGreaterEqualZero(value1);
		return (everyValue && (currentCategory === requiredCategory1 || currentCategory === requiredCategory2 || currentCategory === requiredCategory3 || currentCategory === requiredCategory4));
	},

	/**
	 * Returns true if the currentCategory equals to the given required category
	 * @param {any}
	 *          value1 - value to be checked
	 * @param {string}
	 *          quickViewCategory - the currently used quick view category
	 */
	matchCategoryUnsrc : function(value1, quickViewCategory) {
		if (quickViewCategory == i2d.pp.mrpcockpit.reuse.util.CommonConstants.QUICKVIEW_CAT.PLANORD_UNSRC) {
			return true;
		} else {
			return false;
		}
	},
	
	/**
	 * Returns true if the currentCategory equals to the given required category
	 * @param {any}
	 *          value1 - value to be checked
	 * @param {string}
	 *          quickViewCategory - the currently used quick view category
	 */
	matchCategoryVendor : function(value1, quickViewCategory) {
		if ((quickViewCategory == i2d.pp.mrpcockpit.reuse.util.CommonConstants.QUICKVIEW_CAT.PLANORD_VENDOR) ||
			 (quickViewCategory == i2d.pp.mrpcockpit.reuse.util.CommonConstants.QUICKVIEW_CAT.PLANORD_UNSRC)) {
			return true;
		} else {
			return false;
		}
	},	
	
	/**
	 * Returns true if the currentCategory equals to the given required category
	 * @param {any}
	 *          value1 - value to be checked
	 * @param {string}
	 *          quickViewCategory - the currently used quick view category
	 */
	matchCategoryProcurement : function(value1, quickViewCategory) {
		if ((quickViewCategory == i2d.pp.mrpcockpit.reuse.util.CommonConstants.QUICKVIEW_CAT.PLANORD_STOCK) ||
			 (quickViewCategory == i2d.pp.mrpcockpit.reuse.util.CommonConstants.QUICKVIEW_CAT.PLANORD_PROD)) {
			return true;
		} else {
			return false;
		}
	},	
	
	/**
	 * Returns true if the currentCategory equals to the planned order category
	 * @param {any}
	 *          value1 - value to be checked
	 * @param {string}
	 *          quickViewCategory - the currently used quick view category
	 */
	matchCategoryPlanned : function(value1, quickViewCategory) {
		if ((quickViewCategory == i2d.pp.mrpcockpit.reuse.util.CommonConstants.QUICKVIEW_CAT.PLANORD_STOCK) ||
				(quickViewCategory == i2d.pp.mrpcockpit.reuse.util.CommonConstants.QUICKVIEW_CAT.PLANORD_VENDOR) ||
				(quickViewCategory == i2d.pp.mrpcockpit.reuse.util.CommonConstants.QUICKVIEW_CAT.PLANORD_UNSRC) ||
				(quickViewCategory == i2d.pp.mrpcockpit.reuse.util.CommonConstants.QUICKVIEW_CAT.PLANORD_PLANT) ||
				(quickViewCategory == i2d.pp.mrpcockpit.reuse.util.CommonConstants.QUICKVIEW_CAT.PLANORD_PROD) ||
				(quickViewCategory == i2d.pp.mrpcockpit.reuse.util.CommonConstants.QUICKVIEW_CAT.PLANORD_REPLANT)) {
			return true;
		} else {
			return false;
		}
	},	

	/**
	 * Returns true if value1 hasValue and value1 is NOT equal to value2
	 * @param {any}
	 *          value1 - value2 to be checked
	 */
	matchDifferentValue : function(value1, value2) {
		var hasValue = i2d.pp.mrpcockpit.reuse.util.CommonFormatter.hasValue(value1);
		return (hasValue && (value1 !== value2));
	},	
	
	// handle event also for projects without S3parent .extend
	handlePressDispoElementQuickView : function(evt, that) {

		// Save the control which raised the event. This is used in openBy of the popover.
		// The popover will be placed relative to this control.
		that._oSelectedMRPElementItem = evt.getSource();
		var oMrpElementData = that._oSelectedMRPElementItem.getBindingContext().getObject();

		// setup the quick View container if needed, it will hold a single quick view instance for each mrp element
		// category
		if (!that._oQuickViewContainer) {
			that._oQuickViewContainer = {};
		}

		// Determine the name of the view that has to be used for the current MRP element category
		var sViewName = i2d.pp.mrpcockpit.reuse.util.QuickViewHelper
				.getQuickViewFragment(oMrpElementData.MRPElementCategory);

		var oQuickView = undefined;

		// Check if we already have an instance of the quick view
		if (!that._oQuickViewContainer[sViewName]) {

			// No view instance does exist, so create a new one
			oQuickView = sap.ui.xmlfragment(sViewName, that);
			// set ServiceVersion Model for using in popover
			oQuickView.setModel(that.oApplicationImplementation.getApplicationModel("ServiceVersions"),"ServiceVersions");
			// i18n model must be loaded before the actual data model.
			// Otherwise the formatters cannot access the resouce bundle when the first data is being processed.
			oQuickView.setModel(that.getView().getModel("Common_i18n"), "Common_i18n");
  		oQuickView.setModel(that.getView().getModel());

			// register the quick view as a separate model, this allows the xml views to pass the constants to
			// formatter methods
			var oQuickViewConstModel = new sap.ui.model.json.JSONModel(
					i2d.pp.mrpcockpit.reuse.util.CommonConstants.QUICKVIEW_CAT);
			oQuickView.setModel(oQuickViewConstModel, "QuickViewConstantsModel");
			
			// MRP Element Category Model for usage as constants for formatter methods 
			var oMRPElementConstModel = new sap.ui.model.json.JSONModel(
					i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRPElementCategory);
			oQuickView.setModel(oMRPElementConstModel, "MRPElementConstantsModel");
			
		} else {
			// restore and reuse the instance which was previously instantiated for the same category
			oQuickView = that._oQuickViewContainer[sViewName];
		}

		var quickViewPath = "/QuickViews(";

		if (oMrpElementData.MRPElementCategory === i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_ELEMENT_CATEGORY_ORDRES) {
			quickViewPath += "MRPElementCategory='" + encodeURIComponent(oMrpElementData.SourceMRPElementCategory) + "',";
			quickViewPath += "MRPElement='" + encodeURIComponent(oMrpElementData.SourceMRPElement) + "',";
			quickViewPath += "MRPElementItem='" + encodeURIComponent(oMrpElementData.SourceMRPElementItem) + "',";
			quickViewPath += "MRPElementScheduleLine='" + encodeURIComponent(oMrpElementData.SourceMRPElementScheduleLine)
					+ "'";
		} else {
			quickViewPath += "MRPElementCategory='" + encodeURIComponent(oMrpElementData.MRPElementCategory) + "',";
			quickViewPath += "MRPElement='" + encodeURIComponent(oMrpElementData.MRPElement) + "',";
			quickViewPath += "MRPElementItem='" + encodeURIComponent(oMrpElementData.MRPElementItem) + "',";
			quickViewPath += "MRPElementScheduleLine='" + encodeURIComponent(oMrpElementData.MRPElementScheduleLine) + "'";
		}

		quickViewPath += ")";
		// Trigger the Odata call for the QuickView data
		oQuickView.bindElement(quickViewPath);

		// Save the view instance for later reuse
		// This is necessary to avoid duplicate ID errors that occur when a second instance of the same view is
		// created
		that._oQuickViewContainer[sViewName] = oQuickView;
		// The popover will be opened when the Odata call is finished, i.e. in _onModelLoaded.
	},

	/**
	 * Destroys all saved Quick View controls
	 */
	destroyQuickViews : function(that) {
		if (that._oQuickViewContainer) {
			for ( var i in that._oQuickViewContainer) {
				if (that._oQuickViewContainer[i]) {
					that._oQuickViewContainer[i].destroy();
					that._oQuickViewContainer[i] = undefined;
				}
			}
		}
	},

	/**
	 * 
	 * Returns true if at least one of the given text fields is not initial
	 * values: 'ProductionSupervisor', 'Vendor', 'BusinessPartnerPlant'
	 * VENDOR & UNSRC got own logic in ContactInformationQuickView.fragment
	 */
	matchCategoryValueInAnyField : function(value, value2, value3, quickViewCategory) {
		switch (quickViewCategory) {
			case i2d.pp.mrpcockpit.reuse.util.CommonConstants.QUICKVIEW_CAT.PLANORD_STOCK :
				if (value == null || value == "") {
					return false;
				} else {
					return true;
				}
			case i2d.pp.mrpcockpit.reuse.util.CommonConstants.QUICKVIEW_CAT.PLANORD_VENDOR :
				return false;
			case i2d.pp.mrpcockpit.reuse.util.CommonConstants.QUICKVIEW_CAT.PLANORD_UNSRC :
				return false;
/**			case i2d.pp.mrpcockpit.reuse.util.CommonConstants.QUICKVIEW_CAT.PLANORD_VENDOR :
				if (value2 == null || value2 == "") {
					return false;
				} else {
					return true;
				}
			case i2d.pp.mrpcockpit.reuse.util.CommonConstants.QUICKVIEW_CAT.PLANORD_UNSRC :
				return true;
*/
			case i2d.pp.mrpcockpit.reuse.util.CommonConstants.QUICKVIEW_CAT.PLANORD_PLANT :
				if (value3 == null || value3 == "") {
					return false;
				} else {
					return true;
				}
			case i2d.pp.mrpcockpit.reuse.util.CommonConstants.QUICKVIEW_CAT.PLANORD_PROD :
				if (value == null || value == "") {
					return false;
				} else {
					return true;
				}
			case i2d.pp.mrpcockpit.reuse.util.CommonConstants.QUICKVIEW_CAT.PLANORD_REPLANT :
				if (value3 == null || value3 == "") {
					return false;
				} else {
					return true;
				}
		}
	}

};

}; // end of i2d/pp/mrpcockpit/reuse/util/QuickViewHelper.js
if ( !jQuery.sap.isDeclared('i2d.pp.mrpcockpit.reuse.util.StateMachine') ) {
jQuery.sap.declare("i2d.pp.mrpcockpit.reuse.util.StateMachine");

i2d.pp.mrpcockpit.reuse.util.StateMachine = {
	// States in which the application will find itself
	oState : {
		initial : "initial",
		waitVariantData : "waitVariantData",
		waitFacetOrTableData : "waitFacetOrTableData",
		started : "started",
		waitFirstAORDialogFinished : "waitFirstAORDialogFinished",
		waitAORDialogFinished : "waitAORDialogFinished",
		waitFacetDataForNewAOR : "waitFacetFilterDataForNewAOR",
		waitSelectedVariantData : "waitSelectedVariantData"
	},

	// Events
	oEvent : {
		start : "start",
		varDataReceived : "varDataReceived",
		facetDataReceived : "facetDataReceived",
		noFacetDataReceived : "noFacetDataReceived",
		tableDataReceived : "tableDataReceived",
		aORUndefined : "aORUndefined",
		firstAORDialogFinished : "aORFirstDialogFinished",
		aORDialogFinished : "aORDialogFinished",
		aORDialogCancelled : "aORDialogCancelled",
		filterChanged : "filterChanged",
		tableChanged : "tableChanged",
		aORButtonPressed : "aORButtonPressed",
		variantSelected : "variantSelected"
	},

	// Actions which are executed during the transition to the next state
	oAction : {
		getVariantDataByName : function(oController) {
			i2d.pp.mrpcockpit.reuse.view.DisplayVariant.readVariantByName(oController.sCurrentVariantName);
		},

		getVariantDataById : function(oController) {
			i2d.pp.mrpcockpit.reuse.view.DisplayVariant.readVariantById(oController.sVariantID);
		},

		getTableData : function(oController) {
			oController._rebindRefreshTable();
		},

		getFacetAndTableData : function(oController) {
			oController._setupFacetFilterCall();
			oController._rebindRefreshTable();
		},

		startFirstAORDialog : function(oController) {
			i2d.pp.mrpcockpit.reuse.view.AoRHandler.openFirstOnboardingDialog(oController.oDataModel,
					oController._firstAORDialogFinished.bind(oController), oController);
		},

		setFacetFilterVariant : function(oController) {
			oController.oViewState.FacetFilterState = oController.oVariantData.FacetFilterState;
			oController._setFacetFilterState(oController.oVariantData.FacetFilterState);
			i2d.pp.mrpcockpit.reuse.view.FacetFilter._recreateFacetFilterFilters(oController);
		},

		startAORDialog : function(oController) {
			// oController.aStoredFacetFilterState =
			// i2d.pp.mrpcockpit.reuse.view.FacetFilter._getFacetFilterState(oController);
			i2d.pp.mrpcockpit.reuse.view.AoRHandler.openOnboardingDialog(null, oController.oDataModel,
					oController._aORDialogFinished.bind(oController), oController);
		},

		restoreFacetFilterState : function(oController) {
			if (oController.aStoredFacetFilterState != undefined) {
				oController.oViewState.FacetFilterState = oController.aStoredFacetFilterState;
				oController._setFacetFilterState(oController.oViewState.FacetFilterState);
			}
		},

		doNothing : function() {
		}
	}
};

// Transition Table
i2d.pp.mrpcockpit.reuse.util.StateMachine.aStateTable = [{
	transition : "1",
	currentState : i2d.pp.mrpcockpit.reuse.util.StateMachine.oState.initial,
	event : i2d.pp.mrpcockpit.reuse.util.StateMachine.oEvent.start,
	action : i2d.pp.mrpcockpit.reuse.util.StateMachine.oAction.getVariantDataById,
	actionName : "getVariantDataById",
	newState : i2d.pp.mrpcockpit.reuse.util.StateMachine.oState.waitVariantData
},

{
	transition : "2",
	currentState : i2d.pp.mrpcockpit.reuse.util.StateMachine.oState.waitVariantData,
	event : i2d.pp.mrpcockpit.reuse.util.StateMachine.oEvent.varDataReceived,
	action : i2d.pp.mrpcockpit.reuse.util.StateMachine.oAction.getFacetAndTableData,
	actionName : "getFacetAndTableData",
	newState : i2d.pp.mrpcockpit.reuse.util.StateMachine.oState.waitFacetOrTableData
}, {
	transition : "3",
	currentState : i2d.pp.mrpcockpit.reuse.util.StateMachine.oState.waitFacetOrTableData,
	event : i2d.pp.mrpcockpit.reuse.util.StateMachine.oEvent.facetDataReceived,
	action : i2d.pp.mrpcockpit.reuse.util.StateMachine.oAction.setFacetFilterVariant,
	actionName : "setFacetFilterVariant",
	newState : i2d.pp.mrpcockpit.reuse.util.StateMachine.oState.started
}, {
	transition : "4",
	currentState : i2d.pp.mrpcockpit.reuse.util.StateMachine.oState.waitFacetOrTableData,
	event : i2d.pp.mrpcockpit.reuse.util.StateMachine.oEvent.tableDataReceived,
	action : i2d.pp.mrpcockpit.reuse.util.StateMachine.oAction.doNothing,
	actionName : "doNothing",
	newState : i2d.pp.mrpcockpit.reuse.util.StateMachine.oState.started
}, {
	transition : "5",
	currentState : i2d.pp.mrpcockpit.reuse.util.StateMachine.oState.started,
	event : i2d.pp.mrpcockpit.reuse.util.StateMachine.oEvent.aORButtonPressed,
	action : i2d.pp.mrpcockpit.reuse.util.StateMachine.oAction.startAORDialog,
	actionName : "startAORDialog",
	newState : i2d.pp.mrpcockpit.reuse.util.StateMachine.oState.waitAORDialogFinished
}, {
	transition : "6",
	currentState : i2d.pp.mrpcockpit.reuse.util.StateMachine.oState.waitAORDialogFinished,
	event : i2d.pp.mrpcockpit.reuse.util.StateMachine.oEvent.aORDialogFinished,
	action : i2d.pp.mrpcockpit.reuse.util.StateMachine.oAction.getFacetAndTableData,
	actionName : "getFacetAndTableData",
	newState : i2d.pp.mrpcockpit.reuse.util.StateMachine.oState.waitFacetDataForNewAOR
}, {
	transition : "7",
	currentState : i2d.pp.mrpcockpit.reuse.util.StateMachine.oState.waitFacetDataForNewAOR,
	event : i2d.pp.mrpcockpit.reuse.util.StateMachine.oEvent.facetDataReceived,
	action : i2d.pp.mrpcockpit.reuse.util.StateMachine.oAction.restoreFacetFilterState,
	actionName : "restoreFacetFilterState",
	newState : i2d.pp.mrpcockpit.reuse.util.StateMachine.oState.started
}, {
	transition : "8",
	currentState : i2d.pp.mrpcockpit.reuse.util.StateMachine.oState.started,
	event : i2d.pp.mrpcockpit.reuse.util.StateMachine.oEvent.variantSelected,
	action : i2d.pp.mrpcockpit.reuse.util.StateMachine.oAction.getVariantDataByName,
	actionName : "getVariantDataByName",
	newState : i2d.pp.mrpcockpit.reuse.util.StateMachine.oState.waitSelectedVariantData
}, {
	transition : "9",
	currentState : i2d.pp.mrpcockpit.reuse.util.StateMachine.oState.started,
	event : i2d.pp.mrpcockpit.reuse.util.StateMachine.oEvent.filterChanged,
	action : i2d.pp.mrpcockpit.reuse.util.StateMachine.oAction.getTableData,
	actionName : "getTableData",
	newState : i2d.pp.mrpcockpit.reuse.util.StateMachine.oState.waitFacetOrTableData
}, {
	transition : "10",
	currentState : i2d.pp.mrpcockpit.reuse.util.StateMachine.oState.waitFirstAORDialogFinished,
	event : i2d.pp.mrpcockpit.reuse.util.StateMachine.oEvent.firstAORDialogFinished,
	action : i2d.pp.mrpcockpit.reuse.util.StateMachine.oAction.getFacetAndTableData,
	actionName : "getFacetAndTableData",
	newState : i2d.pp.mrpcockpit.reuse.util.StateMachine.oState.waitFacetOrTableData
}, {
	transition : "11",
	currentState : i2d.pp.mrpcockpit.reuse.util.StateMachine.oState.waitFacetOrTableData,
	event : i2d.pp.mrpcockpit.reuse.util.StateMachine.oEvent.aORUndefined,
	action : i2d.pp.mrpcockpit.reuse.util.StateMachine.oAction.startFirstAORDialog,
	actionName : "startFirstAORDialog",
	newState : i2d.pp.mrpcockpit.reuse.util.StateMachine.oState.waitFirstAORDialogFinished
}, {
	transition : "12",
	currentState : i2d.pp.mrpcockpit.reuse.util.StateMachine.oState.started,
	event : i2d.pp.mrpcockpit.reuse.util.StateMachine.oEvent.facetDataReceived,
	action : i2d.pp.mrpcockpit.reuse.util.StateMachine.oAction.setFacetFilterVariant,
	actionName : "setFacetFilterVariant",
	newState : i2d.pp.mrpcockpit.reuse.util.StateMachine.oState.started
}, {
	transition : "13",
	currentState : i2d.pp.mrpcockpit.reuse.util.StateMachine.oState.started,
	event : i2d.pp.mrpcockpit.reuse.util.StateMachine.oEvent.tableDataReceived,
	action : i2d.pp.mrpcockpit.reuse.util.StateMachine.oAction.doNothing,
	actionName : "doNothing",
	newState : i2d.pp.mrpcockpit.reuse.util.StateMachine.oState.started
}, {
	transition : "14",
	currentState : i2d.pp.mrpcockpit.reuse.util.StateMachine.oState.waitFacetDataForNewAOR,
	event : i2d.pp.mrpcockpit.reuse.util.StateMachine.oEvent.tableDataReceived,
	action : i2d.pp.mrpcockpit.reuse.util.StateMachine.oAction.doNothing,
	actionName : "doNothing",
	newState : i2d.pp.mrpcockpit.reuse.util.StateMachine.oState.waitFacetDataForNewAOR
}, {
	transition : "15",
	currentState : i2d.pp.mrpcockpit.reuse.util.StateMachine.oState.started,
	event : i2d.pp.mrpcockpit.reuse.util.StateMachine.oEvent.tableChanged,
	action : i2d.pp.mrpcockpit.reuse.util.StateMachine.oAction.getTableData,
	actionName : "getTableData",
	newState : i2d.pp.mrpcockpit.reuse.util.StateMachine.oState.waitFacetOrTableData
}, {
	transition : "16",
	currentState : i2d.pp.mrpcockpit.reuse.util.StateMachine.oState.waitFacetOrTableData,
	event : i2d.pp.mrpcockpit.reuse.util.StateMachine.oEvent.noFacetDataReceived,
	action : i2d.pp.mrpcockpit.reuse.util.StateMachine.oAction.doNothing,
	actionName : "doNothing",
	newState : i2d.pp.mrpcockpit.reuse.util.StateMachine.oState.started
}, {
	transition : "17",
	currentState : i2d.pp.mrpcockpit.reuse.util.StateMachine.oState.waitSelectedVariantData,
	event : i2d.pp.mrpcockpit.reuse.util.StateMachine.oEvent.varDataReceived,
	action : i2d.pp.mrpcockpit.reuse.util.StateMachine.oAction.getTableData,
	actionName : "getTableData",
	newState : i2d.pp.mrpcockpit.reuse.util.StateMachine.oState.waitFacetOrTableData
}, {
	transition : "18",
	currentState : i2d.pp.mrpcockpit.reuse.util.StateMachine.oState.started,
	event : i2d.pp.mrpcockpit.reuse.util.StateMachine.oEvent.varDataReceived,
	action : i2d.pp.mrpcockpit.reuse.util.StateMachine.oAction.getTableData,
	actionName : "getTableData",
	newState : i2d.pp.mrpcockpit.reuse.util.StateMachine.oState.waitFacetOrTableData
}, {
	transition : "19",
	currentState : i2d.pp.mrpcockpit.reuse.util.StateMachine.oState.waitAORDialogFinished,
	event : i2d.pp.mrpcockpit.reuse.util.StateMachine.oEvent.aORDialogCancelled,
	action : i2d.pp.mrpcockpit.reuse.util.StateMachine.oAction.doNothing,
	actionName : "doNothing",
	newState : i2d.pp.mrpcockpit.reuse.util.StateMachine.oState.started
}, {
	transition : "20",
	currentState : i2d.pp.mrpcockpit.reuse.util.StateMachine.oState.waitFacetDataForNewAOR,
	event : i2d.pp.mrpcockpit.reuse.util.StateMachine.oEvent.noFacetDataReceived,
	action : i2d.pp.mrpcockpit.reuse.util.StateMachine.oAction.doNothing,
	actionName : "doNothing",
	newState : i2d.pp.mrpcockpit.reuse.util.StateMachine.oState.started
}];

// Execute state machine
i2d.pp.mrpcockpit.reuse.util.StateMachine.runStateMachine = function(oController, sEvent) {
	oController.logger.info("-----------------------------------------------------------------");
	oController.logger.info("Current State: " + oController.sState);
	oController.logger.info("Event:         " + sEvent);
	for ( var i = 0; i < i2d.pp.mrpcockpit.reuse.util.StateMachine.aStateTable.length; i++) {
		var aEntry = i2d.pp.mrpcockpit.reuse.util.StateMachine.aStateTable[i];
		if ((aEntry.currentState == oController.sState) && (aEntry.event == sEvent)) {
			oController.logger.info("Transition:    " + aEntry.transition);
			oController.logger.info("Action:        " + aEntry.actionName);
			oController.logger.info("-->            " + aEntry.newState);
			oController.sState = aEntry.newState;
			aEntry.action(oController);
			break;
		}
	}
};
}; // end of i2d/pp/mrpcockpit/reuse/util/StateMachine.js
if ( !jQuery.sap.isDeclared('i2d.pp.mrpcockpit.reuse.util.Wave3CollaborationHelper') ) {
jQuery.sap.declare("i2d.pp.mrpcockpit.reuse.util.Wave3CollaborationHelper");
jQuery.sap.require('sap.ca.ui.message.message'); // unlisted dependency retained



i2d.pp.mrpcockpit.reuse.util.Wave3CollaborationHelper = {

		/**
		 * Set the OData Model that shall be used for the calls to the backend.
		 * 
		 * @memberOf i2d.pp.mrpcockpit.reuse.util.CollaborationHelper
		 */
		setODataModel : function(oModel, backendVersion) {
			this.oModelGlobal = oModel;
			this.backendVersion = backendVersion;
		},


	/**
	 * This method maps the old fields of wave 3 to wave 5
	 * 
	 * @memberOf Wave3CollaborationHelper
	 */
	_mapOData3ToOdata5 : function(oDataDialog) {

		oDataDialog.MRPElementChangedTotalQuantity = oDataDialog.MRPElementChangeOpenQuantity;
		oDataDialog.MRPElementOriginalTotalQty = oDataDialog.MRPElementOpenQuantity;
		oDataDialog.OrderQuantityUnitDcmls = oDataDialog.TargetQuantityUnitDcmls;
		oDataDialog.OrderUnitOfMeasureTechnicalName = oDataDialog.UnitOfMeasureTechnicalName;
	},

	/**
	 * This method maps the new fields of wave 5 to wave 3
	 * 
	 * @memberOf Wave3CollaborationHelper
	 */
	_mapOData5ToOdata3 : function(oDataDialog) {
		oDataDialog.MRPElementChangeOpenQuantity = oDataDialog.MRPElementChangedTotalQuantity;
		oDataDialog.MRPElementOpenQuantity = oDataDialog.MRPElementOriginalTotalQty;
		oDataDialog.TargetQuantityUnitDcmls = oDataDialog.OrderQuantityUnitDcmls;
		oDataDialog.UnitOfMeasureTechnicalName = oDataDialog.OrderUnitOfMeasureTechnicalName;
		oDataDialog.MRPElementItem = this._adaptItemIdForMM(oDataDialog.MRPElementItem);
	},

	/**
	 * The MM interfaces just work with a item id length of 5 characters. The rest of the app uses 6 characters for the
	 * item id. The decision was made to just chop the first "0" of the item id in order to be compliant to the required
	 * format of MM.
	 * 
	 * @memberOf Wave3CollaborationHelper
	 */
	_adaptItemIdForMM : function(sItemId) {
		var sItemIDResult = sItemId;
		if (sItemIDResult.length > 5) {
			sItemIDResult = sItemIDResult.substring(1);
		}
		return sItemIDResult;
	},

	/**
	 * This method reads a 'Change Request' from the backend.
	 * 
	 * @memberOf Wave3CollaborationHelper
	 */
	readRequest : function(oModel) {

		// ---------------------------------------------------------------------
		// OData: Change Request - Read
		// ---------------------------------------------------------------------
		var url = "/RequestNotes";
		var requestTab = null;

		// Build the URL and the filter condition
		var filter = "MRPElement eq '";
		filter += oModel.PurchaseOrderID;
		filter += "' and MRPElementItem eq '";
		filter += oModel.ItemID;
		filter += "' and MRPElementScheduleLine eq '";
		filter += oModel.ScheduleLineID;
		filter += "' and Type eq '";
		filter += oModel.Type;
		filter += "'";

		var oUrlParams = new Array();
		var tmp = "$filter=" + filter;
		oUrlParams.push(tmp);

		// Read Purchase Order
		this.oModelGlobal.read(url, null, oUrlParams, false, function(oData, oResponse) {
			requestTab = oResponse.data.results[0];
		}, function(oError) {
			requestTab = null;
		});

		return requestTab;
	},

	/**
	 * This method writes a 'Change Request' to the backend. Info: SAP type DATS has to be provided as
	 * "yyyy-MM-ddT00:00:00"
	 * 
	 * @memberOf Wave3CollaborationHelper
	 */
	writeRequest : function(oDataDialog, requestTab) {

		var flgSuccess = false;
		var oDateFormat = sap.ui.core.format.DateFormat.getDateTimeInstance({
			pattern : "yyyy-MM-dd"
		});

		// ---------------------------------------------------------------------
		// OData: Change Request - Write
		// ---------------------------------------------------------------------
		var url = "/RequestNotes";

		// Update Purchase Order
		var oData = {};
		// Keys
		oData.MRPElement = oDataDialog.MRPElement;
		oData.MRPElementItem = oDataDialog.MRPElementItem;
		oData.MRPElementScheduleLine = oDataDialog.MRPElementScheduleLine;

		// Fill that with the data from the model
		oData.Vendor = oDataDialog.Vendor; // ID with max 10 chars
		oData.MaterialShortageSolutionType = oDataDialog.MaterialShortageSolutionType;
		oData.SolutionRequestStatus = oDataDialog.SolutionRequestStatus;
		oData.MaterialID = oDataDialog.MaterialID;
		oData.SolutionRequestNote = oDataDialog.SolutionRequestNote;
		oData.MaterialShortageSolnRequest = "";
		oData.DummyMrpReqNote = "";

		// Write the quantities
		oData.MRPElementTargetQuantity = (oDataDialog.MRPElementChangeOpenQuantity).toString();
		oData.MRPElementOriginalQuantity = (oDataDialog.MRPElementOpenQuantity).toString();
		// Write Target Date in 'DATS'
		var oDate = oDataDialog.MRPElementChgAvailyOrRqmtDate;
		oData.MRPElementTargetDate = oDateFormat.format(oDate) + "T00:00:00";
		// Write Original Date in 'DATS'
		oDate = oDataDialog.MRPElementAvailyOrRqmtDate;
		oData.MRPElementOriginalDate = oDateFormat.format(oDate) + "T00:00:00";

		this.oModelGlobal.create(url, oData, null, function() {
			flgSuccess = true;
		}, function(oError) {
			flgSuccess = false;
		});

		return flgSuccess;
	},
	/**
	 * This method writes a 'Change Request' to the backend. Info: SAP type DATS has to be provided as
	 * "yyyy-MM-ddT00:00:00"
	 * 
	 * @memberOf Wave3CollaborationHelper
	 */
	deleteShortageAccept : function(oModel, requestTab) {

		// map the fields to the old oData format
		this._mapOData5ToOdata3(oModel);

		var flgSuccess = false;
		var oDateFormat = sap.ui.core.format.DateFormat.getDateTimeInstance({
			pattern : "yyyy-MM-dd"
		});

		var materialshortagestartdate = oDateFormat.format(oModel.MaterialShortageStartDate) + "T00:00:00";
		var materialshortageenddate = oDateFormat.format(oModel.MaterialShortageEndDate) + "T00:00:00";

		// ---------------------------------------------------------------------
		// OData: Change Request - Write
		// ---------------------------------------------------------------------

		var url = "/AcceptedShortages(MaterialShortageProfile='" + oModel.MaterialShortageProfile
				+ "',MaterialShortageProfileCount='" + oModel.MaterialShortageProfileCount + "',MaterialID='"
				+ oModel.MaterialID + "',MRPPlant='" + oModel.MRPPlant + "',MRPArea='" + oModel.MRPArea
				+ "',MRPPlanningSegmentType='" + oModel.MRPPlanningSegmentType + "',MRPPlanningSegmentNumber='"
				+ oModel.MRPPlanningSegmentNumber + "',MaterialShortageStartDate=datetime'" + materialshortagestartdate
				+ "',MaterialShortageEndDate=datetime'" + materialshortageenddate

				+ "')";

		this.oModelGlobal.remove(url, {
			fnSuccess : function() {
				flgSuccess = "";
			},
			fnError : function(oError) {
				flgSuccess = false;
			}
		});

		return flgSuccess;
	},

	/**
	 * This method writes a 'Change Request' to the backend. Info: SAP type DATS has to be provided as
	 * "yyyy-MM-ddT00:00:00"
	 * 
	 * @memberOf Wave3CollaborationHelper
	 */
	writeShortageAccept : function(oDataDialog, requestTab) {

		// map the fields to the old oData format
		this._mapOData5ToOdata3(oDataDialog);

		var flgSuccess = false;
		var oDateFormat = sap.ui.core.format.DateFormat.getDateTimeInstance({
			pattern : "yyyy-MM-dd"
		});

		// ---------------------------------------------------------------------
		// OData: Accept Shortage - Write
		// ---------------------------------------------------------------------
		var url = "/AcceptedShortages";

		// Accept Shortage
		var oData = {};
		// Keys
		oData.MaterialShortageProfile = oDataDialog.MaterialShortageProfile;
		oData.MaterialShortageProfileCount = oDataDialog.MaterialShortageProfileCount;
		oData.MaterialID = oDataDialog.MaterialID;
		oData.MRPPlant = oDataDialog.MRPPlant;
		oData.MRPArea = oDataDialog.MRPArea;
		oData.MRPPlanningSegmentType = oDataDialog.MRPPlanningSegmentType;
		oData.MRPPlanningSegmentNumber = oDataDialog.MRPPlanningSegmentNumber;
		oData.MaterialShortageStartDate = oDateFormat.format(oDataDialog.MaterialShortageStartDate) + "T00:00:00";
		oData.MaterialShortageEndDate = oDateFormat.format(oDataDialog.MaterialShortageEndDate) + "T00:00:00";

		// additional Info
		oData.MaterialShortageQuantity = (oDataDialog.MaterialShortageQuantity).toString();
		oData.AcceptShortageNote = oDataDialog.SolutionRequestNote;

		this.oModelGlobal.create(url, oData, null, function() {
			flgSuccess = "";
		}, function(oError) {
			flgSuccess = false;
		});

		return flgSuccess;
	},
	/**
	 * This method deletes a 'Accepted shortage' to the backend. Info: SAP type DATS has to be provided as
	 * "yyyy-MM-ddT00:00:00"
	 * 
	 * @memberOf Wave3CollaborationHelper
	 */
	deleteShortageAcceptBatch : function(oModel, oHandler) {

		// map the fields to the old oData format
		this._mapOData5ToOdata3(oModel);

		var oDateFormat = sap.ui.core.format.DateFormat.getDateTimeInstance({
			pattern : "yyyy-MM-dd"
		});
		var aChangeOperations = [];
		var oData = {};

		var materialshortagestartdate = oDateFormat.format(oModel.MaterialShortageStartDate) + "T00:00:00";
		var materialshortageenddate = oDateFormat.format(oModel.MaterialShortageEndDate) + "T00:00:00";

		// ---------------------------------------------------------------------
		// OData: Change Request - Write
		// ---------------------------------------------------------------------

		var url = "/AcceptedShortages(MaterialShortageProfile='" + oModel.MaterialShortageProfile
				+ "',MaterialShortageProfileCount='" + oModel.MaterialShortageProfileCount + "',MaterialID='"
				+ oModel.MaterialID + "',MRPPlant='" + oModel.MRPPlant + "',MRPArea='" + oModel.MRPArea
				+ "',MRPPlanningSegmentType='" + oModel.MRPPlanningSegmentType + "',MRPPlanningSegmentNumber='"
				+ oModel.MRPPlanningSegmentNumber + "',MaterialShortageStartDate=datetime'" + encodeURIComponent(materialshortagestartdate)
				+ "',MaterialShortageEndDate=datetime'" + encodeURIComponent(materialshortageenddate) + "')";

		// Define the OData Delete operation
		var sODataRequestType = i2d.pp.mrpcockpit.reuse.util.CommonConstants.CRUD_DELETE;
		// Create the batch
		var oChangeOperation = this.oModelGlobal.createBatchOperation(url, sODataRequestType, oData, null);
		// Add the batch to the array of operations
		aChangeOperations.push(oChangeOperation);
		// Collect the batch operation
		this.oModelGlobal.addBatchChangeOperations(aChangeOperations);
		// Submit the batch - Asynchronous call
		this.oModelGlobal.submitBatch(oHandler.fnSuccess, oHandler.fnError, true);
		// Return 'success'
		return "";
	},

	/**
	 * This method writes a 'Change Request' to the backend. Info: SAP type DATS has to be provided as
	 * "yyyy-MM-ddT00:00:00"
	 * 
	 * @memberOf Wave3CollaborationHelper
	 */
	createShortageAcceptBatch : function(oDataDialog, oHandler) {

		// map the fields to the old oData format
		this._mapOData5ToOdata3(oDataDialog);

		var aChangeOperations = new Array();
		var oDateFormat = sap.ui.core.format.DateFormat.getDateTimeInstance({
			pattern : "yyyy-MM-dd"
		});

		// ---------------------------------------------------------------------
		// OData: Accept Shortage - Write
		// ---------------------------------------------------------------------
		var sODataRequestType = i2d.pp.mrpcockpit.reuse.util.CommonConstants.CRUD_CREATE;
		var url = "/AcceptedShortages";
		this.oModelGlobal.setUseBatch(true);
		this.oModelGlobal.clearBatch();

		// Accept Shortage
		var oData = {};
		// Keys
		oData.MaterialShortageProfile = oDataDialog.MaterialShortageProfile;
		oData.MaterialShortageProfileCount = oDataDialog.MaterialShortageProfileCount;
		oData.MaterialID = oDataDialog.MaterialID;
		oData.MRPPlant = oDataDialog.MRPPlant;
		oData.MRPArea = oDataDialog.MRPArea;
		oData.MRPPlanningSegmentType = oDataDialog.MRPPlanningSegmentType;
		oData.MRPPlanningSegmentNumber = oDataDialog.MRPPlanningSegmentNumber;
		oData.MaterialShortageStartDate = oDateFormat.format(oDataDialog.MaterialShortageStartDate) + "T00:00:00";
		oData.MaterialShortageEndDate = oDateFormat.format(oDataDialog.MaterialShortageEndDate) + "T00:00:00";

		// additional Info
		oData.MaterialShortageQuantity = (oDataDialog.MaterialShortageQuantity).toString();
		oData.AcceptShortageNote = oDataDialog.SolutionRequestNote;

		// Create the batch
		var oChangeOperation = this.oModelGlobal.createBatchOperation(url, sODataRequestType, oData, null);
		// Add the batch to the array of operations
		aChangeOperations.push(oChangeOperation);
		// Collect the batch operation
		this.oModelGlobal.addBatchChangeOperations(aChangeOperations);
		// Submit the batch - Asynchronous call
		this.oModelGlobal.submitBatch(oHandler.fnSuccess, oHandler.fnError, true);
		// Return 'success'
		return "";
	},

	/**
	 * This method writes a 'Purchase Order' to the backend. DATS has to be provided as "yyyy-MM-ddT00:00:00" Example
	 * Result: "ScheduleLines(PurchaseOrderID='4500003069',ItemID='00010',ScheduleLineID='0001'"
	 * 
	 * @memberOf Wave3CollaborationHelper
	 */

	writePurchaseOrder : function(oDataDialog, requestTab) {

		var flgSuccess = false;

		// ---------------------------------------------------------------------
		// OData: Purchase Order - Write
		// ---------------------------------------------------------------------
		var url = "/MMPurchaseOrderScheduleLines(PurchaseOrderID='";
		url += oDataDialog.MRPElement;
		url += "',ItemID='";
		url += oDataDialog.MRPElementItem;
		url += "',ScheduleLineID='";
		url += oDataDialog.MRPElementScheduleLine;
		url += "')";

		var oDate = oDataDialog.MRPElementChgAvailyOrRqmtDate;
		var oDateFormat = sap.ui.core.format.DateFormat.getDateTimeInstance({
			pattern : "yyyy-MM-dd"
		});

		// Update Purchase Order
		var oEntry = {};
		oEntry.DeliveryDate = oDateFormat.format(oDate) + "T00:00:00";
		oEntry.PurchasingDocumentOrderQty = (oDataDialog.MRPElementChangeOpenQuantity).toString();
		var oParams = {};

		// The ETag is calculated by the backend within the solution call and passed
		// to the client. It is sent back in the MM call in order to let the backend
		// check the consistency of the business object.
		oParams.sETag = "W/\"'" + oDataDialog.ChangeStateID + "'\"";

		oParams.fnSuccess = function() {
			flgSuccess = true;
		};
		oParams.fnError = function(oError) {
			flgSuccess = false;
		};
		oParams.bMerge = true;
		this.oModelGlobal.update(url, oEntry, oParams);
		return flgSuccess;
	},

	/**
	 * This method writes a 'Purchase Requisition' to the backend. DATS has to be provided as "yyyy-MM-ddT00:00:00"
	 * Example Result: "PurchaseReqItems(PurchaseRequisitionID='0010030950',ItemID='00010'"
	 * 
	 * @memberOf Wave3CollaborationHelper
	 */

	writePurchaseRequisition : function(oDataDialog, requestTab) {

		var flgSuccess = false;

		// ---------------------------------------------------------------------
		// OData: PP_PURCH_ORD_MRP_COCKPIT
		// ---------------------------------------------------------------------

		var url = "/MMPurchaseRequisitionItems(PurchaseRequisitionID='";
		url += oDataDialog.MRPElement;
		url += "',ItemID='";
		url += oDataDialog.MRPElementItem;
		url += "')";

		// Update Purchase Requisition
		var oDate = oDataDialog.MRPElementChgAvailyOrRqmtDate;
		var oDateFormat = sap.ui.core.format.DateFormat.getDateTimeInstance({
			pattern : "yyyy-MM-dd"
		});

		var oEntry = {};
		oEntry.DeliveryDate = oDateFormat.format(oDate) + "T00:00:00";
		oEntry.RequestedQuantity = (oDataDialog.MRPElementChangeOpenQuantity).toString();
		// Manually changed requisitions should always be fixed
		oEntry.PurchaseRequisitionIsFixed = true;

		// The ETag is calculated by the backend within the solution call and passed
		// to the client. It is sent back in the MM call in order to let the backend
		// check the consistency of the business object.
		var oParams = {};
		oParams.sETag = "W/\"'" + oDataDialog.ChangeStateID + "'\"";

		oParams.fnSuccess = function() {
			flgSuccess = true;
		};
		oParams.fnError = function(oError) {
			flgSuccess = false;
		};
		oParams.bMerge = true;

		this.oModelGlobal.update(url, oEntry, oParams);
		return flgSuccess;
	},

	/**
	 * This method writes a 'Purchase Order' to the backend. DATS has to be provided as "yyyy-MM-ddT00:00:00" Example
	 * Result: "ScheduleLines(PurchaseOrderID='4500003069',ItemID='00010',ScheduleLineID='0001'"
	 * 
	 * @memberOf Wave3CollaborationHelper
	 */
	writePurchaseOrderBatch : function(oDataDialog, requestTab, oHandler) {
		// map the fields to the old oData format
		this._mapOData5ToOdata3(oDataDialog);

		var aChangeOperations = new Array();
		var oDateFormat = sap.ui.core.format.DateFormat.getDateTimeInstance({
			pattern : "yyyy-MM-dd"
		});

		// ---------------------------------------------------------------------
		// Check mandatory data in the model
		// ---------------------------------------------------------------------
		if (!oDataDialog.MRPElement || !oDataDialog.MRPElementItem || !oDataDialog.MRPElementScheduleLine
				|| !oDataDialog.MaterialShortageSolutionType || !oDataDialog.MaterialID
				|| !oDataDialog.MRPElementChgAvailyOrRqmtDate || !oDataDialog.MRPElementAvailyOrRqmtDate
				|| !oDataDialog.MRPElementOpenQuantity || !oDataDialog.MRPElementChangeOpenQuantity) {
			// A mandatory field is missing - probably not provided by the solution
			// call.
			return "SOLUTION_DIALOG_MSG_MANDATORY_KEY_DATA_MISSING";
		}

		// ---------------------------------------------------------------------
		// OData: Purchase Order - Write
		// ---------------------------------------------------------------------

		this.oModelGlobal.setUseBatch(true);
		this.oModelGlobal.clearBatch();

		var url = "/MMPurchaseOrderScheduleLines(PurchaseOrderID='";
		url += oDataDialog.MRPElement;
		url += "',ItemID='";
		url += oDataDialog.MRPElementItem;
		url += "',ScheduleLineID='";
		url += oDataDialog.MRPElementScheduleLine;
		url += "')";

		// Update Purchase Order
		var oEntry = {};
		var oDate = oDataDialog.MRPElementChgAvailyOrRqmtDate;
		oEntry.DeliveryDate = oDateFormat.format(oDate) + "T00:00:00";
		oEntry.PurchasingDocumentOrderQty = (oDataDialog.MRPElementChangeOpenQuantity).toString();

		// The ETag is calculated by the backend within the solution call and passed
		// to the client. It is sent back in the MM call in order to let the backend
		// check the consistency of the business object.
		var oParams = {};
		oParams.sETag = "W/\"'" + oDataDialog.ChangeStateID + "'\"";

		// MERGE = Update
		var oChangeOperationPO = this.oModelGlobal.createBatchOperation(url, "MERGE", oEntry, oParams);

		aChangeOperations.push(oChangeOperationPO);

		// ---------------------------------------------------------------------
		// OData: Change Request - Write
		// ---------------------------------------------------------------------

		url = "/RequestNotes";

		// Keys
		var oData = {};
		oData.MRPElement = oDataDialog.MRPElement;
		oData.MRPElementItem = oDataDialog.MRPElementItem;
		oData.MRPElementScheduleLine = oDataDialog.MRPElementScheduleLine;

		// Fill that with the data from the model
		oData.Vendor = oDataDialog.Vendor; // ID with max 10 chars
		oData.MaterialShortageSolutionType = oDataDialog.MaterialShortageSolutionType;
		oData.SolutionRequestStatus = oDataDialog.SolutionRequestStatus;
		oData.MaterialID = oDataDialog.MaterialID;
		oData.SolutionRequestNote = oDataDialog.SolutionRequestNote;
		oData.MaterialShortageSolnRequest = "";
		oData.DummyMrpReqNote = "";

		// Write the quantities
		oData.MRPElementTargetQuantity = (oDataDialog.MRPElementChangeOpenQuantity).toString();
		oData.MRPElementOriginalQuantity = (oDataDialog.MRPElementOpenQuantity).toString();
		// Write Target Date in 'DATS'
		var oDate = oDataDialog.MRPElementChgAvailyOrRqmtDate;
		oData.MRPElementTargetDate = oDateFormat.format(oDate) + "T00:00:00";
		// Write Original Date in 'DATS'
		oDate = oDataDialog.MRPElementAvailyOrRqmtDate;
		oData.MRPElementOriginalDate = oDateFormat.format(oDate) + "T00:00:00";

		// For Rel-1.1 we don't write Change Requests at all
		// POST = Create
		// var oChangeOperationCR = this.oModelGlobal.createBatchOperation(url, "POST", oData, null);
		// aChangeOperations.push(oChangeOperationCR);

		// ---------------------------------------------------------------------
		// Call the batch update
		// ---------------------------------------------------------------------

		this.oModelGlobal.addBatchChangeOperations(aChangeOperations);

		// Asynchronous call
		this.oModelGlobal.submitBatch(oHandler.fnSuccess, oHandler.fnError, true);

		return "";
	},

	/**
	 * This method writes a 'Purchase Requisition' to the backend. DATS has to be provided as "yyyy-MM-ddT00:00:00"
	 * Example Result: "PurchaseReqItems(PurchaseRequisitionID='0010030950',ItemID='00010'"
	 * 
	 * @memberOf Wave3CollaborationHelper
	 */
	writePurchaseRequisitionBatch : function(oDataDialog, requestTab, oHandler) {
		// map the fields to the old oData format
		this._mapOData5ToOdata3(oDataDialog);

		var aChangeOperations = new Array();
		var oDateFormat = sap.ui.core.format.DateFormat.getDateTimeInstance({
			pattern : "yyyy-MM-dd"
		});

		// ---------------------------------------------------------------------
		// Check mandatory data in the model
		// ---------------------------------------------------------------------
		if (!oDataDialog.MRPElement || !oDataDialog.MRPElementItem || !oDataDialog.MaterialShortageSolutionType
				|| !oDataDialog.MaterialID || !oDataDialog.MRPElementChgAvailyOrRqmtDate
				|| !oDataDialog.MRPElementAvailyOrRqmtDate || !oDataDialog.MRPElementOpenQuantity
				|| !oDataDialog.MRPElementChangeOpenQuantity) {
			// A mandatory field is missing - probably not provided by the solution
			// call.
			return "SOLUTION_DIALOG_MSG_MANDATORY_KEY_DATA_MISSING";
		}

		// ---------------------------------------------------------------------
		// OData: Purchase Requisition Write
		// ---------------------------------------------------------------------

		this.oModelGlobal.setUseBatch(true);
		this.oModelGlobal.clearBatch();

		var url = "/MMPurchaseRequisitionItems(PurchaseRequisitionID='";
		url += oDataDialog.MRPElement;
		url += "',ItemID='";
		url += oDataDialog.MRPElementItem;
		url += "')";

		// Update Purchase Requisition
		var oEntry = {};
		var oDate = oDataDialog.MRPElementChgAvailyOrRqmtDate;
		oEntry.DeliveryDate = oDateFormat.format(oDate) + "T00:00:00";
		oEntry.RequestedQuantity = (oDataDialog.MRPElementChangeOpenQuantity).toString();
		// Manually changed requisitions should always be fixed
		oEntry.PurchaseRequisitionIsFixed = true;

		// The ETag is calculated by the backend within the solution call and passed
		// to the client. It is sent back in the MM call in order to let the backend
		// check the consistency of the business object.
		var oParams = {};
		oParams.sETag = "W/\"'" + oDataDialog.ChangeStateID + "'\"";

		// MERGE = Update
		var oChangeOperationPR = this.oModelGlobal.createBatchOperation(url, "MERGE", oEntry, oParams);

		aChangeOperations.push(oChangeOperationPR);

		// ---------------------------------------------------------------------
		// OData: Change Request - Write
		// ---------------------------------------------------------------------

		url = "/RequestNotes";

		// Keys
		var oData = {};
		oData.MRPElement = oDataDialog.MRPElement;
		oData.MRPElementItem = oDataDialog.MRPElementItem;
		oData.MRPElementScheduleLine = oDataDialog.MRPElementScheduleLine;

		// Fill that with the data from the model
		oData.Vendor = oDataDialog.Vendor; // ID with max 10 chars
		oData.MaterialShortageSolutionType = oDataDialog.MaterialShortageSolutionType;
		oData.SolutionRequestStatus = oDataDialog.SolutionRequestStatus;
		oData.MaterialID = oDataDialog.MaterialID;
		oData.SolutionRequestNote = oDataDialog.SolutionRequestNote;
		oData.MaterialShortageSolnRequest = "";
		oData.DummyMrpReqNote = "";

		// Write the quantities
		oData.MRPElementTargetQuantity = (oDataDialog.MRPElementChangeOpenQuantity).toString();
		oData.MRPElementOriginalQuantity = (oDataDialog.MRPElementOpenQuantity).toString();
		// Write Target Date in 'DATS'
		var oDate = oDataDialog.MRPElementChgAvailyOrRqmtDate;
		oData.MRPElementTargetDate = oDateFormat.format(oDate) + "T00:00:00";
		// Write Original Date in 'DATS'
		oDate = oDataDialog.MRPElementAvailyOrRqmtDate;
		oData.MRPElementOriginalDate = oDateFormat.format(oDate) + "T00:00:00";

		// For Rel-1.1 we don't write Change Requests at all
		// POST = Create
		// var oChangeOperationCR = this.oModelGlobal.createBatchOperation(url, "POST", oData, null);
		// aChangeOperations.push(oChangeOperationCR);

		// ---------------------------------------------------------------------
		// Call the batch update
		// ---------------------------------------------------------------------

		this.oModelGlobal.addBatchChangeOperations(aChangeOperations);

		// Asynchronous call
		this.oModelGlobal.submitBatch(oHandler.fnSuccess, oHandler.fnError, true);

		return "";

	},

	/**
	 * This method writes a 'Purchase Order' to the backend. DATS has to be provided as "yyyy-MM-ddT00:00:00" Example
	 * Result:
	 * 
	 * @memberOf Wave3CollaborationHelper
	 */

	createPurchaseOrderBatch : function(oDataDialog, requestTab, oHandler) {
		// map the fields to the old oData format
		this._mapOData5ToOdata3(oDataDialog);

		var aChangeOperations = new Array();
		var oDateFormat = sap.ui.core.format.DateFormat.getDateTimeInstance({
			pattern : "yyyy-MM-dd"
		});
		var Constants = i2d.pp.mrpcockpit.reuse.util.CommonConstants;
		// Set these keys hard-coded; Requirement of backend.
		var MRPElementItem = "00010";
		var MRPElementScheduleLine = "0001";
		var AccountAssignmentID = "01";

		// ---------------------------------------------------------------------
		// Check mandatory data in the model
		// ---------------------------------------------------------------------
		if (!oDataDialog.MRPElementChgAvailyOrRqmtDate || !MRPElementItem || !MRPElementScheduleLine
				|| !oDataDialog.PurchasingOrganisation || !oDataDialog.MRPElementChangeOpenQuantity
				|| !oDataDialog.ReceivingPlant || !oDataDialog.MaterialID || !oDataDialog.MaterialBaseUnit
				|| !AccountAssignmentID) {
			// A mandatory field is missing - probably not provided by the solution
			// call.
			return "SOLUTION_DIALOG_MSG_MANDATORY_KEY_DATA_MISSING";
		}
		if (oDataDialog.MaterialShortageSolutionType === Constants.SOLUTIONTYPE_PO_CREATE && !oDataDialog.Vendor) { // "PO_CREATE"
			// no vendor is provided for the creation of the PO
			// this scenario should not be possible, as unsourced cards are not suggested by the backend
			return "SOLUTION_DIALOG_MSG_VENDOR_MISSING_PO";
		}
		if (oDataDialog.MaterialShortageSolutionType === Constants.SOLUTIONTYPE_TO_CREATE && !oDataDialog.SupplyingPlant) { // "TO_CREATE"
			// no supplying plant is provided for the creation of the PO
			// this scenario should not be possible, as unsourced cards are not suggested by the backend
			return "SOLUTION_DIALOG_MSG_SUPPLYING_PLANT_MISSING_TO";
			// flgSuccess;
		}


		// ---------------------------------------------------------------------
		// OData: Purchase Order - Schedule Lines
		// ---------------------------------------------------------------------
		var oSchedLine = {};
		var oDate = oDataDialog.MRPElementChgAvailyOrRqmtDate;
		oSchedLine.ItemID = MRPElementItem;
		oSchedLine.ScheduleLineID = MRPElementScheduleLine;
		if (!oDate) {
			oSchedLine.DeliveryDate = " ";
		} else {
			oSchedLine.DeliveryDate = oDateFormat.format(oDate) + "T00:00:00";
		}
		oSchedLine.PurchasingDocumentOrderQty = this.replaceEmptyValues((oDataDialog.MRPElementChangeOpenQuantity)
				.toString());

		var a = new Array();
		a.push(oSchedLine);

		// ---------------------------------------------------------------------
		// OData: Purchase Order - Account Assignment
		// ---------------------------------------------------------------------
		var oAccountAssignment = {};
		oAccountAssignment.ItemID = MRPElementItem;
		oAccountAssignment.AccountAssignmentID = AccountAssignmentID;
		oAccountAssignment.SalesOrder = this.replaceEmptyValues(oDataDialog.SalesOrder);
		oAccountAssignment.SalesOrderItem = this.replaceEmptyValues(oDataDialog.SalesOrderItem);
		oAccountAssignment.WBSElement = this.replaceEmptyValues(oDataDialog.WBSElement);
		var e = new Array();
		e.push(oAccountAssignment);

		// ---------------------------------------------------------------------
		// OData: Purchase Order - Items
		// ---------------------------------------------------------------------
		var oItems = {};

		oItems.ItemID = MRPElementItem;
		oItems.AcctAssignmentCategory = this.replaceEmptyValues(oDataDialog.AcctAssignmentCategory);
		oItems.Material = this.replaceEmptyValues(oDataDialog.MaterialID);
		oItems.PurchasingDocumentOrderQty = this.replaceEmptyValues((oDataDialog.MRPElementChangeOpenQuantity).toString());
		oItems.PurgDocOrderQuantityUnit = this.replaceEmptyValues(oDataDialog.MaterialBaseUnit);
		oItems.ReceivingPlant = this.replaceEmptyValues(oDataDialog.ReceivingPlant);
		oItems.SupplyingStorageLocation = this.replaceEmptyValues(oDataDialog.SupplyingStorageLocation);
		oItems.ReceivingStorageLocation = this.replaceEmptyValues(oDataDialog.ReceivingStorageLocation);
		oItems.PurchasingInfoRecord = this.replaceEmptyValues(oDataDialog.PurchasingInfoRecord);
		oItems.PurchaseContract = this.replaceEmptyValues(oDataDialog.PurchaseContract);
		oItems.PurchaseContractItem = this.replaceEmptyValues(oDataDialog.PurchaseContractItem);
		oItems.MaterialGoodsReceiptDuration = this.replaceEmptyValues(oDataDialog.MaterialGoodsReceiptDuration);
		oItems.MMPurchaseOrderScheduleLines = a;
		oItems.MMPurchaseOrderAccAssignments = e;
		var b = new Array();
		b.push(oItems);

		// ---------------------------------------------------------------------
		// OData: Purchase Order - Header
		// ---------------------------------------------------------------------
		var url = "/MMPurchaseOrderHeaders";
		var oHeader = {};
		// oHeader.PurchaseOrderType = oDataDialog.PurchaseOrderType;
		oHeader.PurchasingOrganisation = oDataDialog.PurchasingOrganisation;
		oHeader.PurchasingGroup = oDataDialog.PurchasingGroup;
		oHeader.CompanyCode = oDataDialog.CompanyCode;

		oHeader.Vendor = this.replaceEmptyValues(oDataDialog.Vendor);

		oHeader.SupplyingPlant = this.replaceEmptyValues(oDataDialog.SupplyingPlant);

		if (oDataDialog.MaterialShortageSolutionType === Constants.SOLUTIONTYPE_TO_CREATE) {
			oHeader.StockTransportOrderIndicator = true; // internal procurement
		} else {
			oHeader.StockTransportOrderIndicator = false; // external procurement
		}
		oHeader.MMPurchaseOrderItems = b;

		// POST = Create
		var oCreateOperationPO = this.oModelGlobal.createBatchOperation(url, "POST", oHeader, null);
		aChangeOperations.push(oCreateOperationPO);

		// ---------------------------------------------------------------------
		// Call the batch update
		// ---------------------------------------------------------------------
		this.oModelGlobal.addBatchChangeOperations(aChangeOperations);
		// Asynchronous call
		this.oModelGlobal.submitBatch(oHandler.fnSuccess, oHandler.fnError, true);
		return "";
	},

	replaceEmptyValues : function(value) {
		// Due to an issue in the Gateway we have to provide a blank instead of empty values
		// see internal message 0003720323 2013
		if (!value) {
			return " ";
		} else {
			return value;
		}
	},

	/**
	 * This method writes a 'Purchase Requisition' to the backend. DATS has to be provided as "yyyy-MM-ddT00:00:00"
	 * Example Result:
	 * 
	 * @memberOf Wave3CollaborationHelper
	 */

	createPurchaseRequisitionBatch : function(oDataDialog, requestTab, oHandler) {
		// map the fields to the old oData format
		this._mapOData5ToOdata3(oDataDialog);

		var aChangeOperations = new Array();
		var oDateFormat = sap.ui.core.format.DateFormat.getDateTimeInstance({
			pattern : "yyyy-MM-dd"
		});
		var Constants = i2d.pp.mrpcockpit.reuse.util.CommonConstants;
		// Set these keys hard-coded; Requirement of backend.
		var MRPElementItem = "00010";
		// var MRPElementScheduleLine = "0001";
		var AccountAssignmentID = "01";

		// // ---------------------------------------------------------------------
		// // Check mandatory data in the model
		// // ---------------------------------------------------------------------
		if (!oDataDialog.MRPElementChgAvailyOrRqmtDate || !MRPElementItem || !oDataDialog.MRPElementChangeOpenQuantity
				|| !oDataDialog.MaterialID || !oDataDialog.MaterialBaseUnit || !AccountAssignmentID) {
			// A mandatory field is missing - probably not provided by the solution
			// call.
			return "SOLUTION_DIALOG_MSG_MANDATORY_KEY_DATA_MISSING";
		}

		if (oDataDialog.MaterialShortageSolutionType === Constants.SOLUTIONTYPE_PO_CREATE && !oDataDialog.Vendor) {
			// create PR
			// no vendor is provided for the creation of the PR
			// this scenario should not possible as unsourced cards are not provided by the backend
			return "SOLUTION_DIALOG_MSG_VENDOR_MISSING_PR"; // flgSuccess;
		}
		if (oDataDialog.MaterialShortageSolutionType === Constants.SOLUTIONTYPE_TO_CREATE && !oDataDialog.SupplyingPlant) {
			// no supplying plant is provided for the creation of the TR
			// this scenario should not possible as unsourced cards are not provided by the backend
			return "SOLUTION_DIALOG_MSG_SUPPLYING_PLANT_MISSING_TR";
		}
		if (oDataDialog.Vendor && !oDataDialog.PurchasingOrganisation) {
			// in case a vendor is provided the purchasing organization is mandatory
			// the purchasing organization should be provided by the solution call
			return "SOLUTION_DIALOG_MSG_PURCHASING_ORGANIZATION_MISSING_PR";
		}


		// ---------------------------------------------------------------------
		// OData: Purchase Requisition - Account Assignment
		// ---------------------------------------------------------------------
		var oAccountAssignment = {};
		oAccountAssignment.ItemID = MRPElementItem;
		oAccountAssignment.AccountAssignmentID = AccountAssignmentID;
		oAccountAssignment.SalesOrder = this.replaceEmptyValues(oDataDialog.SalesOrder);
		oAccountAssignment.SalesOrderItem = this.replaceEmptyValues(oDataDialog.SalesOrderItem);
		oAccountAssignment.WBSElement = this.replaceEmptyValues(oDataDialog.WBSElement);

		var e = new Array();
		e.push(oAccountAssignment);

		// ---------------------------------------------------------------------
		// OData: Purchase Requisition - Items
		// ---------------------------------------------------------------------
		var oItems = {};
		var oDate = oDataDialog.MRPElementChgAvailyOrRqmtDate;
		oItems.ItemID = MRPElementItem;
		oItems.PurchasingOrganisation = this.replaceEmptyValues(oDataDialog.PurchasingOrganisation);
		oItems.PurchasingGroup = this.replaceEmptyValues(oDataDialog.PurchasingGroup);
		// oItems.PurchasingDocumentItemCategory = this.replaceEmptyValues(oDataDialog.PurchasingDocumentCategory);
		oItems.PurchasingDocumentItemCategory = this.replaceEmptyValues(oDataDialog.MaterialProcurementType);
		oItems.SupplyingPlant = this.replaceEmptyValues(oDataDialog.SupplyingPlant);
		oItems.AcctAssignmentCategory = this.replaceEmptyValues(oDataDialog.AcctAssignmentCategory);
		oItems.Material = this.replaceEmptyValues(oDataDialog.MaterialID);
		oItems.PurReqQuantityUnit = this.replaceEmptyValues(oDataDialog.MaterialBaseUnit);
		oItems.ReceivingPlant = this.replaceEmptyValues(oDataDialog.ReceivingPlant);
		oItems.SupplyingStorageLocation = this.replaceEmptyValues(oDataDialog.SupplyingStorageLocation);
		oItems.ReceivingStorageLocation = this.replaceEmptyValues(oDataDialog.ReceivingStorageLocation);
		oItems.PurchasingInfoRecord = this.replaceEmptyValues(oDataDialog.PurchasingInfoRecord);
		oItems.PurchaseContract = this.replaceEmptyValues(oDataDialog.PurchaseContract);
		oItems.PurchaseContractItem = this.replaceEmptyValues(oDataDialog.PurchaseContractItem);
		oItems.RequestedQuantity = this.replaceEmptyValues((oDataDialog.MRPElementChangeOpenQuantity).toString());
		oItems.FixedVendor = this.replaceEmptyValues(oDataDialog.Vendor);

		if (!oDate) {
			oItems.DeliveryDate = " ";
		} else {
			oItems.DeliveryDate = oDateFormat.format(oDate) + "T00:00:00";
		}

		oItems.MaterialGoodsReceiptDuration = this.replaceEmptyValues(oDataDialog.MaterialGoodsReceiptDuration);
		oItems.MMPurchaseReqAccAssignments = e;

		// Manually created requisitions should always be fixed
		oItems.PurchaseRequisitionIsFixed = true;

		var b = new Array();
		b.push(oItems);

		// ---------------------------------------------------------------------
		// OData: Purchase Requisition - Header
		// ---------------------------------------------------------------------
		var url = "/MMPurchaseRequisitionHeaders";
		var oHeader = {};
		oHeader.MMPurchaseRequisitionItems = b;

		// POST = Create
		var oCreateOperationPR = this.oModelGlobal.createBatchOperation(url, "POST", oHeader, null);
		aChangeOperations.push(oCreateOperationPR);

		// ---------------------------------------------------------------------
		// Call the batch update
		// ---------------------------------------------------------------------
		this.oModelGlobal.addBatchChangeOperations(aChangeOperations);
		// Asynchronous call
		this.oModelGlobal.submitBatch(oHandler.fnSuccess, oHandler.fnError, true);

		return "";
	},

	/**
	 * This method creates a 'Purchase Order' based on an existing 'Purchase Requisition'. DATS has to be provided as
	 * "yyyy-MM-ddT00:00:00" Example Result:
	 * 
	 * @memberOf Wave3CollaborationHelper
	 */
	convertPurchaseRequisitionBatch : function(oDataDialog, requestTab, oHandler) {

		var aChangeOperations = new Array();
		var oDateFormat = sap.ui.core.format.DateFormat.getDateTimeInstance({
			pattern : "yyyy-MM-dd"
		});
		var Constants = i2d.pp.mrpcockpit.reuse.util.CommonConstants;
		// Set these keys hard-coded; Requirement of backend.
		var MRPElementItem = "00010";
		var MRPElementScheduleLine = "0001";

		// ---------------------------------------------------------------------
		// Check mandatory data in the model
		// ---------------------------------------------------------------------
		if (!oDataDialog.MRPElementChgAvailyOrRqmtDate || !MRPElementItem || !MRPElementScheduleLine
				|| !oDataDialog.MRPElementChangeOpenQuantity || !oDataDialog.MRPElement) {
			// A mandatory field is missing - probably not provided by the solution
			// call.
			return "SOLUTION_DIALOG_MSG_MANDATORY_KEY_DATA_MISSING";
		}

		if ((oDataDialog.MaterialShortageSolutionType === Constants.SOLUTIONTYPE_PR_CHANGE
				|| oDataDialog.MaterialShortageSolutionType === Constants.SOLUTIONTYPE_PR_INCREASE || oDataDialog.MaterialShortageSolutionType === Constants.SSOLUTIONTYPE_PR_RESCHEDULE)
				&& !oDataDialog.Vendor) {
			// no vendor is provided for the creation of the PO
			// this scenario should not possible as unsourced cards are not provided by the backend
			return "SOLUTION_DIALOG_MSG_VENDOR_MISSING_PO";
		}

		if ((oDataDialog.MaterialShortageSolutionType === Constants.SOLUTIONTYPE_TOR_CHANGE
				|| oDataDialog.MaterialShortageSolutionType === Constants.SOLUTIONTYPE_TOR_INCREASE || oDataDialog.MaterialShortageSolutionType === Constants.SOLUTIONTYPE_TOR_RESCHEDULE)
				&& !oDataDialog.SupplyingPlant) {
			// no supplying plant is provided for the creation of the TO
			// this scenario should not possible as unsourced cards are not provided by the backend
			return "SOLUTION_DIALOG_MSG_SUPPLYING_PLANT_MISSING_TO";
		}


		// ---------------------------------------------------------------------
		// OData: Purchase Order - Schedule Lines
		// ---------------------------------------------------------------------
		var oSchedLine = {};
		var oDate = oDataDialog.MRPElementChgAvailyOrRqmtDate;
		oSchedLine.ItemID = MRPElementItem;

		oSchedLine.ScheduleLineID = MRPElementScheduleLine;

		if (!oDate) {
			oSchedLine.DeliveryDate = " ";
		} else {
			oSchedLine.DeliveryDate = oDateFormat.format(oDate) + "T00:00:00";
		}

		oSchedLine.PurchasingDocumentOrderQty = this.replaceEmptyValues((oDataDialog.MRPElementChangeOpenQuantity)
				.toString());

		var a = new Array();
		a.push(oSchedLine);

		// ---------------------------------------------------------------------
		// OData: Purchase Order - Items
		// ---------------------------------------------------------------------
		var oItems = {};
		oItems.ItemID = MRPElementItem;
		oItems.MaterialGoodsReceiptDuration = this.replaceEmptyValues(oDataDialog.MaterialGoodsReceiptDuration);
		oItems.PurchaseRequisition = this.replaceEmptyValues(oDataDialog.MRPElement);
		oItems.PurchaseRequisitionItem = MRPElementItem;
		oItems.MMPurchaseOrderScheduleLines = a;
		var b = new Array();
		b.push(oItems);

		// ---------------------------------------------------------------------
		// OData: Purchase Order - Header
		// ---------------------------------------------------------------------
		var url = "/MMPurchaseOrderHeaders";
		var oHeader = {};

		// set indicator in case a stock transport order is to be created
		if (oDataDialog.MaterialShortageSolutionType === Constants.SOLUTIONTYPE_TOR_CHANGE
				|| oDataDialog.SolutionTyp === Constants.SOLUTIONTYPE_TOR_INCREASE
				|| oDataDialog.SolutionTyp === Constants.SOLUTIONTYPE_TOR_RESCHEDULE) {
			oHeader.StockTransportOrderIndicator = true; // internal procurement --> create TO
		} else {
			oHeader.StockTransportOrderIndicator = false; // external procurement --> create PO
		}
		oHeader.MMPurchaseOrderItems = b;

		// POST = Create
		var oCreateOperationPO = this.oModelGlobal.createBatchOperation(url, "POST", oHeader, null);
		aChangeOperations.push(oCreateOperationPO);

		// ---------------------------------------------------------------------
		// Call the batch update
		// ---------------------------------------------------------------------
		this.oModelGlobal.addBatchChangeOperations(aChangeOperations);
		// Asynchronous call
		this.oModelGlobal.submitBatch(oHandler.fnSuccess, oHandler.fnError, true);

		return "";
	},

	/**
	 * This method extracts an error message out of a given XML which has the error message within the section <message>
	 * 
	 * @memberOf Wave3CollaborationHelper
	 */
	extractErrorMsgFromXml : function(sXml) {
		var sText = "";
		try {
			var oParser = new DOMParser();
			var xmlDoc = oParser.parseFromString(sXml, "text/xml");
			var aMsg = xmlDoc.getElementsByTagName("message");
			// Check if the required node has been found in the xml
			if (aMsg.length > 0) {
				// Success: It is an XML and the message can be extracted out of the node
				// Ensure that the node has the required format
				sText = aMsg[0].childNodes[0].nodeValue;
			} else {
				// Failure: It is probably an JSON
				var oModelJSON = new sap.ui.model.json.JSONModel();
				oModelJSON.setJSON(sXml);
				sText = oModelJSON.oData.error.message.value;
			}
		} catch (e) {
			// If an exception occurred (could be with IE9), we try to extract the message out of JSON.
			// If that fails, we use the whole response within the details.
			var oModelJSON = new sap.ui.model.json.JSONModel();
			oModelJSON.setJSON(sXml);
			// Ensure that the JSON has the required format
			if (oModelJSON.oData && oModelJSON.oData.error && oModelJSON.oData.error.message
					&& oModelJSON.oData.error.message.value) {
				sText += oModelJSON.oData.error.message.value;
			} else {
				sText = sXml;
			}
		}
		return sText;
	},

	/**
	 * This method extracts an error message out of a given array of HTTP response objects which contain a XML or JSON
	 * which has the error message within the section <message>
	 * 
	 * @memberOf Wave3CollaborationHelper
	 */
	extractErrorMsgFromBatchResponse : function(aErrorResponses) {
		var sErrorText = "";
		var sText = "";
		var oResponse = null;
		for ( var i = 0; i < aErrorResponses.length; i++) {
			if (i > 0) {
				sErrorText += "; ";
			}
			oResponse = aErrorResponses[i].response;
			sText = i2d.pp.mrpcockpit.reuse.util.Wave3CollaborationHelper.extractErrorMsgFromXml(oResponse.body);
			sErrorText += sText;
		}
		return sErrorText;
	}

};

}; // end of i2d/pp/mrpcockpit/reuse/util/Wave3CollaborationHelper.js
if ( !jQuery.sap.isDeclared('i2d.pp.mrpcockpit.reuse.util.Wave3Helper') ) {
jQuery.sap.declare("i2d.pp.mrpcockpit.reuse.util.Wave3Helper");

/**
 * This class encapsulates all methods which are only needed for Wave 3 All methods have to be called with context
 */
i2d.pp.mrpcockpit.reuse.util.Wave3Helper = {

	/**
	 * Calculates and returns the shortage period for wave 3 <br>
	 * This method was initially part of S3parent.js controller
	 */
	calcShortagePeriod : function(oDate) {

		var view = this.getView();
		var oData = view.getModel().oData;
		var oSDItemTable = this.getView().byId("SDItems");
		var aItems = (oSDItemTable) ? oSDItemTable.getItems() : [];
		var l = (aItems && aItems.length) ? aItems.length : 0;
		var oItem;
		var shortageItem;
		var firstDate = null;
		var lastDate = null;

		for ( var i = 1; i < l; i++) {
			// get item from the model
			oItem = oData[aItems[i].getBindingContext().getPath().slice(1)];

			if (oItem.MRPElementAvailyOrRqmtDate < oDate) {
				// get first date on or before the given date so that the
				// stock is always below zero until the given date
				if (i2d.pp.mrpcockpit.reuse.util.Wave3Helper.isShortage.call(this, oItem)) {
					shortageItem = oItem;
					firstDate = (!firstDate) ? oItem.MRPElementAvailyOrRqmtDate : firstDate;
				} else if (!i2d.pp.mrpcockpit.reuse.util.Wave3Helper.isShortage.call(this, oItem)) {
					firstDate = null;
					shortageItem = null;
				}
			} else if (oItem.MRPElementAvailyOrRqmtDate.getTime() == oDate.getTime()) {
				shortageItem = oItem;
				firstDate = (!firstDate) ? oItem.MRPElementAvailyOrRqmtDate : firstDate;
			} else {
				// get the last date on or after the given date so that th
				// stock is always below zero until that date
				if (i2d.pp.mrpcockpit.reuse.util.Wave3Helper.isShortage.call(this, oItem)) {
					firstDate = (!firstDate) ? oItem.MRPElementAvailyOrRqmtDate : firstDate;
				} else {
					lastDate = new Date(oItem.MRPElementAvailyOrRqmtDate.getTime() - 24 * 3600 * 1000);
					break;
				}
			}
		}

		// if no start date is found, the date of the initial stock must be
		// the start date
		if (!firstDate && (l > 0)) {
			oItem = oData[aItems[0].getBindingContext().getPath().slice(1)];
			shortageItem = oItem;
			firstDate = oItem.MRPElementAvailyOrRqmtDate;
		}
		// if no end date is found, the shortage last til infinite
		if (!lastDate) {
			lastDate = new Date();
			// set 31.12.9999 in UTC (december = 11)
			lastDate.setUTCFullYear(9999);
			lastDate.setUTCMonth(11);
			lastDate.setUTCDate(31);
			lastDate.setUTCHours(0);
		}

		return {
			shortageItem : shortageItem,
			firstDate : firstDate,
			lastDate : lastDate
		};
	},

	/**
	 * Returns whether there is a shortage for the passed item or not<br>
	 * This method was initially part of S3parent.js controller
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.util.Wave3Helper
	 * @param oItem
	 */
	isShortage : function(oItem) {
		return (oItem.MRPAvailability !== i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_AVAILABILITY_NOSHORTAGE);
		// if status shall not be used, compare oItem.MRPAvailableQuantity with the new treshhold amounts instead
	},

	/**
	 * Create path for solution view call <br>
	 * This method was initially part of S4parent.js controller
	 * 
	 * @memberOf S4
	 */
	getPathSolutionView : function() {
		var path = "/PPMRPSolHeaders(";
		path += "MaterialID='" + encodeURIComponent(this.navParameter.MaterialID);
		path += "',MRPPlant='" + encodeURIComponent(this.navParameter.MRPPlant);
		path += "',MRPArea='" + encodeURIComponent(this.navParameter.MRPArea);
		path += "',MRPPlanningSegmentType='" + encodeURIComponent(this.navParameter.MRPPlanningSegmentType);
		path += "',MRPPlanningSegmentNumber='" + encodeURIComponent(this.navParameter.MRPPlanningSegmentNumber);
		path += "',MaterialShortageDefinitionID='" + encodeURIComponent(this.navParameter.MaterialShortageDefinitionID);
		path += "',MaterialShortageStartDate=datetime'" + encodeURIComponent(this.dateStart);
		path += "',MaterialShortageEndDate=datetime'" + encodeURIComponent(this.dateEnd);
		path += "')";
		return path;
	},

	/**
	 * Returns the template for the list (Supply Demand Items)
	 * 
	 * @memberOf S4parent
	 */
	_getListTemplate : function(sId, oContext) {

		// The sId contains the view name. We use this name to get the
		// reference to that view and therefore its controller.
		// We need the controller because there's defined whether to make the change request icon clickable or not
		var bClickable = true; // Default
		var oCore = sap.ui.getCore();
		var id = sId.split("--")[0];
		var oView = oCore.getElementById(id);
		if (oView) {
			bClickable = oView.getController()._bCrIconClickable;
		}

		// Prepare the icon for the change request
		var oIconCr = new sap.ui.core.Icon(
				{
					visible : "{parts: [{path:'SolutionRequestStatus'}, {path:'MRPElementCategory'}, {path:'MRPElementOpenQuantity'}], formatter:'i2d.pp.mrpcockpit.reuse.util.CommonFormatter.getChangeRequestVisibility'}",
					src : "sap-icon://request",
					tooltip : "{parts: [{path:'SolutionRequestStatus'}, {path:'VendorResponse'}], formatter:'i2d.pp.mrpcockpit.reuse.util.CommonFormatter.getChangeRequestTooltip'}"
				});

		// Decide whether to make the change request icon clickable
		if (bClickable === true) {
			// Attach the press event handler to the icon
			oIconCr.attachPress(function(evt) {
				// Navigate to the Change Request App
				var sError = i2d.pp.mrpcockpit.reuse.util.CollaborationHelper.onCRPressed(evt);
				// Error handling for the navigation
				if (sError) {
					sap.ca.ui.message.showMessageBox({
						type : sap.ca.ui.message.Type.ERROR,
						message : sError
					});
				}
			});
		}

		// Prepare the icons for the indicator
		var oIconIndicator = new sap.ui.core.Icon(
				{
					visible : "{parts: [{path:'MRPElementQuantityIsFirm'}, {path:'MRPElementIsReleased'}, {path:'MRPElementIsPartiallyDelivered'}, {path:'MRPElementCategory'}, {path:'MRPElementOpenQuantity'}], formatter:'i2d.pp.mrpcockpit.reuse.util.CommonFormatter.flagIconSolViewVisible'}",
					tooltip : "{parts: [{path:'MRPElementQuantityIsFirm'}, {path:'MRPElementIsReleased'}, {path:'MRPElementIsPartiallyDelivered'}, {path:'MRPElementCategory'}, {path:'MRPElementOpenQuantity'}], formatter:'i2d.pp.mrpcockpit.reuse.util.CommonFormatter.flagIconSolViewTooltip'}",
					src : "{parts: [{path:'MRPElementQuantityIsFirm'}, {path:'MRPElementIsReleased'}, {path:'MRPElementIsPartiallyDelivered'}, {path:'MRPElementCategory'}, {path:'MRPElementOpenQuantity'}], formatter:'i2d.pp.mrpcockpit.reuse.util.CommonFormatter.flagIconSolView'}"
				});

		// Build the main ColumnListItem for the supply demand items
		var oTemplate = new sap.m.ColumnListItem(
				{
					unread : false,
					cells : [
							// Date
							new sap.m.Label(
									{
										text : "{path: 'MRPElementAvailyOrRqmtDate', type:'sap.ca.ui.model.type.Date', formatOptions: {style:'short'}}",
										visible : "{path:'MRPElementCategory', formatter:'i2d.pp.mrpcockpit.reuse.util.CommonFormatter.isSupplyDemandItem'}",
										customData : [new sap.ui.core.CustomData(
												{
													key : "hideStockDate",
													value : "{parts: [{path:'MRPElementCategory'},{path:'MRPElementAvailyOrRqmtDate'}], formatter:'i2d.pp.mrpcockpit.reuse.util.CommonFormatter.hideStockDate'}"
												})]
									}),
							// Indicators
							new sap.ui.layout.HorizontalLayout({
								content : [oIconIndicator, oIconCr]
							}),
							// MRP Element
							new sap.m.ObjectIdentifier(
									{
										title : "{parts:[{path: 'NumberOfRequirements'}, {path: 'MRPElementCategory'}, {path: 'MRPElementCategoryShortName'}, {path: 'MRPElement'}, {path: 'MRPElementItem'}, {path: 'MRPElementDocumentType'}, {path: 'SourceMRPElementCategory'}, {path: 'SourceMRPElement'}, {path: 'SourceMRPElementItem'}], formatter:'i2d.pp.mrpcockpit.reuse.util.CommonFormatter.getRequirements'}",
										text : "{parts:[{path: 'NumberOfRequirements'}, {path: 'MRPElementCategory'}, {path: 'MRPElementBusinessPartnerName'}, {path: 'MRPElementBusinessPartnerType'}, {path: 'MRPElementBusinessPartnerID'}, {path: 'MRPElementDocumentType'}, {path: 'Assembly'}, {path: 'MaterialSafetyStockQty'}, {path: 'TargetQuantityUnitDcmls'}, {path: 'UnitOfMeasureTechnicalName'}], formatter:'i2d.pp.mrpcockpit.reuse.util.CommonFormatter.vendorOrReq'}"
									}),
							// Quantity
							new sap.ui.layout.HorizontalLayout(
									{
										content : [

												// Status Error
												new sap.m.ObjectStatus(
														{
															icon : "{parts:[{path: 'MRPElementOpenQuantity'}, {path: 'MRPElementCategory'}], formatter:'i2d.pp.mrpcockpit.reuse.util.CommonFormatter.sditemicon'}",
															state : "{parts:[{path: 'MRPElementOpenQuantity'}, {path: 'MRPElementCategory'}], formatter:'i2d.pp.mrpcockpit.reuse.util.CommonFormatter.sdIconState'}",
															tooltip : "{parts:[{path: 'MRPElementOpenQuantity'}, {path: 'MRPElementCategory'}], formatter:'i2d.pp.mrpcockpit.reuse.util.CommonFormatter.sditemtooltip'}"
														}),
												new sap.m.Text({
													width : "0.5rem"
												}),

												// Quantity
												new sap.m.ObjectNumber(
														{
															number : "{parts:[ {path: 'MRPElementOpenQuantity'}, {path: 'TargetQuantityUnitDcmls'}], formatter:'i2d.pp.mrpcockpit.reuse.util.CommonFormatter.quantity'}",
															numberUnit : "{UnitOfMeasureTechnicalName}",
															emphasized : false
														})]
									}).addStyleClass("sapMRPStockQty"),

							// Available
							new sap.m.ObjectNumber(
									{
										number : "{parts:[{path: 'MRPAvailableQuantity'}, {path: 'TargetQuantityUnitDcmls'}], formatter:'i2d.pp.mrpcockpit.reuse.util.CommonFormatter.numberFormat'}",
										numberUnit : "{UnitOfMeasureTechnicalName}",
										visible : "{path: 'StockQuantityVisible'}",
										customData : {
											Type : "sap.ui.core.CustomData",
											key : "getMergingKey",
											value : "{parts:[{path:'MRPElementCategory'}, {path: 'MRPElementAvailyOrRqmtDate'}, {path: 'MRPAvailableQuantity'}], formatter: 'i2d.pp.mrpcockpit.reuse.util.CommonFormatter.availableQuantityMergingKey'}"
										}
									}).addStyleClass("sapMRPAvailableQuantity")]
				});

		var value = parseFloat(oContext.getProperty("MRPAvailableQuantity"));
		// below critical quantity, the material is below safety stock
		var valueCritical = parseFloat(oContext.getProperty("MaterialShortageCriticalQty"));
		// below threshold, the material is short
		var valueThreshold = parseFloat(oContext.getProperty("MaterialShortageThresholdQty"));
		// Get the current object that is used
		var oObject = oContext.getObject();

		// *******************************************************
		// Do the coloring of the supply demand items
		// *******************************************************
		// remove all style classes
		oTemplate.removeStyleClass("sapMRPShortage");
		oTemplate.removeStyleClass("sapMRPShortageSolved");
		oTemplate.removeStyleClass("sapMRPElementChanged");
		oTemplate.removeStyleClass("sapMRPShortageAccepted");
		oTemplate.removeStyleClass("sapMRPShortageSafetyStock");

		if (oObject.MRPAvailability === i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_AVAILABILITY_ACCEPTED) {
			// Shortage was accepted.
			oTemplate.addStyleClass("sapMRPShortageAccepted");

		} else {
			// Standard behavior we are either in the initial call or in the preview.
			if (oObject.ChangedMrpElement && oObject.ChangedMrpElement === true) {
				// This is the changed element in the preview. It will be highlighted separately.
				oTemplate.addStyleClass("sapMRPElementChanged");
			} else if ((value < valueThreshold)) {
				// material is short, below the threshold.
				oTemplate.addStyleClass("sapMRPShortage");
			} else if (value < valueCritical) {
				// Value is below safety stock
				oTemplate.addStyleClass("sapMRPShortageSafetyStock");
			} else if ((value >= valueCritical) && (oObject.InitialShortage && oObject.InitialShortage === true)) {
				// This element was initially below safety stock but has been increased in the preview.
				oTemplate.addStyleClass("sapMRPShortageSolved");
			}
		}

		return oTemplate;
	},

	/**
	 * Search for an element with ID == stockElementId in the subtree of the elements in <code>contentArray</code>. Set
	 * the safety stock as text attribute of the found element. We search just for the first occurrence of
	 * <code>stockElementId</code>.
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.util.Wave3Helper
	 */
	_writeSafetyStock : function(contentArray, safetyStockText, stockElementId) {
		for ( var cellIndex = 0; cellIndex < contentArray.length; cellIndex++) {
			if (contentArray[cellIndex].getId().indexOf(stockElementId) != -1) {
				// stock element found, set safety stock
				contentArray[cellIndex].setText(safetyStockText);
				return true;
			}
			// search for stock element in child elements
			if (contentArray[cellIndex].getContent
					&& this._writeSafetyStock(contentArray[cellIndex].getContent(), safetyStockText, stockElementId)) {
				// stock element found in one of the children, so we are done
				return true;
			}
		}
		// indicate that we did not find the stock element in the given array (and its child elements)
		return false;
	},

	/**
	 * Determines the safety stock from the binding context of the supply/demand item table and writes the safety stock
	 * into the stock line.
	 * 
	 * @param oView -
	 *          the S3 view
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.util.Wave3Helper
	 */
	determineAndWriteSafetyStock : function(oView) {
		// the sd items table of s3
		var supDemTable = oView.byId("SDItems");
		// all sup dem Items in s3
		var supDemItemsS3 = supDemTable.getItems();
		// the row of the sup dem item of s3
		var supDemItemS3;
		// the business object of one sup dem item of s3
		var supDemItemS3Object;
		// the resource bundle
		var i18nModel = oView.getModel("Common_i18n");
		var oBundleCommon = i18nModel.getResourceBundle();

		// If the detail screen is opened directly from a URL it may happen that the detail call
		// finishes before the master call has finished. In that case the supply/demand item table
		// has no binding context yet, and thus we cannot determine the safety stock here.
		// In that case we should remove the safety stock text entirely to avoid that
		// "No safety stock" is displayed which may be wrong. So if there is no binding context for
		// the supply/demand item table the following logic displays the initial value of
		// the variable safetyStockText which is set here:
		var safetyStockText = "";

		// Get selected Object in the master list
		var supDemTableBindingContext = supDemTable.getBindingContext();
		var selectedObjectS2 = (supDemTableBindingContext) ? supDemTableBindingContext.getObject() : null;
		if (selectedObjectS2) {
			// check if there is a safety stock transferred by back end
			if (selectedObjectS2.MaterialSafetyStockQty && Number(selectedObjectS2.MaterialSafetyStockQty) !== 0.0) {
				// format the quantity
				var safetyStockValue = sap.ca.ui.model.format.NumberFormat.getInstance({
					decimals : selectedObjectS2.TargetQuantityUnitDcmls
				}).format(selectedObjectS2.MaterialSafetyStockQty);
				// create the text to display
				safetyStockText = oBundleCommon.getText("SAFETY_STOCK", [safetyStockValue,
						selectedObjectS2.UnitOfMeasureTechnicalName]);
			} else {
				safetyStockText = oBundleCommon.getText("NO_SAFETY_STOCK");
			}
		}

		// loop over all items in the list in order to set the safety stock
		for ( var supDemItemsS3Index = 0 in supDemItemsS3) {
			supDemItemS3 = supDemItemsS3[supDemItemsS3Index];
			// read the corresponding business object
			supDemItemS3Object = supDemItemS3.getBindingContext().getObject();
			// check if current item is the stock
			if (supDemItemS3Object.MRPElementCategory === i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_ELEMENT_CATEGORY_STOCK) {
				// read all cells of the current item
				var elementCells = supDemItemsS3[supDemItemsS3Index].getCells();
				// find the stock element cell and set the safety stock text
				this._writeSafetyStock(elementCells, safetyStockText, "stockElement");
				// we have found the stock row and do not need to loop over the whole table
				break;
			}
		}
	}
};

}; // end of i2d/pp/mrpcockpit/reuse/util/Wave3Helper.js
if ( !jQuery.sap.isDeclared('i2d.pp.mrpcockpit.reuse.view.AoRWelcomeDialog') ) {
  jQuery.sap.declare('i2d.pp.mrpcockpit.reuse.view.AoRWelcomeDialog');
//jQuery.sap.require("zokcv1.Configuration");
jQuery.sap.require('sap.ushell.services.CrossApplicationNavigation'); // unlisted dependency retained


sap.ui.controller("i2d.pp.mrpcockpit.reuse.view.AoRWelcomeDialog", {

	_DIALOG_ID : "DLG_WLC",
	/**
	 * Called when a controller is instantiated and its View controls (if available) are already created. Can be used to
	 * modify the View before it is displayed, to bind event handlers and do other one-time initialization.
	 * 
	 * @memberOf About
	 */
	onInit : function() {
		 var effectiveUrl = jQuery.sap.getModulePath("i2d.pp.mrpcockpit.reuse") + "/" + "i18n/i18n.properties";
		 var oBundle = new sap.ui.model.resource.ResourceModel({
			 bundleUrl : effectiveUrl
		 });
		 
		 this.getView().setModel(oBundle, "commondialogs_i18n");
	
	},
	// Navigate to Home
	onCancelDialog : function(oEvent) {
		var oResult = {
			isConfirmed : false
		};

		var fgetService = sap.ushell && sap.ushell.Container && sap.ushell.Container.getService;
		this.oCrossAppNav = fgetService && fgetService("CrossApplicationNavigation");

		var href2 = (this.oCrossAppNav && this.oCrossAppNav.toExternal({
			target : {
				shellHash : "#"
			}
		})) || "";

		var oDlg = this.getView().byId(this._DIALOG_ID);
		oDlg.close();

	},

	onConfirmDialog : function(oEvent) {
		var oView = this.byId("DLG_WLC");
		var oModel = oView.getModel();
		var fnOpenAoRAddDialog = oModel.getProperty("/fnOpenAoRAddDialog");
		fnOpenAoRAddDialog(oEvent);
		var oDlg = this.getView().byId(this._DIALOG_ID);
//		var fnClose = oDlg.getModel().getProperty("/closeFunction");
		oDlg.close();
//		fnClose;

	},

/**
 * Similar to onAfterRendering, but this hook is invoked before the controller's View is re-rendered (NOT before the
 * first rendering! onInit() is used for that one!).
 * 
 * @memberOf About
 */
// onBeforeRendering: function() {
//
// },
/**
 * Called when the View has been rendered (so its HTML is part of the document). Post-rendering manipulations of the
 * HTML could be done here. This hook is the same one that SAPUI5 controls get after being rendered.
 * 
 * @memberOf About
 */
// onAfterRendering: function() {
//
// },
/**
 * Called when the Controller is destroyed. Use this one to free resources and finalize activities.
 * 
 * @memberOf About
 */
// onExit: function() {
//
// }
});

}; // end of i2d/pp/mrpcockpit/reuse/view/AoRWelcomeDialog.js
if ( !jQuery.sap.isDeclared('i2d.pp.mrpcockpit.reuse.view.DisplayVariant') ) {
jQuery.sap.declare("i2d.pp.mrpcockpit.reuse.view.DisplayVariant");

i2d.pp.mrpcockpit.reuse.view.DisplayVariant = {

	// create variant selection popover
	getDisplayVariantPopover : function(oController) {
		this.oController = oController;

		this.oDisplayVariantSaveAction = new sap.m.ActionListItem({
			text : oController.getView().getModel("Common_i18n").getResourceBundle().getText("ButtonSaveVariant"),
			press : function(oEvent) {
				this.openVariantDialog(this.oController);
				this.oDisplayVariantPopover.close();
			}.bind(this)
		});

		this.oDisplayVariantSaveAction.isSelectable = function() {
		};

		this.oDisplayVariantDeleteAction = new sap.m.ActionListItem({
			text : oController.getView().getModel("Common_i18n").getResourceBundle().getText("ButtonDeleteVariant"),
			visible : false,
			press : function(oEvent) {
				if (this.sCurrentDisplayVariant == "") {
					this.oDisplayVariantPopover.close();
				} else {
					this.openDeleteVariant(this.oController);
					this.oDisplayVariantPopover.close();
				}
			}.bind(this)
		});
		this.oDisplayVariantDeleteAction.isSelectable = function() {
		};

		this.oDisplayVariantChangePropertiesAction = new sap.m.ActionListItem({
			text : oController.getView().getModel("Common_i18n").getResourceBundle().getText("ButtonChangeProperties"),
			visible : false,
			press : function(oEvent) {
				var aCurrentDisplayVariant = this.oController.oObjectHeader.getTitle();
				if (aCurrentDisplayVariant == this.oController.getObjectHeaderTitle()) {
					this.oDisplayVariantPopover.close();
				} else {
					this.openVariantPropertiesDialog(this.oController);
					this.oDisplayVariantPopover.close();
				}
			}.bind(this)
		});
		this.oDisplayVariantChangePropertiesAction.isSelectable = function() {
		};

		this.oDisplayVariantList = new sap.m.List({
			mode : "SingleSelectMaster",
			includeItemInSelection : true,
			items : [this.oDisplayVariantSaveAction, this.oDisplayVariantDeleteAction,
					this.oDisplayVariantChangePropertiesAction],
			select : function(evt) {
				var sSelectedItem = evt.getParameter("listItem");

				if ((sSelectedItem != this.oDisplayVariantSaveAction)
						&& (sSelectedItem != this.oDisplayVariantDeleteAction)
						&& (sSelectedItem != this.oDisplayVariantChangePropertiesAction)) {
					this.oDisplayVariantDeleteAction.setVisible(true);
					this.oDisplayVariantChangePropertiesAction.setVisible(true);

					this.oController.sCurrentVariantName = sSelectedItem.getTitle();
					this.oController.runStateMachine(this.oController, this.oController.oEvent.variantSelected);
				};
				this.oDisplayVariantPopover.close();
			}.bind(this)
		});

		// Display Variant Menu
		this.oDisplayVariantPopover = new sap.m.Popover({
			placement : sap.m.PlacementType.Bottom,
			showHeader : false,
			content : this.oDisplayVariantList
		});
		return this.oDisplayVariantPopover;
	},

	unpackVariantData : function(bResult, oVariantData, sVariantName) {

		this.oController.oVariantData = oVariantData;
		if(sVariantName){
			this.oController.sCurrentVariantName = sVariantName;
		}
		
		
		if (this.oController.sCurrentVariantName) {
			if(oVariantData != null && oVariantData.ViewChanged){
				this.oController.oObjectHeader.setTitle(this.oController.sCurrentVariantName + " *");
				this.oController.oViewState.ViewChanged = true;
			} else {
				this.oController.oObjectHeader.setTitle(this.oController.sCurrentVariantName);
				this.oController.oViewState.ViewChanged = false;
			}
			this.oController.oViewState.VariantName = this.oController.sCurrentVariantName;
		} else {
			if(oVariantData != null && oVariantData.ViewChanged){
				this.oController.oObjectHeader.setTitle(this.oController.getObjectHeaderTitle() + " *");
				this.oController.oViewState.ViewChanged = true;
			} else {
				this.oController.oObjectHeader.setTitle(this.oController.getObjectHeaderTitle());
				this.oController.oViewState.ViewChanged = false;
			}
			this.oController.oViewState.VariantName = this.oController.getObjectHeaderTitle();
		}

		if (oVariantData != null) {
			
			//Set OrderCategory when it was saved in the variant Data
			if(oVariantData.OrderCategory){
				this.oController.sOrderCategory = oVariantData.OrderCategory;
				this.oController.oViewState.OrderCategory = oVariantData.OrderCategory;
				
			// change the title of the app, only need for 312er app
				if(this.oController._changeAppName){
					this.oController._changeAppName(oVariantData.OrderCategory);
				}			
			}	
			
			// Shortage Definition
			this.oController.oViewState.MaterialShortageDefinitionID = this.oController.oVariantData.MaterialShortageDefinitionID;
			this.oController.filterMaterialShortage = new sap.ui.model.Filter("MaterialShortageDefinitionID",
					sap.ui.model.FilterOperator.EQ, this.oController.oVariantData.MaterialShortageDefinitionID);

			// If the desired shortage definition is not "" and shortage definitions have been received,
			// check if the desired one exists.
			var aItems = this.oController.oShortageSelect.getItems();
			if (this.oController.oVariantData.MaterialShortageDefinitionID != "") {
				if (this.oController.aShortageDefinitionKeys.length > 0) {
					var bShortageDefinitionIdExists = false;
					for ( var i = 0; i < this.oController.aShortageDefinitionKeys.length; i++) {
						if (this.oController.aShortageDefinitionKeys[i] == this.oController.oVariantData.MaterialShortageDefinitionID) {
							bShortageDefinitionIdExists = true;
							this.oController.oShortageSelect
									.setSelectedKey(this.oController.oVariantData.MaterialShortageDefinitionID);
							break;
						};
					}
					if (bShortageDefinitionIdExists == false) {
						var sSelectedShortageKey = this.oController.oShortageSelect.getSelectedKey();
						this.oController.filterMaterialShortage = new sap.ui.model.Filter("MaterialShortageDefinitionID",
								sap.ui.model.FilterOperator.EQ, sSelectedShortageKey);
						this.oController.oViewState.MaterialShortageDefinitionID = sSelectedShortageKey;
						sap.m.MessageBox.alert(this.oController.getView().getModel("Common_i18n").getResourceBundle().getText(
								"SHORTDEF_MISSING_MSG"));
					};
				}
			} else {
				if (this.oController.aShortageDefinitionKeys.length > 0) {
					this.oController.oShortageSelect.setSelectedItem(aItems[0]);
					var sSelectedShortageKey = this.oController.oShortageSelect.getSelectedKey();
					this.oController.filterMaterialShortage = new sap.ui.model.Filter("MaterialShortageDefinitionID",
							sap.ui.model.FilterOperator.EQ, sSelectedShortageKey);
					this.oController.oViewState.MaterialShortageDefinitionID = sSelectedShortageKey;
				}
			}

			// Time Horizon
			this.oController.oViewState.TimeHorizon = this.oController.oVariantData.TimeHorizon;
			if (this.oController.oTimeHorizonSelect) {
				this.oController.oTimeHorizonSelect.setSelectedKey(this.oController.oVariantData.TimeHorizon);
			}

			this.oController.filterTimeHorizon = new sap.ui.model.Filter("DynamicHorizonCode",
					sap.ui.model.FilterOperator.EQ, this.oController.oVariantData.TimeHorizon);

			// Facet Filter
			i2d.pp.mrpcockpit.reuse.view.FacetFilter._resetFacetFilter(this.oController);
			this.oController.oViewState.FacetFilterState = this.oController.oVariantData.FacetFilterState;
			this.oController._setFacetFilterState(this.oController.oVariantData.FacetFilterState);
			this.oController._recreateFacetFilterFiltersFromVariant(this.oController.oVariantData.FacetFilterState);

			// Table
			if (this.oController.oVariantData.TableState.aColumns) {
				this.oController._applyTableStateToTable(this.oController.oVariantData.TableState);
				this.oController.oViewState.TableState = this.oController.oVariantData.TableState;
				this.oController._refilloDataSelectFields(this.oController.oVariantData.TableState);
			} else {
				// created variant without table personalization
				if (this.oController.oViewState.TableState.aColumns) {
					this.oController.oViewState.TableState = {};
					this.oController._resetTableStateToTable();
					this.oController.sDataFieldSelect = this.oController.getInitialSelectFields();
				}
			};

			// Sorting
			this.oController.oViewState.SortDescending = this.oController.oVariantData.SortDescending;
			this.oController.oViewState.SortKey = this.oController.oVariantData.SortKey;
			if (this.oController.oVariantData.SortKey == "") {
				this.oController.oSorter.length = 0;
			} else {
				var aSorters = [];
				aSorters.push(new sap.ui.model.Sorter(this.oController.oVariantData.SortKey,
						this.oController.oVariantData.SortDescending));
				this.oController.oSorter = aSorters;
			}

			// This the reson why we check the parameter (refer to comment in readVariantById)
			if (!sVariantName) {
				//this.oController.oObjectHeader.setTitle(this.oController.getObjectHeaderTitle());
			} else {
				this.oController.bNewVSDialogRequiredAfterTablePers = true;
				//Check if the Variant is the default Variant
				if(this.oController.oVariantData.DefaultVariant){
					this.oDisplayVariantDeleteAction.setVisible(false);
					this.oDisplayVariantChangePropertiesAction.setVisible(false);
				}else {
					this.oDisplayVariantDeleteAction.setVisible(true);
					this.oDisplayVariantChangePropertiesAction.setVisible(true);	
				}
				//this.oController.oObjectHeader.setTitle(this.oController.sCurrentVariantName);
			}
			this.oController.bViewHasBeenChanged = false;
		}
		i2d.pp.mrpcockpit.reuse.view.ViewStateHandler.saveViewStateInContainer(null, this.oController.oViewState,
				this.oController.sStateID, i2d.pp.mrpcockpit.reuse.util.CommonConstants.VIEW_STATE_VALIDITY_TIME);
		
		this.oController.runStateMachine(this.oController, this.oController.oEvent.varDataReceived);
	},

	// refresh list of variants
	recreateDisplayVariantList : function(bResult, aDisplayVariants) {
		this.oDisplayVariantList.removeAllItems();
		this.oController.aDisplayVariantNames = aDisplayVariants;
		if (aDisplayVariants != null) {
			for ( var i = 0; i < aDisplayVariants.length; i++) {
				var oNewItem = new sap.m.StandardListItem({
					title : aDisplayVariants[i],
					press : [function(oEvent) {
						var selectedItem = oEvent.getSource();

					this.oController.sCurrentVariantName = selectedItem.getTitle();
					this.oController.runStateMachine(this.oController, this.oController.oEvent.variantSelected);
					}, this]
				});
				this.oDisplayVariantList.addItem(oNewItem);
			}
		}
		// this.oDisplayVariantList.addItem(this.oDisplayVariantResetAction);
		this.oDisplayVariantList.addItem(this.oDisplayVariantSaveAction);
		this.oDisplayVariantList.addItem(this.oDisplayVariantDeleteAction);
		this.oDisplayVariantList.addItem(this.oDisplayVariantChangePropertiesAction);

		this.oDisplayVariantPopover.openBy(this.oController.oObjectHeaderIconDomRef);
	},

	// Read all variants
	readVariantList : function(oController) {
		this.oController = oController;
		i2d.pp.mrpcockpit.reuse.view.VariantHandler.getAllVariants(this.recreateDisplayVariantList.bind(this),
				this.oController.getVariantContainerPrefix());
	},

	readVariantByName : function(sVariantName) {
		i2d.pp.mrpcockpit.reuse.view.VariantHandler.getVariantByName(this.unpackVariantData.bind(this),
				this.oController.sVariantContainerPrefix, sVariantName);
	},

	readVariantById : function(sVariantID) {
		var myPattern = /id-.*-.*/;
    var sStateID = myPattern.exec(sap.ui.core.routing.HashChanger.getInstance().getHash());
    if (sStateID) {
    	sStateID = sStateID[0];
    } else {
    	sStateID = "";
    }
		i2d.pp.mrpcockpit.reuse.view.ViewStateHandler.getViewState(this.unpackVariantData.bind(this),
				this.oController.sVariantContainerPrefix, this.oController.oDefaultVariantData, sVariantID,
				this.oController.sCurrentVariantName, sStateID, i2d.pp.mrpcockpit.reuse.util.CommonConstants.VIEW_STATE_VALIDITY_TIME);
	},
	
	readTempViewSateFromContainer : function(sTempViewStateID) {
		i2d.pp.mrpcockpit.reuse.view.ViewStateHandler.getViewStateFromContainer(this.unpackVariantData.bind(this), sTempViewStateID,
				i2d.pp.mrpcockpit.reuse.util.CommonConstants.VIEW_STATE_VALIDITY_TIME, this.oController.oDefaultVariantData);
	},

	openVariantDialog : function(oController, evt) {
		var oVariantData = oController.oViewState;
		var sServiceUrl = oController.oDataModel.sServiceUrl + oController.getMasterEntity()
		+ "/$count?" + oController.byId(oController.getTableId()).getBindingInfo('items').binding.sFilterParams;			
		var sAppURL = "#" + oController.getVariantContainerPrefix();
		var aVariantNames = oController.aDisplayVariantNames;
		var sNumberUnit = oController.getNumberUnit();

		// Icons displayed in Tile
		var sLPIconMonitor = oController.getMonitorAppIcon();
		var sLPIconManage = oController.getManageAppIcon();

		i2d.pp.mrpcockpit.reuse.view.VariantHandler.openVariantSaveDialog(this.callbackFunctionVariantSave.bind(this),
				oController.getVariantContainerPrefix(), oVariantData, aVariantNames, sServiceUrl, sAppURL, sNumberUnit,
				sLPIconMonitor, sLPIconManage, oController.sCurrentVariantName, false, false, true, oController);

	},

	callbackFunctionVariantSave : function(bResult, oVariantName) {
		if (bResult) {
			this.oDisplayVariantDeleteAction.setVisible(true);
			this.oDisplayVariantChangePropertiesAction.setVisible(true);
			this.oController.oObjectHeader.setTitle(oVariantName);
			this.oController.sCurrentVariantName = oVariantName;
			this.oController.oViewState.VariantName = oVariantName;
			//Remove the ViewChanged flag
			this.oController.oViewState.ViewChanged = false;
			this.oController.bViewHasBeenChanged = false;
		}
	},

	// Delete Variant Dialog
	openDeleteVariant : function(oController, evt) {
		var sAppURL = "#" + oController.getVariantContainerPrefix();
		i2d.pp.mrpcockpit.reuse.view.VariantHandler.openVariantDeleteDialog(this.callbackFunctionVariantDelete.bind(this),
				oController.getVariantContainerPrefix(), oController.sCurrentVariantName, sAppURL, oController);
	},

	callbackFunctionVariantDelete : function(bResult, oVariantName) {
		if (bResult) {
			this.oController.sCurrentVariantName = "";
			this.oController.oObjectHeader.setTitle(this.oController.getObjectHeaderTitle());
			this.oController.oViewState.VariantName = this.oController.getObjectHeaderTitle();
			//Remove the ViewChanged flag
			this.oController.oViewState.ViewChanged = false;
			this.oDisplayVariantDeleteAction.setVisible(false);
			this.oDisplayVariantChangePropertiesAction.setVisible(false);
		}
	},

	// Change Variant Properties Dialog
	openVariantPropertiesDialog : function(oController, evt) {
		var sServiceUrl = oController.oDataModel.sServiceUrl + oController.getMasterEntity()
		+ "/$count?" + oController.byId(oController.getTableId()).getBindingInfo('items').binding.sFilterParams;	
		var sAppURL = "#" + oController.getVariantContainerPrefix();
		var sNumberUnit = oController.getNumberUnit();
		var sLPIconMonitor = oController.getMonitorAppIcon();
		var sLPIconManage = oController.getManageAppIcon();

		i2d.pp.mrpcockpit.reuse.view.VariantHandler.openVariantPropertiesDialog(this.callbackFunctionVariantProperties
				.bind(this), oController.getVariantContainerPrefix(), sServiceUrl, sAppURL, sNumberUnit, sLPIconMonitor,
				sLPIconManage, oController.sCurrentVariantName, oController);
	},

	callbackFunctionVariantProperties : function(bResult, oVariantName) {
		if (bResult) {
			this.oController.oObjectHeader.setTitle(oVariantName);
			this.oController.sCurrentVariantName = oVariantName;
			this.oController.oViewState.VariantName = oVariantName;
			//Remove the ViewChanged flag
			this.oController.oViewState.ViewChanged = false;
			this.oController.bViewHasBeenChanged = false;
		}
	}
};

}; // end of i2d/pp/mrpcockpit/reuse/view/DisplayVariant.js
if ( !jQuery.sap.isDeclared('i2d.pp.mrpcockpit.reuse.view.FacetFilter') ) {
jQuery.sap.declare("i2d.pp.mrpcockpit.reuse.view.FacetFilter");


i2d.pp.mrpcockpit.reuse.view.FacetFilter = {

	// parameter oController comes from s1parent
	// Modularization: done
	_toObject : function(arr) {
		var rv = {};
		for ( var i = 0; i < arr.length; ++i) {
			rv[arr[i][0]] = arr[i][1];
		}
		return rv;
	},

	_setFacetFilterState : function(oController, aFacetFilterState) {
		this.oController = oController;
		if (aFacetFilterState.length == 0) {
			this._resetFacetFilter(oController);
		} else {
			var aLists = this.oController.oFacetFilter.getLists();
			for ( var iFilterStateIndex = 0; iFilterStateIndex < aFacetFilterState.length; iFilterStateIndex++) {
				var oFacetState = aFacetFilterState[iFilterStateIndex];
				for ( var iListIndex = 0; iListIndex < aLists.length; iListIndex++) {
					var oList = aLists[iListIndex];
					if (oList.getKey() !== oFacetState.listKey) {
						continue;
					} else {
						oList.setActive(oFacetState.active);
						var oSelectedKeys = this._toObject(oFacetState.selectedItemKeys);
						oList.setSelectedKeys(oSelectedKeys);
					}
				}
			}
		}
		this.oController.oFacetFilter.setVisible(false);
		this.oController.oFacetFilter.setVisible(true);
	},

	// Modularization: done
	_recreateFacetFilterFiltersFromVariant : function(oController, aFacetFilterState) {
		this.oController = oController;
		this.oController.aFacetFilterFilters.length = 0;
		for ( var iFacetIndex = 0; iFacetIndex < aFacetFilterState.length; iFacetIndex++) {
			var oFacet = aFacetFilterState[iFacetIndex];
			for ( var iItemIndex = 0; iItemIndex < oFacet.selectedItemKeys.length; iItemIndex++) {
				var oNewFilter = new sap.ui.model.Filter(oFacet.listKey, sap.ui.model.FilterOperator.EQ,
						oFacet.selectedItemKeys[iItemIndex][0]);
				this.oController.aFacetFilterFilters.push(oNewFilter);
			}
		}
	},

	_handleFacetFilterReset : function(oController, aFacetFilterState) {	
		this.oController = oController;
		if (aFacetFilterState.length == 0) {
			this._resetFacetFilter(oController);
		} else {
			this.oController.aFacetFilterFilters.length = 0;
			var aLists = this.oController.oFacetFilter.getLists();
		
			for ( var iListIndex = 0; iListIndex < aLists.length; iListIndex++) {
				var oList = aLists[iListIndex];
				for ( var iFilterStateIndex = 0; iFilterStateIndex < aFacetFilterState.length; iFilterStateIndex++) {
					var oFacetState = aFacetFilterState[iFilterStateIndex];
					if (oList.getKey() !== oFacetState.listKey) {
						oList.setActive(false);
						var oSelectedKeys = this._toObject([]);
						oList.setSelectedKeys(oSelectedKeys);
					} else {
						
						oList.setActive(true);			
						var oSelectedKeys = this._toObject([]);
						oList.setSelectedKeys(oSelectedKeys);
						break;
					}
				}
			}
		}
		this._recreateFacetFilterFilters(oController);
		this.oController.registerViewChanged();
		this.oController.runStateMachine(this.oController, this.oController.oEvent.filterChanged);
		this.oController.oViewState.FacetFilterState = this._getFacetFilterState(oController);
				
	},

	// Modularization: done
	_recreateFacetFilter : function(oController, aFFItems) {
		this.oController = oController;
		this.oController.oFacetFilter.destroyLists();
		for ( var i = 0; i < aFFItems.length; i++) {
			var aItems = [];
			for ( var j = 0; j < aFFItems[i].To_FacetFilterValues.results.length; j++) {
				var oNewItem = aFFItems[i].To_FacetFilterValues.results[j];
				if (oNewItem.FacetFilterValueID != "") {
					aItems.push(oNewItem);
				}
			}
			var sMultiSelect = "MultiSelect";
			if(oController.getSingleSelectFacetFilter){
			for(var k = 0; k < oController.getSingleSelectFacetFilter().length; k++){
				var aSingleSelectFilter = oController.getSingleSelectFacetFilter();
				if(aFFItems[i].FacetFilterField == aSingleSelectFilter[k] ){
					sMultiSelect = "SingleSelectMaster";
				  break;}			
			 }
			}
			var oItemsModel = new sap.ui.model.json.JSONModel({
				values : aItems
			});
			oItemsModel.setSizeLimit(aItems.length);
			var sFFTitel = "{i18n>FF" + aFFItems[i].FacetFilterField + "}";
			// ONE CODE LINE >>> 
			// First check if different field text are defined in App-controller at all 
			if (this.oController.aDiffFieldText){
				sFFTitel = "{i18n>" + i2d.pp.mrpcockpit.reuse.util.Helper.getSpecialTextForField("FF" + 
						aFFItems[i].FacetFilterField, oController) + "}";
			}
			// ONE CODE LINE <<<			
			var oNewFacet = new sap.m.FacetFilterList({
				key : aFFItems[i].FacetFilterField,
				title : sFFTitel,
				mode : sMultiSelect,
				active : false,
				selectedKeys : undefined,
				rememberSelections : false,
				items : {
					path : "/values",
					template : new sap.m.FacetFilterItem({
						text : "{FacetFilterValueText}",
						key : "{FacetFilterValueID}"
					})
				}
			});

			oNewFacet.addStyleClass("sapMRPFFList");
			
			oNewFacet.setModel(oItemsModel);
			this.oController.oFacetFilter.addList(oNewFacet);

			oNewFacet.attachListClose(function() {
				this._handleFacetFilterListClose(this.oController);
			}.bind(this));
		}
		this.oController.oFacetFilter.setShowPersonalization(true);
		this.oController.oViewState.FacetFilterState = this._getFacetFilterState(oController);

	},

	// necessary for a new facetfilter call in case user changed FF
	// Modularization: done
	_getFacetFilterState : function(oController) {
		this.oController = oController;
		var aFacetFilterState = [];
		var aLists = this.oController.oFacetFilter.getLists();
		for ( var iListIndex = 0; iListIndex < aLists.length; iListIndex++) {
			var oList = aLists[iListIndex];
			var oNewEntry = {
				listKey : oList.getKey(),
				active : oList.getActive(),
				selectedItemKeys : []
			};

			var oSelectedKeys = oList.getSelectedKeys();
			for ( var oSelectedKey in oSelectedKeys) {
				oNewEntry.selectedItemKeys.push([oSelectedKey, oSelectedKeys[oSelectedKey]]);
			}

			aFacetFilterState.push(oNewEntry);
		}
		return aFacetFilterState;
	},

	// Modularization: done
	_handleFacetFilterListClose : function(oController) {
		this.oController = oController;
		this.oController.oViewState.FacetFilterState = this._getFacetFilterState(oController);
		this.oController.aStoredFacetFilterState = this.oController.oViewState.FacetFilterState;

		// Check if anything got changed.
		var bFilterWasChanged = false;
		var aFacetFilterFiltersOld = [];
		for ( var i = 0; i < this.oController.aFacetFilterFilters.length; i++) {
			aFacetFilterFiltersOld.push(this.oController.aFacetFilterFilters[i]);
		}
		this._recreateFacetFilterFilters(oController);

		if (this.oController.aFacetFilterFilters.length != aFacetFilterFiltersOld.length) {
			bFilterWasChanged = true;
		} else {
			for ( var i = 0; i < this.oController.aFacetFilterFilters.length; i++) {
				var oFilterOld = aFacetFilterFiltersOld[i];
				var oFilterNew = this.oController.aFacetFilterFilters[i];
				if ((oFilterNew.oValue1 != oFilterOld.oValue1) || (oFilterNew.sOperator != oFilterOld.sOperator)
						|| (oFilterNew.sPath != oFilterOld.sPath)) {
					bFilterWasChanged = true;
				}
			}
		}

		if (bFilterWasChanged == true) {
			this.oController.registerViewChanged();
			this.oController.runStateMachine(this.oController, this.oController.oEvent.filterChanged);
		}
	},

	// Modularization: done
	_resetFacetFilter : function(oController) {
		this.oController = oController;
		var aLists = this.oController.oFacetFilter.getLists();
		// The following loop should no longer be necessary - the removeSelections
		// call below should suffice. But I had at one point errors with only the
		// removeSelections call so I left this loop in.
		for ( var iListIndex = 0; iListIndex < aLists.length; iListIndex++) {
			var oList = aLists[iListIndex];
			oList.setActive(false);
			var aItems = oList.getItems();
			for ( var iItemsIndex = 0; iItemsIndex < aItems.length; iItemsIndex++) {
				aItems[iItemsIndex].setSelected(false);
			}
			oList.removeSelections(true);  // For removing those items only visible after "more".	
		}
		this.oController.oViewState.FacetFilterState = this._getFacetFilterState(oController);
	},
	
	// Modularization:done
	_recreateFacetFilterFilters : function(oController) {
		this.oController = oController;
		this.oController.aFacetFilterFilters.length = 0;
		var aLists = this.oController.oFacetFilter.getLists();
		for ( var iListIndex = 0; iListIndex < aLists.length; iListIndex++) {
			var oList = aLists[iListIndex];
			if (oList.getActive() == true) {
				var sKeyValue = oList.getKey();
				var oSelectedKeys = oList.getSelectedKeys();
				for ( var oSelectedKey in oSelectedKeys) {
					var oNewFilter = new sap.ui.model.Filter(sKeyValue, sap.ui.model.FilterOperator.EQ, oSelectedKey);
					this.oController.aFacetFilterFilters.push(oNewFilter);
				}
			}
		}
	}
};

}; // end of i2d/pp/mrpcockpit/reuse/view/FacetFilter.js
if ( !jQuery.sap.isDeclared('i2d.pp.mrpcockpit.reuse.view.TableSorting') ) {
jQuery.sap.declare("i2d.pp.mrpcockpit.reuse.view.TableSorting");

/**
 * Table Sorting Function
 */
i2d.pp.mrpcockpit.reuse.view.TableSorting = {

	_getVSDialogNEW : function(oController) {
		this.oController = oController;

		if (this.oController.newVSDialog) {
			this.oController.oVSDialog = new sap.m.ViewSettingsDialog({
				sortItems : this._getSortFields(),
				groupItems : [],
				filterItems : [],
				confirm : function(evt) {
					var mParams = evt.getParameters();
					var aSorters = [];
					if (mParams.groupItem) {
						var sPath = mParams.groupItem.getKey();
						var bDescending = mParams.groupDescending;
						var vGroup = this.oController.oController.mGroupFunctions[sPath];
						aSorters.push(new sap.ui.model.Sorter(sPath, bDescending, vGroup));
					}
					var sPath = mParams.sortItem.getKey();
					var bDescending = mParams.sortDescending;
					if (!this.oController.bSortDescending) {
						this.oController.bsortDescending = bDescending;
					} else {
						bDescending = this.oController.bsortDescending;
					};
					this.oController.bSortPath = sPath;
					aSorters.push(new sap.ui.model.Sorter(sPath, bDescending));
					this.oController.oSorter = aSorters;
					// /oBinding.sort(aSorters);
					// Changed due to implementation of State Machine: Start
					this.oController.runStateMachine(this.oController, this.oController.oEvent.tableChanged);
					// this._rebindRefreshTable();
					// Changed due to implementation of State Machine: End
					this.oController.oViewState.SortKey = sPath;
					this.oController.oViewState.SortDescending = bDescending;
					this.oController.registerViewChanged(); // What if nothing was changed?
				}.bind(this)
			});
			this.oController.newVSDialog = false;
		}
		return this.oController.oVSDialog;
	},

	_getSortFields : function() {
		var seekIndexInDefSortArray = function(pArray, pValue) {
			// little helper function to check if a given value pValue is in a given array pArray like a this.aDefaultSorting
			var i, index = -1;
			for (i = 0; i < pArray.length; i++) {
				if (pArray[i][0] === pValue) {
					index = i;
					break;
				}
			}
			return index;
		};

		var bSelected = false; // contains true if cell is selected in sort popup
		var aSortFields = [];
		// ONE CODE LINE >>> : Check out if there are special textID for SoH and ModelS
		var sSortFieldText = "";
		// ONE CODE LINE <<<
		var sortFields = this._getCellsInOrder();

		if (sortFields.length !== 0) {
			for ( var i = 0; i < sortFields.length; i++) {
				// loop over cells
				var myIndex = seekIndexInDefSortArray(this.oController.aDefaultSorting, sortFields[i]);
				if (myIndex >= 0) { // cell is member of sortable cells
				// build the entries of the popup
					// ONE CODE LINE >>> : Check out if there are special textID for SoH and ModelS maintained in the aDiffFieldText-array
					if (this.oController.aDiffFieldText){
						sSortFieldText = this.oController.oResourceBundle.getText(i2d.pp.mrpcockpit.reuse.util.Helper.
								getSpecialTextForField(sortFields[i], this.oController));
					} else {
					// ONE CODE LINE <<<
						sSortFieldText = this.oController.oResourceBundle.getText(sortFields[i]);
					}
										
					// check if user set this cell as sort criteria in the popup or take the default cell (defined
					// in the default sort array)
					bSelected = ((this.oController.bSortPath && (this.oController.bSortPath === sortFields[i]))
								|| (!this.oController.bSortPath && (this.oController.aDefaultSorting[myIndex][1] === 1)));
					var oVSItem = new sap.m.ViewSettingsItem(
						{
							text : sSortFieldText, // w/o ONE CODELINE: this.oController.oResourceBundle.getText(sortFields[i]),
							key : sortFields[i],
							selected : bSelected
						});
					aSortFields.push(oVSItem);
				}
			}
		}
		return aSortFields;
	},

	_getCellsInOrder : function(pVisibleOnly) {
		var theCelsOrder = [];
		var theDataInColumnsOrder = [];

		this.oController.oTable.getColumns().forEach(
				function(column) {
					if ((column.getVisible() && pVisibleOnly) || !pVisibleOnly) {
						// push the column data to the position of the columns order in the array
						theDataInColumnsOrder[this.oController.oTable.getColumns(true).indexOf(column)] = column
								.data("mrpcoDataField");
					}
				}.bind(this));

		// check and process entries with more than one field in one column
		theDataInColumnsOrder.forEach(function(column) {
			var aColumnCels = [];
			aColumnCels = column.split(",");
			aColumnCels.forEach(function(columncels) {
				theCelsOrder.push(columncels);
			});
		});

		return theCelsOrder;
	}

}; // i2d.pp.mrpcockpit.reuse.view.TableSorting


}; // end of i2d/pp/mrpcockpit/reuse/view/TableSorting.js
if ( !jQuery.sap.isDeclared('i2d.pp.mrpcockpit.reuse.view.VariantChangeConfirmationDialog') ) {
  jQuery.sap.declare('i2d.pp.mrpcockpit.reuse.view.VariantChangeConfirmationDialog');
jQuery.sap.require('sap.ushell.services.CrossApplicationNavigation'); // unlisted dependency retained


sap.ui.controller("i2d.pp.mrpcockpit.reuse.view.VariantChangeConfirmationDialog", {
	 _DIALOG_ID: "DLG_CHANGE_VARIANT_CONFIRMATION",

	/**
	 * Called when a controller is instantiated and its View controls (if available) are already created. Can be used to
	 * modify the View before it is displayed, to bind event handlers and do other one-time initialization.
	 * 
	 * @memberOf About
	 */
	onInit : function() {
		 var effectiveUrl = jQuery.sap.getModulePath("i2d.pp.mrpcockpit.reuse") + "/" + "i18n/i18n.properties";
		 var oBundle = new sap.ui.model.resource.ResourceModel({
			 bundleUrl : effectiveUrl
		 });
		 
		 this.getView().setModel(oBundle, "commondialogs_i18n");
		
	},
	
	onConfirmDialog: function(oEvent) {	 
			 
	    var oDlg = this.getView().byId(this._DIALOG_ID);
	    var fnSave = oDlg.getModel().getProperty("/saveFunction");
	    fnSave();
	    this.closeDialog(oEvent);
	   
  },
 
  onCancelDialog: function(oEvent) {
    var oResult = {
      isConfirmed: false
    };

    this.closeDialog(oEvent);
  },

  closeDialog: function(oResult) {
    var oDlg = this.getView().byId(this._DIALOG_ID);
    var fnClose = oDlg.getModel().getProperty("/closeFunction");
  	oDlg.close();
    fnClose(oResult);
  },


/**
 * Similar to onAfterRendering, but this hook is invoked before the controller's View is re-rendered (NOT before the
 * first rendering! onInit() is used for that one!).
 * 
 * @memberOf About
 */
// onBeforeRendering: function() {
//
// },
/**
 * Called when the View has been rendered (so its HTML is part of the document). Post-rendering manipulations of the
 * HTML could be done here. This hook is the same one that SAPUI5 controls get after being rendered.
 * 
 * @memberOf About
 */
// onAfterRendering: function() {
//
// },
/**
 * Called when the Controller is destroyed. Use this one to free resources and finalize activities.
 * 
 * @memberOf About
 */
// onExit: function() {
//
// }
});

}; // end of i2d/pp/mrpcockpit/reuse/view/VariantChangeConfirmationDialog.js
if ( !jQuery.sap.isDeclared('i2d.pp.mrpcockpit.reuse.view.VariantSaveDialog') ) {
  jQuery.sap.declare('i2d.pp.mrpcockpit.reuse.view.VariantSaveDialog');
jQuery.sap.require('sap.ushell.services.CrossApplicationNavigation'); // unlisted dependency retained


sap.ui.controller("i2d.pp.mrpcockpit.reuse.view.VariantSaveDialog", {
	_VARIANT_NAME_ID: "TXF_VARIANT_NAME",
	_DIALOG_ID: "DLG_VARIANT_SAVE",

	/**
	 * Called when a controller is instantiated and its View controls (if available) are already created. Can be used to
	 * modify the View before it is displayed, to bind event handlers and do other one-time initialization.
	 * 
	 * @memberOf About
	 */
	onInit : function() {
		var effectiveUrl = jQuery.sap.getModulePath("i2d.pp.mrpcockpit.reuse") + "/" + "i18n/i18n.properties";
		var oBundle = new sap.ui.model.resource.ResourceModel({
			bundleUrl : effectiveUrl
		});

		this.getView().setModel(oBundle, "commondialogs_i18n");
		jQuery.sap.require("sap.m.MessageToast");

		var txfVariantName = this.getView().byId(this._VARIANT_NAME_ID);
		txfVariantName.attachLiveChange(function() {

		});

	},

	beforeOpen : function(oEvent){
		var oDlg = this.getView().byId(this._DIALOG_ID);
		var txfVariantName = this.getView().byId(this._VARIANT_NAME_ID);
		txfVariantName.setValue(oDlg.getModel().getProperty("/oldVariantName"));	
		
		this.getView().byId("CHB_VARIANT_AS_TILE_MONITOR").setSelected(oDlg.getModel().getProperty("/b2MonitorTile"));
		this.getView().byId("CHB_VARIANT_AS_TILE_MANAGE").setSelected(oDlg.getModel().getProperty("/b2ManageTile"));
		
		//Only need for Manage Forecast Demand App
		if(oDlg.getModel().getProperty("/forcasteDemandApp") && oDlg.getModel().getProperty("/forcasteDemandApp")===true){
			this.getView().byId("CHB_VARIANT_AS_TILE_MONITOR").setVisible(false);
			this.getView().byId("CHB_VARIANT_AS_TILE_MANAGE").setText(this.getView().getModel('commondialogs_i18n').getResourceBundle().getText("VariantCheckBoxMonitor"));
		}
	},
	
	onConfirmDialog: function(oEvent) {
		var txfVariantName = this.getView().byId(this._VARIANT_NAME_ID).getValue();
		txfVariantName = txfVariantName.trim();
		var oResult = {
				isConfirmed: true,
				sInput: txfVariantName
		};
		var oDlg = this.getView().byId(this._DIALOG_ID);

		if (txfVariantName == "") {
			sap.m.MessageToast.show(this.getView().getModel('commondialogs_i18n').getResourceBundle().getText("VariantMessageEmptyName"));


		} else if(txfVariantName.toLowerCase() == oDlg.getModel().getProperty("/sDefaultLayoutName").toLowerCase() || txfVariantName.toLowerCase() == oDlg.getModel().getProperty("/sListName").toLowerCase()){
			sap.m.MessageToast.show(this.getView().getModel('commondialogs_i18n').getResourceBundle().getText("VariantMessageProtectedName", txfVariantName));
		} else {
			var allVariantNames = oDlg.getModel().getProperty("/variantList");
			var variantExsits = false;
			if (allVariantNames != null) {
				for ( var i = 0; i < allVariantNames.length; i++) {
					if (allVariantNames[i] == txfVariantName) {
						variantExsits = true;
					}
				}
			}

				
				
			
			
	 if (variantExsits) {

				var fnChangeVariant = oDlg.getModel().getProperty("/changeVariantFunction");
				var bCheckboxMonitor = this.getView().byId("CHB_VARIANT_AS_TILE_MONITOR").getSelected();
				var bCheckboxManage = this.getView().byId("CHB_VARIANT_AS_TILE_MANAGE").getSelected();
				fnChangeVariant(txfVariantName, bCheckboxMonitor, bCheckboxManage);
				this.getView().byId("CHB_VARIANT_AS_TILE_MONITOR").setSelected(false);
				this.getView().byId("CHB_VARIANT_AS_TILE_MANAGE").setSelected(false);
				this.getView().byId(this._VARIANT_NAME_ID).setValue("");	
				oDlg.close();

			} else {
				var fnSave = oDlg.getModel().getProperty("/saveFunction");
				var bCheckboxMonitor = this.getView().byId("CHB_VARIANT_AS_TILE_MONITOR").getSelected();
				var bCheckboxManage = this.getView().byId("CHB_VARIANT_AS_TILE_MANAGE").getSelected();
				fnSave(txfVariantName,  bCheckboxMonitor, bCheckboxManage);
				this.getView().byId(this._VARIANT_NAME_ID).setValue("");	 // empty the value for the next call.
				this.getView().byId("CHB_VARIANT_AS_TILE_MONITOR").setSelected(false);
				this.getView().byId("CHB_VARIANT_AS_TILE_MANAGE").setSelected(false);
				this.closeDialog(oResult);
			}
		}

	},
	checkVariantName: function(oData) {

	},

	onCancelDialog: function(oEvent) {
		var oResult = {
				isConfirmed: false
		};
		this.getView().byId(this._VARIANT_NAME_ID).setValue("");	
		this.closeDialog(oResult);
	},

	closeDialog: function(oResult) {
		var oDlg = this.getView().byId(this._DIALOG_ID);
		var fnClose = oDlg.getModel().getProperty("/closeFunction");
		oDlg.close();
		fnClose(oResult);
	},


	variantNameChanged: function(oControlEvent) {


	}

	/**
	 * Similar to onAfterRendering, but this hook is invoked before the controller's View is re-rendered (NOT before the
	 * first rendering! onInit() is used for that one!).
	 * 
	 * @memberOf About
	 */
//	onBeforeRendering: function() {

//	},
	/**
	 * Called when the View has been rendered (so its HTML is part of the document). Post-rendering manipulations of the
	 * HTML could be done here. This hook is the same one that SAPUI5 controls get after being rendered.
	 * 
	 * @memberOf About
	 */
//	onAfterRendering: function() {

//	},
	/**
	 * Called when the Controller is destroyed. Use this one to free resources and finalize activities.
	 * 
	 * @memberOf About
	 */
//	onExit: function() {

//	}
});

}; // end of i2d/pp/mrpcockpit/reuse/view/VariantSaveDialog.js
if ( !jQuery.sap.isDeclared('i2d.pp.mrpcockpit.reuse.view.ViewStateHandler') ) {
jQuery.sap.declare("i2d.pp.mrpcockpit.reuse.view.ViewStateHandler");

i2d.pp.mrpcockpit.reuse.view.ViewStateHandler = {

	i18NCommonReuseModel : new sap.ui.model.resource.ResourceModel({
		bundleUrl : jQuery.sap.getModulePath("i2d.pp.mrpcockpit.reuse") + "/" + "i18n/i18n.properties"
	}),

	// Method called by the apps to receive the View State
	getViewState : function(fCallbackFunction, sVariantContainerPrefix, oDefaultViewState, sVariantID, sVariantName,
			sTempViewStateID, nTimeViewState) {

		/*
		 * if(sVariantID !== "" && sVariantName == ""){
		 * i2d.pp.mrpcockpit.reuse.view.VariantHandler.getVariantByID(fCallbackFunction.bind(this), sVariantContainerPrefix,
		 * sVariantID); } else if(sVariantName !== "" && sVariantID == ""){
		 * i2d.pp.mrpcockpit.reuse.view.VariantHandler.getVariantByName(fCallbackFunction.bind(this),
		 * sVariantContainerPrefix, sVariantName); } else { fCallbackFunction(true, oDefaultViewState, ""); }
		 * 
		 */
		if (sVariantID !== "" && (sVariantName == "")) {
			this.getViewStateFromContainer(fCallbackFunction, sTempViewStateID, nTimeViewState, oDefaultViewState,
					sVariantContainerPrefix, sVariantID);
		} else if (sVariantName !== "" && (sVariantID == "")) {
			i2d.pp.mrpcockpit.reuse.view.VariantHandler.getVariantByName(fCallbackFunction.bind(this),
					sVariantContainerPrefix, sVariantName);
		} else {
			this.getViewStateFromContainer(fCallbackFunction, sTempViewStateID, nTimeViewState, oDefaultViewState);
		}

	},

	// Save the temp. View State in a Container 
	saveViewStateInContainer : function(fCallbackFunction, oViewState, sTempViewStateID, nTimeViewState, sVariantName) {
		if (!this.oPersonalizationService) {
			this.oPersonalizationService = sap.ushell.Container.getService("Personalization");
		}
		if (this.oPersonalizationService.getContainer) {

			//Save the View State first temporary in the launchpad window page (automaticlly deleted after reload the launchpad, e.g. F5)
			this.oPersonalizationService.getContainer(sTempViewStateID, {
				validity : 0
			}).fail(function() {
				jQuery.sap.log.error("Loading personalization data failed.");
			}).done(function(oContainer) {
				oContainer.setItemValue("ViewState", oViewState);
				oContainer.save().done(function() {
					jQuery.sap.log.info("saveViewStateInContainer: oContainer.save");
					//If the time is > then 0 (0 is a fixed value for local saving) then save the data in the backend
					//nTimeViewState is the time in min the data should stored in the backend
					if (nTimeViewState > 0) {
						this.oPersonalizationService.getContainer(sTempViewStateID, {
							validity : nTimeViewState
						}).fail(function() {
							jQuery.sap.log.error("Loading personalization data failed.");
						}).done(function(oContainer) {
							jQuery.sap.log.info("saveViewStateInContainer: this.oPersonalizationService.getContainer");
							oContainer.setItemValue("ViewState", oViewState);
							oContainer.save().done(function() {
								jQuery.sap.log.info("saveViewStateInContainer: oContainer.save");
								if (fCallbackFunction) {
									fCallbackFunction(true);
								}
							});
						}.bind(this));
					} else {
						if (fCallbackFunction) {
							fCallbackFunction(true);
						}
					}
				}.bind(this));
			}.bind(this));

		}
	},
	
	//Delete a ViewState
	deleteViewStateInContainer : function(fCallbackFunction, sTempViewStateID, nTimeViewState) {
		if (!this.oPersonalizationService) {
			this.oPersonalizationService = sap.ushell.Container.getService("Personalization");
		}
		if (this.oPersonalizationService.getContainer) {

			//First delete the ViewState on the local launchpad window page
			this.oPersonalizationService.getContainer(sTempViewStateID, {
				validity : 0
			}).fail(function() {
				jQuery.sap.log.error("Loading personalization data failed.");
			}).done(function(oContainer) {
				oContainer.delItem("ViewState");
				oContainer.save().done(function() {
					//Delete the ViewState on the backend if the time is > 0
					if (nTimeViewState > 0) {
						this.oPersonalizationService.getContainer(sTempViewStateID, {
							validity : nTimeViewState
						}).fail(function() {
							jQuery.sap.log.error("Loading personalization data failed.");
						}).done(function(oContainer) {
							oContainer.delItem("ViewState");
							oContainer.save().done(function() {
								if (fCallbackFunction) {
									fCallbackFunction(true);
								}
							});
						}.bind(this));
					} else {
						if (fCallbackFunction) {
							fCallbackFunction(true);
						}
					}
				}.bind(this));
			}.bind(this));
		}
	},

	//Read the ViewState locally or from the backend
	getViewStateFromContainer : function(fCallbackFunction, sTempViewStateID, nTimeViewState, oDefaultViewState,
			sVariantContainerPrefix, sVariantID) {
		if (!this.oPersonalizationService) {
			this.oPersonalizationService = sap.ushell.Container.getService('Personalization');
		}
		if (this.oPersonalizationService.getContainer) {
			//First try to read the ViewState local from the launchpad window page
			this.oPersonalizationService.getContainer(sTempViewStateID, {
				validity : 0
			}).done(
					function(oContainer) {
						var oState = oContainer.getItemValue("ViewState");
						var sVariantName = "";
						if (fCallbackFunction) {
							//Call the callback function if we found a local ViewState
							if (oState) {
								if (oState.VariantName) {
									sVariantName = oState.VariantName;
								}
								// oContainer.delItem("ViewState");
								// oContainer.save();
								fCallbackFunction(true, oState, sVariantName);
							} else {
								//Read the ViewState from the backend if we doesn't found it locally
								this.oPersonalizationService.getContainer(sTempViewStateID, {
									validity : nTimeViewState
								}).done(
										function(oContainer) {
											var oState = oContainer.getItemValue("ViewState");
											var sVariantName = "";
											if (fCallbackFunction) {
												if (oState) {
													if (oState.VariantName) {
														sVariantName = oState.VariantName;
													}
													// oContainer.delItem("ViewState");
													// oContainer.save();
													fCallbackFunction(true, oState, sVariantName);
												} else {
													if (sVariantID) {
														//If we found no ViewState and we have a variantID then get the ViewState from the variant
														i2d.pp.mrpcockpit.reuse.view.VariantHandler.getVariantByID(fCallbackFunction.bind(this),
																sVariantContainerPrefix, sVariantID);
													} else {
														//If we haven't found a ViewState then we give the default ViewState back
														fCallbackFunction(true, oDefaultViewState, "");
													}
												}
											}
										}.bind(this)).fail(function() {
									if (fCallbackFunction) {
										fCallbackFunction(true, oDefaultViewState, "");
									}
								}.bind(this));
							}
						}

					}.bind(this)).fail(function() {
				if (fCallbackFunction) {
				//If we haven't found a ViewState then we give the default ViewState back
					fCallbackFunction(true, oDefaultViewState, "");
				}
			}.bind(this));
		} else {
			if (sVariantID) {
				i2d.pp.mrpcockpit.reuse.view.VariantHandler.getVariantByID(fCallbackFunction.bind(this),
						sVariantContainerPrefix, sVariantID);
			} else {
			//If we haven't found a ViewState then we give the default ViewState back
				fCallbackFunction(true, oDefaultViewState, "");
			}
		}

	}

};
}; // end of i2d/pp/mrpcockpit/reuse/view/ViewStateHandler.js
if ( !jQuery.sap.isDeclared('i2d.pp.mrpcockpit.reuse.controls.Chart') ) {
jQuery.sap.declare("i2d.pp.mrpcockpit.reuse.controls.Chart");

jQuery.sap.require('sap.ui.thirdparty.d3'); // unlisted dependency retained

jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained


sap.ui.core.Control
		.extend(
				"i2d.pp.mrpcockpit.reuse.controls.Chart",
				{
					metadata : {
						properties : {
							minBarSize : {
								type : "int",
								defaultValue : 19
							},
							minOverviewBarSize : {
								type : "float",
								defaultValue : 2
							},
							height : {
								type : "sap.ui.core.CSSSize",
								defaultValue : "240px"
							},
							width : {
								type : "sap.ui.core.CSSSize",
								defaultValue : "240px"
							},
							minChartHeight : {
								type : "sap.ui.core.CSSSize",
								defaultValue : "240px"
							},
							fixOverviewHeight : {
								type : "int",
								defaultValue : 0
							},
							showOverview : {
								type : "boolean",
								defaultValue : true
							},
							shiftLeft : {
								type : "float",
								defaultValue : 0
							},
							allowNavigation : {
								type : "boolean",
								defaultValue : false
							},
							// noNavigationText will be provided as Message Toast when the
							// user tries to navigate with the chart
							// leave the text empty(default) if no Message Toast shall be provided
							noNavigationText : {
								type : "string",
								defaultValue : ""
							},
							unitDecimals : {
								type : "int",
								defaultValue : 0
							},
							startBalance : {
								type : "float",
								defaultValue : 0
							},
							minStock : {
								type : "float",
								defaultValue : 0
							},
							safetyStock : {
								type : "float",
								defaultValue : 0
							},
							minDate : "string",
							maxDate : "string",
							balanceDotTooltip : {
								type : "string",
								defaultValue : ""
							}
						},
						aggregations : {
							values : {
								type : "i2d.pp.mrpcockpit.reuse.controls.ChartValue",
								multiple : true,
								singularName : "value",
								bindable : "bindable"
							},
							deltas : {
								type : "i2d.pp.mrpcockpit.reuse.controls.ChartValue",
								multiple : true,
								singularName : "delta",
								bindable : "bindable"
							}
						},
						events : {
							"selected" : {}
						},
						defaultAggregation : "values"
					},

					/**
					 * Init the chart control
					 * 
					 * @memberOf Chart
					 */
					init : function() {

						jQuery.sap.require("sap.ca.ui.model.format.DateFormat");
						jQuery.sap.require("sap.ca.ui.model.format.QuantityFormat");

						// Date format used in the chart
						this._oChartFormatter = sap.ca.ui.model.format.DateFormat.getDateInstance({
							style : 'short'
						});

						// The attribute this._dataset contains the information what type of chart is currently being displayed,
						// either "basic" for the standard chart or "preview" for the preview chart
						this._dataset = "basic";

						// Duration of an animation between basic view and preview (see also this.setDeltas())
						this._duration = 2000;

						// Chart settings used to create the SVG, calculated in this.calcChartSettings() and
						// this.calcOverviewSettings()
						this._oChartSettings = {};
						this._oOverviewSettings = {};

						// Scroll-buttons in chart overview
						this._ovrBtnLeft = new sap.ui.core.Icon({
							id : this.getId() + "-ovrBtnLeft",
							src : "sap-icon://navigation-left-arrow"
						});
						this._ovrBtnRight = new sap.ui.core.Icon({
							id : this.getId() + "-ovrBtnRight",
							src : "sap-icon://navigation-right-arrow"
						});
					},

					exit : function() {

						// remove delayed call if applicable
						this.removeHandler();
					},

					removeHandler : function() {

						if (this._triggerDeltaDisplay) {
							jQuery.sap.clearDelayedCall(this._triggerDeltaDisplay);
							this._triggerDeltaDisplay = null;
						}
					},

					/**
					 * If deltas are supplied this function adds these data to the chart and displays the preview. If no deltas
					 * are supplied this function removes the delta data from the chart and displays the basic view of the chart.
					 * 
					 * @param aDeltas
					 * @param bNoAnimation
					 */
					setDeltas : function(aDeltas, bNoAnimation) {

						var handleDelayedDeltas = function() {
							this.setDeltas(aDeltas);
						};

						var overview = d3.select("#" + this.getId() + "-overview-chartArea svg").remove();
						var chart = d3.select("#" + this.getId() + "-chartArea svg").remove();
						var axis = d3.select("#" + this.getId() + "-backgroundArea svg").remove();

						var l = (aDeltas && aDeltas.length) ? aDeltas.length : 0;
						var currDeltaLen = this.getDeltas().length;
						var bPreviewShown = (currDeltaLen > 0) && (this._dataset === "preview");

						// ensure that no old delayed call remains
						this.removeHandler();

						// if deltas are set but no ones already exist
						if ((l > 0) && !bPreviewShown) {

							this.removeAllAggregation("deltas", true);

							for ( var i = 0; i < l; i++) {
								this.addAggregation("deltas", new i2d.pp.mrpcockpit.reuse.controls.ChartValue({
									date : aDeltas[i].date,
									demand : aDeltas[i].demand,
									supply : aDeltas[i].supply
								}), true);
							}

							// first render the chart in basic view and then animate the change
							this.calcChartSettings("basic");
							this.calcChartSettings("preview");
							this.calcOverviewSettings("basic");
							this.calcOverviewSettings("preview");

							if (!bNoAnimation) {
								this.renderChart();
								this.updateChart();
							} else {
								this.renderChart("preview");
							}
							this._dataset = "preview";

						} else {
							var originalDuration = this._duration;

							// otherwise we remove the deltas and display the basic view
							if (bPreviewShown && !bNoAnimation) {
								// in case we have to switch between one preview to the next one
								// we have to speed up a little bit
								this._duration /= 2;
							}

							// So first render the chart in the preview view and then animate the change
							// back to the basic view
							this.calcChartSettings("basic");
							this.calcChartSettings("preview");
							this.calcOverviewSettings("basic");
							this.calcOverviewSettings("preview");

							if (!bNoAnimation) {
								this.renderChart("preview");
								this.updateChart("basic");
							} else {
								this.renderChart("basic");
							}
							this._dataset = "basic";

							this.removeAllAggregation("deltas", true);

							// in case new deltas are to displayed we have to set those deltas now.
							// But to ensure a proper animation we need to do this with a delay
							if ((l > 0) && bPreviewShown && !bNoAnimation) {
								this.removeHandler();
								// this call will animate from basic chart to the new preview chart with a delay,
								// i.e. after the animation from current preview to basic chart has finished
								this._triggerDeltaDisplay = jQuery.sap.delayedCall(this._duration, this, jQuery.proxy(
										handleDelayedDeltas, this));
							}
							this._duration = originalDuration;
						}
					},

					setHeight : function(height, bSuppressInvalidate) {

						this.setProperty("height", height, true);
						if (!bSuppressInvalidate) {
							this.resizeChart();
						}
					},

					setWidth : function(width, bSuppressInvalidate) {

						this.setProperty("width", width, true);
						if (!bSuppressInvalidate) {
							this.resizeChart();
						}
					},

					/**
					 * @param iDay -
					 *          index in the array of values
					 * @returns the date corresponding to iDay
					 */
					getDate : function(iDay) {

						var aValues = this.getValues();
						var oDate = "";

						// get the date on the requested day
						if (aValues && (aValues.length > iDay) && (iDay >= 0) && (iDay === parseInt(iDay))) {
							oDate = new Date(aValues[iDay].getDate());
						}

						return oDate;
					},

					/**
					 * @param iDay -
					 *          index in the array of values
					 * @returns the formatted date corresponding to iDay
					 */
					getDateFormatted : function(iDay) {

						return this.formatDate(this.getDate(iDay));
					},

					/**
					 * @param oDate -
					 *          the date to format
					 * @returns the formatted date
					 */
					formatDate : function(oDate) {

						if (oDate) {
							return this._oChartFormatter.format(oDate);
						}
						return "";
					},

					/**
					 * This function is used to format all numbers in the chart
					 * 
					 * @param fNumber -
					 *          the number to format
					 * @returns the number formatted depending on its value
					 */
					formatNumber : function(fNumber) {

						var iUnitDecimals = this.getUnitDecimals();
						var bBigNumber = (fNumber >= 10000) || (fNumber <= -10000);
						var bSmallNumber = (fNumber < 100) && (fNumber > -100);

						if (bBigNumber) {
							return sap.ca.ui.model.format.QuantityFormat.FormatQuantityShort(fNumber, null, iUnitDecimals);
						} else if (bSmallNumber) {
							return sap.ca.ui.model.format.QuantityFormat.FormatQuantityStandard(fNumber, null, iUnitDecimals);
						} else {
							// we have to round the number by ourselves as passing 0 as decimals is the same
							// as not passing decimals at all (which results in a default of 3 decimals)
							return sap.ca.ui.model.format.QuantityFormat.FormatQuantityStandard(Math.round(fNumber));
						}
					},

					roundNumber : function(fNumber) {

						// due to rounding issues in javascript we have to ensure correct
						// rounding (15 -
						return Math.round(fNumber * 1000000) / 1000000;
					},

					/**
					 * 
					 * @param iDay -
					 *          the index within the array of values for which the demand should be returned
					 * @param bWithoutDelta -
					 *          flag to indicate if the deltas should be ignored
					 * @returns the demand of the (via index) specified day, optionally modified by the deltas on this day
					 */
					getDemand : function(iDay, bWithoutDelta) {

						var aValues = this.getValues();
						var aDeltas = this.getDeltas();
						var fDemand = 0;

						// get the demand on the requested date
						if (aValues && (aValues.length > iDay) && (iDay >= 0)) {
							fDemand = aValues[iDay].getDemand();

							if (!bWithoutDelta) {
								// update the demand with the delta on the same day
								// (might be a different index!)
								var l = (aDeltas && aDeltas.length) ? aDeltas.length : 0;

								for ( var i = 0; i < l; i++) {
									if (aDeltas[i].getDate() == aValues[iDay].getDate()) {
										fDemand += aDeltas[i].getDemand();
									}
								}
							}
						}

						return fDemand;
					},

					/**
					 * 
					 * @param iDay -
					 *          the index within the array of values for which the supply should be returned
					 * @param bWithoutDelta -
					 *          flag to indicate if the deltas should be ignored
					 * @returns the supply of the (via index) specified day, optionally modified by the deltas on this day
					 */
					getSupply : function(iDay, bWithoutDelta) {

						var aValues = this.getValues();
						var aDeltas = this.getDeltas();
						var fSupply = 0;

						if (aValues && (aValues.length > iDay) && (iDay >= 0)) {
							fSupply = aValues[iDay].getSupply();

							if (!bWithoutDelta) {
								// update the supply with the delta on the same day
								// (might be a different index!)
								var l = (aDeltas && aDeltas.length) ? aDeltas.length : 0;

								for ( var i = 0; i < l; i++) {
									if (aDeltas[i].getDate() == aValues[iDay].getDate()) {
										fSupply += aDeltas[i].getSupply();
									}
								}
							}
						}

						return fSupply;
					},

					getShortageAccepted : function(iDay) {

						var aValues = this.getValues();

						if (aValues && (aValues.length > iDay) && (iDay >= 0)) {
							return aValues[iDay].getShortageAccepted();
						}

						return false;
					},

					/**
					 * Rounds a value to the next "useful" value. This is used to make the y-axis a bit larger so there is a small
					 * margin at the top and the bottom of the chart. The actual size of the margins depends on the original min
					 * and max values of the y-axis.
					 */
					reDomain : function(value) {

						if (value > 0) {
							var dy = Math.pow(10, Math.round(Math.log(value + 1) / Math.log(10)) - 1);
							return Math.ceil((value + 1) / dy) * dy;
						} else if (value < 0) {
							return -this.reDomain(-value);
						} else {
							return 0;
						}
					},

					convertIntoOverviewPos : function(oChartSettings, oOverviewSettings, posX) {

						return Math.round(((posX - oChartSettings.chartSize.leftSpace) / oChartSettings.daySize
								* oOverviewSettings.daySize + oOverviewSettings.chartSize.leftSpace) * 10) / 10;
					},

					convertIntoDetailPos : function(oChartSettings, oOverviewSettings, posX) {

						return Math.round(((posX - oOverviewSettings.chartSize.leftSpace) / oOverviewSettings.daySize
								* oChartSettings.daySize + oChartSettings.chartSize.leftSpace) * 10) / 10;
					},

					isVisible : function(sData) {

						var oChartSettings = this.getChartSettings(sData);
						var oOverviewSettings = this.getOverviewSettings(sData);
						var oChart = jQuery("#" + this.getId());

						if (oChart && oChart.length) {

							if (oChart.innerWidth() === 0) {
								jQuery.sap.log.debug("Chart has width = 0");
								return false;
							}
						} else {
							jQuery.sap.log.debug("Chart not in DOM tree");
							return false;
						}

						if (oChartSettings.chartSize.chartHeight === 0) {
							jQuery.sap.log.debug("Chart has calculated height = 0");
							return false;
						}
						if (this.getShowOverview() && oOverviewSettings.chartSize.chartHeight === 0) {
							// return false;
						}
						return true;
					},

					/**
					 * @param sData -
					 *          defines if the setting for the standard chart or the preview chart should be returned.<br>
					 *          value "basic": return the settings for the standard chart<br>
					 *          value "preview": return the settings for the preview chart<br>
					 * @returns the calculated chart settings for either the standard chart or the preview chart<br>
					 * 
					 * Before this function can return the calculated settings it is necessary that
					 * <code>calcChartSettings()</code> has been executed for the requested chart type (i.e. standard or
					 * preview).
					 */
					getChartSettings : function(sData) {

						return this._oChartSettings[sData];
					},

					getOverviewSettings : function(sData) {

						return this._oOverviewSettings[sData];
					},

					/**
					 * 
					 * @param oChartSize -
					 *          defines the width and height of the value area in the chart
					 * @param oValueRange -
					 *          defines the minimum and maximum quantity values to be mapped to te y-axis
					 * @param oTimeframe -
					 *          defines the days to be mapped to the x-axis
					 * @returns the scaling functions for the x- and y-axis. These scaling functions allow to map the quantities
					 *          to pixel in y-direction and the index in the array of days to pixel in x-direction. The scaling
					 *          functions provide a value for arbitrary input values, not just within the interval used to define
					 *          the scaling functions. To define a scaling function it is necessary to use real *intervals* of
					 *          values. Otherwise all input values are mapped on the same output value.
					 */
					getScalingFunctions : function(oChartSize, oValueRange, oTimeframe) {

						var oScaling = {};
						// start with calculating the number of pixel used per day
						var startPosX = oChartSize.valueWidth / (oTimeframe.maxX - oTimeframe.minX);
						// Check if there is just one value, i.e. one day
						if ((oTimeframe.maxX - oTimeframe.minX) === 1) {
							// We have the special case that there is just one value. In this case we have to
							// define the scale function differently so it still defines a linear scaling,
							// i.e. it has two different values for the domain and the range
							oScaling.xScale = d3.scale.linear().domain([-1, 0]).range([0, startPosX]);
						} else {
							oScaling.xScale = d3.scale.linear().domain([oTimeframe.minX, oTimeframe.maxX - 1]).range(
									[startPosX, oChartSize.valueWidth]);
						}
						// reverse the vertical orientation because SVG has the origin in the left *upper* corner
						oScaling.yScale = d3.scale.linear().domain([oValueRange.minY, oValueRange.maxY]).range(
								[oChartSize.valueHeight, 0]);

						return oScaling;
					},

					/**
					 * Calculates the chart setting
					 * 
					 * @param sData -
					 *          defines if the setting for the standard chart or the preview chart should be calculated.<br>
					 *          value "basic": calculate the settings for the standard chart <br>
					 *          value "preview": return the settings for the preview chart <br>
					 * 
					 * Before this function can calculate the settings it is necessary that the size of the visible area
					 * (-visArea) has been set in the DOM tree (see <code>setChartSize()</code>).
					 */
					calcChartSettings : function(sData) {

						// Determine the start and end indexes within the array of values
						var oTimeframes = {
							basic : this.getTimeframe("basic"),
							preview : this.getTimeframe("preview")
						};

						// Create an array with supplies and demands for all days in the chart (including deltas for preview)
						var aData = this.d3Data(sData, oTimeframes[sData]);
						var dataLen = aData.length || 2;

						// determine the quantities with deltas of the day before the first visible day
						var oFirstBalance = {
							basic : this.getFirstBalance(oTimeframes.basic),
							preview : this.getFirstBalance(oTimeframes.preview)
						};

						// determine chart size
						var oChartVisArea = jQuery("#" + this.getId() + "-visArea");
						var chartWidth = (oChartVisArea && oChartVisArea.length) ? oChartVisArea.innerWidth() : 200;
						var chartHeight = (oChartVisArea && oChartVisArea.length) ? oChartVisArea.innerHeight() : 200;

						var iLeftSpace = 11;
						var iRightSpace = 12;
						var iTopBorder = 15;
						// var iBottomBorder = this.getShowOverview() ? 38 + 10 + Math.round(chartHeight / 8) : 38 + 10;
						// 38 pixel for the dates and 10 pixel margin
						var iBottomBorder = 38 + 10;

						// consider minimum chart width
						var minChartWidth = dataLen * (this.getMinBarSize() / 8 * 21) + (iLeftSpace + iRightSpace);

						if (chartWidth < minChartWidth) {
							chartWidth = minChartWidth;
						}

						var oChartSize = {
							leftSpace : iLeftSpace,
							rightSpace : iRightSpace,
							topBorder : iTopBorder,
							bottomBorder : iBottomBorder,
							chartWidth : chartWidth,
							valueWidth : chartWidth - (iLeftSpace + iRightSpace),
							chartHeight : chartHeight /*- (this.getShowOverview() ? Math.round(chartHeight / 8) : 0)*/,
							valueHeight : chartHeight - (iTopBorder + iBottomBorder)
						};

						// determine timeframe for the chart
						var oTimeframe = oTimeframes[sData];
						// determine the minimum and maximum values for the y-axis
						var oValueRange = this.getNumberRange(aData, sData);

						// determine scaling functions for x- and y-axis
						// these scaling functions map
						// - an index within the array of values to a pixel value on the x-axis for that day
						// - a quantity to a pixel value on the y-axis
						var oScaling = this.getScalingFunctions(oChartSize, oValueRange, oTimeframe);

						// use one tick per day but reduce the number of ticks if the day size becomes too small
						// var iTickCntX = Math.min(aData.length, Math.round(oChartSize.valueWidth / 126));
						var iDaySize = oScaling.xScale(1) - oScaling.xScale(0);
						var iTickCntX = (iDaySize < 48 + 24) ? Math.round(aData.length / 2) : aData.length;
						// Define the approximate number of ticks for the y-axis. The actual ticks will be generated by d3.
						// d3 uses this value as "hint" how many ticks it should generate.
						var iTickCntY = Math.round(oChartSize.valueHeight / 40);

						// return the settings
						this._oChartSettings[sData] = {
							chartId : this.getId(),
							firstBalance : oFirstBalance,
							data : aData,
							timeframe : oTimeframe,
							xScale : oScaling.xScale,
							yScale : oScaling.yScale,
							tickCntX : iTickCntX,
							tickCntY : iTickCntY,
							chartSize : oChartSize,
							posY0 : oScaling.yScale(0),
							daySize : iDaySize,
							displayText : true,
							fireEvent : true
						};
					},

					/**
					 * Calculates the chart settings for the overview area.
					 * 
					 * @param sData -
					 *          defines if the setting for the standard chart or the preview chart should be calculated.<br>
					 *          value "basic": calculate the settings for the standard chart <br>
					 *          value "preview": return the settings for the preview chart <br>
					 * 
					 * Before this function can calculate the settings it is necessary that <code>calcChartSettings()</code> has
					 * been executed for the requested chart type (i.e. standard or preview). It is also necessary that the size
					 * of the visible overview area (-overview-visArea) has been set in the DOM tree (see
					 * <code>setChartSize()</code>).
					 * 
					 */
					calcOverviewSettings : function(sData) {

						// Determine the start and end indexes within the array of values
						var oTimeframes = {
							basic : this.getTimeframe("basic"),
							preview : this.getTimeframe("preview")
						};

						// Create an array with supplies and demands for all days in the chart (including deltas for preview)
						var aData = this.d3Data(sData, oTimeframes[sData]);
						var dataLen = aData.length || 2;

						// determine the quantities with deltas of the day before the first visible day
						var oFirstBalance = {
							basic : this.getFirstBalance(oTimeframes.basic),
							preview : this.getFirstBalance(oTimeframes.preview)
						};

						// determine chart size
						var oOverviewArea = jQuery("#" + this.getId() + "-overview-area");
						// var chartHeight = (oOverviewArea && oOverviewArea.length) ? oOverviewArea.height() : 200;

						var oChartVisArea = jQuery("#" + this.getId() + "-overview-visArea");
						var chartWidth = (oChartVisArea && oChartVisArea.length) ? oChartVisArea.width() : 200;
						var chartHeight = (oChartVisArea && oChartVisArea.length) ? oChartVisArea.height() : 0;

						// calculate chart width of the overview relative to the chart width
						// of the regular chart
						var oChartSettings = this.getChartSettings(sData);

						var minDaySize = this.getMinOverviewBarSize() / 8 * 21;
						var minChartWidth = oChartSettings.chartSize.chartWidth / oChartSettings.daySize * minDaySize;
						var daySize = 0;

						if (minDaySize > 0) {

							if (chartWidth < minChartWidth) {
								chartWidth = minChartWidth;
							}
							daySize = minDaySize * chartWidth / minChartWidth;

						} else {
							daySize = oChartSettings.daySize / oChartSettings.chartSize.chartWidth * chartWidth;
						}

						// calculate left and right space as well as day size relative to
						// the settings of the chart
						var iLeftSpace = oChartSettings.chartSize.leftSpace / oChartSettings.daySize * daySize;
						var iRightSpace = oChartSettings.chartSize.rightSpace / oChartSettings.daySize * daySize;
						var iTopBorder = 0;
						var iBottomBorder = 0;

						var oChartSize = {
							leftSpace : iLeftSpace,
							rightSpace : iRightSpace,
							topBorder : iTopBorder,
							bottomBorder : iBottomBorder,
							chartWidth : chartWidth,
							valueWidth : chartWidth - (iLeftSpace + iRightSpace),
							chartHeight : chartHeight,
							valueHeight : chartHeight - (iTopBorder + iBottomBorder)
						};

						// determine timeframe for the chart
						var oTimeframe = oTimeframes[sData];
						// determine the minimum and maximum values for the y-axis
						var oValueRange = this.getNumberRange(aData, sData);

						// determine scaling functions for x- and y-axis
						// these scaling functions map
						// - an index within the array of values to a pixel value on the x-axis for that day
						// - a quantity to a pixel value on the y-axis
						var oScaling = this.getScalingFunctions(oChartSize, oValueRange, oTimeframe);

						// use one tick per day but reduce the number of ticks if the day size becomes too small
						var iDaySize = oScaling.xScale(1) - oScaling.xScale(0);
						var iTickCntX = (iDaySize < 48 + 24) ? Math.round(aData.length / 2) : aData.length;
						// Define the approximate number of ticks for the y-axis. The actual ticks will be generated by d3.
						// d3 uses this value as "hint" how many ticks it should generate.
						var iTickCntY = Math.round(oChartSize.valueHeight / 40);

						// return the settings
						this._oOverviewSettings[sData] = {
							chartId : this.getId() + "-overview",
							firstBalance : oFirstBalance,
							data : aData,
							timeframe : oTimeframe,
							xScale : oScaling.xScale,
							yScale : oScaling.yScale,
							tickCntX : iTickCntX,
							tickCntY : iTickCntY,
							chartSize : oChartSize,
							posY0 : oScaling.yScale(0),
							daySize : iDaySize,
							displayText : false,
							fireEvent : false
						};
					},

					/**
					 * 
					 * @param aData -
					 *          the array with values for all days in the chart
					 * @param sData -
					 *          defines if the values for the standard chart or the preview chart should be calculated.<br>
					 *          value "basic": calculate the values for the standard chart <br>
					 *          value "preview": return the values for the preview chart <br>
					 * @returns the maximum and minimum quantity (y-axis) that will be shown in the chart
					 */
					getNumberRange : function(aData, sData) {

						// get minimum and maximum value (considering all intraday stocks as well)
						var minY = d3.min(aData, function(d) {
							return Math.min(0, d[sData].balanceStart, d[sData].balanceIntraday, d[sData].balanceEnd);
						});
						var maxY = d3.max(aData, function(d) {
							return Math.max(0, d[sData].balanceStart, d[sData].balanceIntraday, d[sData].balanceEnd);
						});

						// ensure that at least 5% of the maximum is used as minimum
						if (minY > -maxY / 20) {
							minY = -maxY / 20;
						}
						// ensure that at least 5% of the minimum is used as maximum
						if (maxY < -minY / 20) {
							maxY = -minY / 20;
						}

						// redomain the values (rounding)
						return {
							minY : this.reDomain(minY),
							maxY : this.reDomain(maxY)
						};
					},

					getTimeframe : function(sData) {

						// determine index of first and last date for the specified view
						var sMinDate = this.getMinDate();
						var sMaxDate = this.getMaxDate();
						var oMinDate = (sMinDate) ? new Date(sMinDate) : null;
						var oMaxDate = (sMaxDate) ? new Date(sMaxDate) : null;
						var aChartValues = this.getValues();
						var iChartValueCnt = (aChartValues) ? aChartValues.length : 0;
						var oChartValue = {};

						var oTimeframe = {
							// start index within the array of values:
							minX : 0,
							// end index within the array of values:
							maxX : iChartValueCnt,
							// only for preview: start index within the array of values for basic view:
							minXBasic : 0,
							// only used for preview: end index within the array of values for basic view:
							maxXBasic : iChartValueCnt
						};

						// if a minimum or maximum date is specified, we have to restrict
						// the timeframe that is displayed in the chart
						if (oMinDate || oMaxDate) {

							// In case of a preview, we might have to extend this timeframe so that
							// all deltas are shown as well
							if (sData == "preview") {

								var aDeltas = this.getDeltas();
								var oDelta;
								var l = (aDeltas && aDeltas.length) ? aDeltas.length : 0;

								for ( var i = 0; i < l; i++) {
									oDelta = aDeltas[i];
									var oDeltaDate = new Date(oDelta.getDate());
									if (oDeltaDate < oMinDate) {
										oMinDate = oDeltaDate;
									}
									if (oDeltaDate > oMaxDate) {
										oMaxDate = oDeltaDate;
									}
								}

								// We change the timeframe for the preview. But we also need the
								// first and last index for the basic view. So we request those
								// indexes separately
								var oBasicTimeframe = this.getTimeframe("basic");
								oTimeframe.minXBasic = oBasicTimeframe.minX;
								oTimeframe.maxXBasic = oBasicTimeframe.maxX;
							}

							// determine the minimum and maximum index for the specified
							// timeframe
							for ( var i = 0; i < iChartValueCnt; i++) {
								oChartValue = aChartValues[i];
								if (oChartValue.getDate() == oMinDate) {
									oTimeframe.minX = i;
									break;
								}
							}

							for ( var i = 0; i < iChartValueCnt; i++) {
								oChartValue = aChartValues[i];
								if (oChartValue.getDate() == oMaxDate) {
									oTimeframe.maxX = i + 1;
								}
							}
						}

						return oTimeframe;
					},

					/**
					 * 
					 * @param oTimeframe -
					 *          component <code>minX</code> contains the index of the first visible day
					 * @param bWithoutDelta -
					 *          flag to indicate if the deltas should be ignored
					 * @returns the quantity before the first visible day, optionally modified by the deltas
					 */
					getFirstBalance : function(oTimeframe, bWithoutDelta) {

						// determine start balance (balance of the day before
						// first visible date)
						var fDemand = 0;
						var fSupply = 0;
						var fBalance = this.getStartBalance();

						// Add the quantities of all days before the first visible day
						for ( var i = 0; i < oTimeframe.minX; i++) {

							fDemand = this.getDemand(i, bWithoutDelta);
							fSupply = this.getSupply(i, bWithoutDelta);
							fBalance = fBalance + fDemand + fSupply;
						}

						return this.roundNumber(fBalance);
					},

					/**
					 * 
					 * @param oTimeframe -
					 *          defines what values from the array of values should be used
					 * @returns an array with data for each day in the chart which is used by d3 to create the chart
					 */
					d3Data : function(sData, oTimeframe) {

						// determine start balance (balance of the day before
						// first visible date)
						var bShortageAccepted = false;
						var fDemand = 0;
						var fSupply = 0;
						var fDemandTotal = 0;
						var fSupplyTotal = 0;
						// determine the quantities with no deltas of the day before the first visible day
						var fBalance = this.getFirstBalance(oTimeframe, true);
						// determine the quantities with deltas (preview) of the day before the first visible day
						var fBalanceTotal = this.getFirstBalance(oTimeframe, false);
						var fMinStock = this.getMinStock();
						var fSafetyStock = this.getSafetyStock();
						var oD3Value;

						// create the data and start with an initial date
						var aD3Values = [];

						// create the array with all supplies and demands (and deltas for preview) that
						// will be used by d3 to create the chart
						for ( var i = oTimeframe.minX; i < oTimeframe.maxX; i++) {

							bShortageAccepted = this.getShortageAccepted(i);
							fSupply = this.getSupply(i, true);
							fDemand = this.getDemand(i, true);
							fSupplyTotal = this.getSupply(i);
							fDemandTotal = this.getDemand(i);

							// calculate size and position of demand and supply box
							// Since we display both the supply and the demand for each day, and we assume
							// all supplies occur before all demands occur during the day, we need
							// - the quantity at the beginning of a day (balanceStart)
							// - the quantity after all supplies occurred (balanceIntraday)
							// - the quantity at the end of the day (balanceEnd)
							oD3Value = {
								index : i,
								date : this.getDate(i),
								minStock : fMinStock,
								safetyStock : fSafetyStock,
								shortageAccepted : bShortageAccepted,
								basic : {
									balanceStart : this.roundNumber(fBalance),
									supply : fSupply,
									balanceIntraday : this.roundNumber(fBalance + fSupply),
									demand : fDemand,
									balanceEnd : this.roundNumber(fBalance + fSupply + fDemand)
								},
								preview : {
									balanceStart : this.roundNumber(fBalanceTotal),
									supply : this.getSupply(i),
									balanceIntraday : this.roundNumber(fBalanceTotal + fSupplyTotal),
									demand : this.getDemand(i),
									balanceEnd : this.roundNumber(fBalanceTotal + fSupplyTotal + fDemandTotal)
								}
							};
							aD3Values.push(oD3Value);

							fBalance += oD3Value.basic.demand + oD3Value.basic.supply;
							fBalanceTotal += oD3Value.preview.demand + oD3Value.preview.supply;
						}

						// TODO: here it should be possible to just return aD3Values instead of using the d3 functions below
						var D3Map = function(i) {
							return aD3Values[i];
						};

						// Number of values in array
						var l = oTimeframe.maxX - oTimeframe.minX;
						return d3.range(l).map(D3Map);
					},

					/**
					 * Sets the size of the different chart container elements, particularly<br>
					 * -width and height of background area <br>
					 * -height of chart visible area <br>
					 * -width and shift position of chart area <br>
					 * -height of overview area <br>
					 * -width and shift position of overview chart area <br>
					 * -line height and font size of both scroll buttons <br>
					 * These values are determined based on the original size of the chart control.<br>
					 * This fuction also calls <code>calcChartSettings()</code> and <code>calcOverviewSettings()</code>
					 */
					setChartSize : function() {

						var oChartControl = jQuery("#" + this.getId());

						if (oChartControl && oChartControl.length) {

							// calculate width and height of the visible area of the chart control
							var visAreaWidth = oChartControl.width();
							var visAreaHeight = oChartControl.height();

							// if navigator(=overview) is visible, reduce height of visible area
							var overviewHeight = 0;
							if (this.getShowOverview()) {
								overviewHeight = this.getFixOverviewHeight();
								if (!overviewHeight) {
									overviewHeight = Math.round(visAreaHeight / 8);
								}
							}
							visAreaHeight -= overviewHeight;

							// set height of Y-Axis
							var oBackground = jQuery("#" + this.getId() + "-backgroundArea");

							if (oBackground && oBackground.length) {

								oBackground[0].style.width = visAreaWidth + "px";
								oBackground[0].style.height = visAreaHeight + "px";
							}

							// set height of visible part of the chart area
							// note: this must be done before calcChartSettings() is called below
							var visAreaInnerWidth = visAreaWidth;
							var oVisArea = jQuery("#" + this.getId() + "-visArea");

							if (oVisArea && oVisArea.length) {
								oVisArea[0].style.height = visAreaHeight + "px";
								visAreaInnerWidth = oVisArea.innerWidth();
							}

							// set the size of the chart area: use at least the minimum width for all days
							this.calcChartSettings("basic");
							this.calcChartSettings("preview");

							var oChartSettings = this.getChartSettings(this._dataset);

							var oChartArea = jQuery("#" + this.getId() + "-chartArea");

							if (oChartArea && oChartArea.length) {
								oChartArea[0].style.width = oChartSettings.chartSize.chartWidth + "px";
								// also adjust attribute "left" in case there's more available space now
								// for the chart and it's scrolled left
								var iMaxShiftLeft = visAreaInnerWidth - oChartArea.outerWidth();
								// note: the shift values are negative or 0
								// here we make sure that the current shift position is between iMaxShiftLeft (negative number) and 0
								var iShift = Math.min(Math.max(this.getShiftLeft(), iMaxShiftLeft), 0);
								oChartArea[0].style.left = iShift + "px";
								this.setProperty("shiftLeft", iShift, true);
							}

							// set the height of the visible part of the overview area
							// note: this must be done before calcOverviewSettings() is called below
							if (this.getShowOverview()) {

								var visOverviewAreaWidth = visAreaWidth;
								var oOverviewArea = jQuery("#" + this.getId() + "-overview-area");
								var oVisOverviewArea = jQuery("#" + this.getId() + "-overview-visArea");

								if (oOverviewArea && oOverviewArea.length) {
									oOverviewArea[0].style.height = overviewHeight + "px";
								}
								if (oVisOverviewArea && oVisOverviewArea.length) {
									visOverviewAreaWidth = oVisOverviewArea.innerWidth();
								}
								this.calcOverviewSettings("basic");
								this.calcOverviewSettings("preview");

								var oOverviewSettings = this.getOverviewSettings(this._dataset);

								var oOverviewChartArea = jQuery("#" + this.getId() + "-overview-chartArea");

								if (oOverviewChartArea && oOverviewChartArea.length) {
									oOverviewChartArea[0].style.width = oOverviewSettings.chartSize.chartWidth + "px";
									var iMaxShiftLeft = visOverviewAreaWidth - oOverviewChartArea.outerWidth();
									var iShift = Math.min(Math.max(oOverviewChartArea.position().left, iMaxShiftLeft), 0);
									oOverviewChartArea[0].style.left = iShift + "px";
								}

								// set the line height of the left and right button
								var oOvrScrollLeft = jQuery("#" + this.getId() + "-ovrScrollLeft");
								var oOvrScrollRight = jQuery("#" + this.getId() + "-ovrScrollRight");

								if (oOvrScrollLeft && oOvrScrollLeft.length) {
									var scrollBtnHeight = oOvrScrollLeft.innerHeight();
									oOvrScrollLeft[0].style.lineHeight = scrollBtnHeight + "px";
									if (scrollBtnHeight && (scrollBtnHeight < 16)) {
										oOvrScrollLeft[0].style.fontSize = scrollBtnHeight + "px";
									}

								}
								if (oOvrScrollRight && oOvrScrollRight.length) {
									var scrollBtnHeight = oOvrScrollRight.innerHeight();
									oOvrScrollRight[0].style.lineHeight = scrollBtnHeight + "px";
									if (scrollBtnHeight && (scrollBtnHeight < 16)) {
										oOvrScrollRight[0].style.fontSize = scrollBtnHeight + "px";
									}
								}
							}
						}
					},

					showDetailsInOverview : function() {

						if (!this.getShowOverview()) {
							return;
						}
						if (!this.isVisible(this._dataset)) {
							return;
						}

						var oChartSettings = this.getChartSettings(this._dataset);
						var oOverviewSettings = this.getOverviewSettings(this._dataset);

						var oChartArea = jQuery("#" + this.getId() + "-chartArea");
						var oOverviewArea = jQuery("#" + this.getId() + "-overview-chartArea");

						if (oChartArea && oChartArea.length && oOverviewArea && oOverviewArea.length) {

							// calculate the visible part of the detail view
							var shiftLeftChart = -oChartArea[0].offsetLeft;
							var visibleWidthChart = oChartArea.parent().innerWidth();

							var shiftLeftOverview = -oOverviewArea[0].offsetLeft;
							var visibleWidthOverview = oOverviewArea.parent().innerWidth();

							// translate the information from the detail view into coordinates of
							// the overview
							var fromX = this.convertIntoOverviewPos(oChartSettings, oOverviewSettings, shiftLeftChart);
							var toX = this.convertIntoOverviewPos(oChartSettings, oOverviewSettings, shiftLeftChart
									+ visibleWidthChart - oChartSettings.chartSize.leftSpace);

							// if the visible window is outside the visible part of the overview
							// shift the overview as well
							if (fromX < shiftLeftOverview) {
								oOverviewArea[0].style.left = -fromX + "px";
							}

							if (toX + oOverviewSettings.chartSize.leftSpace > shiftLeftOverview + visibleWidthOverview) {
								oOverviewArea[0].style.left = visibleWidthOverview - toX - oOverviewSettings.chartSize.leftSpace + "px";
							}

							// refresh the visible part within the overview
							var vis = d3.select("#" + oOverviewSettings.chartId + "-chartArea svg g");

							this.updateOverviewWindow(vis, oOverviewSettings, fromX, toX);
						}
					},

					showOverviewInDetails : function() {

						var oChartSettings = this.getChartSettings(this._dataset);
						var oOverviewSettings = this.getOverviewSettings(this._dataset);

						var oChartArea = jQuery("#" + this.getId() + "-chartArea");
						var oOverviewArea = jQuery("#" + this.getId() + "-overview-chartArea");

						if (oChartArea && oChartArea.length && oOverviewArea && oOverviewArea.length) {

							// calculate the visible part within the overview
							var overviewLeft = d3.select("#" + oOverviewSettings.chartId + "-hidden-left").attr("width");
							var overviewRight = d3.select("#" + oOverviewSettings.chartId + "-hidden-right").attr("x");

							// translate the information from the overview into coordinates of the
							// detail view
							var shiftLeftChart = this.convertIntoDetailPos(oChartSettings, oOverviewSettings, overviewLeft
									- oOverviewSettings.chartSize.leftSpace)
									+ oChartSettings.chartSize.leftSpace;

							// adjust the detail chart
							oChartArea[0].style.left = -shiftLeftChart + "px";
							this.setProperty("shiftLeft", -shiftLeftChart, true);
							return -shiftLeftChart;
						}

						return 0;
					},

					shiftLeftChart : function(sPath, iDeltaX) {

						var oVisArea = jQuery("#" + sPath + "-visArea");
						var oChartArea = jQuery("#" + sPath + "-chartArea");

						if (oVisArea && oVisArea.length && oChartArea && oChartArea.length) {

							var iMaxShiftLeft = oVisArea.innerWidth() - oChartArea.outerWidth();
							// note: this._iStartOffsetX is always <= 0 and iMaxShiftLeft is always <= 0
							var iShift = Math.min(Math.max(this._iStartOffsetX + iDeltaX, iMaxShiftLeft), 0);
							oChartArea[0].style.left = iShift + "px";
							this.setProperty("shiftLeft", iShift, true);

							return iShift;
						}
						return this._iStartOffsetX;
					},

					shiftLeftOverviewWindow : function(iDeltaX) {

						// calculate new position of the overview window
						var overviewLeft = d3.select("#" + this.getId() + "-overview-hidden-left");
						var overviewRight = d3.select("#" + this.getId() + "-overview-hidden-right");
						var overviewWindow = d3.select("#" + this.getId() + "-overview-hidden-window");

						var oVisArea = jQuery("#" + this.getId() + "-overview-visArea");
						var oChartArea = jQuery("#" + this.getId() + "-overview-chartArea");

						var overviewLeftX = parseFloat(overviewLeft.attr("x"));
						var overviewLeftWidth = parseFloat(overviewLeft.attr("width"));
						var overviewRightX = parseFloat(overviewRight.attr("x"));
						var overviewRightWidth = parseFloat(overviewRight.attr("width"));

						var oOverviewSettings = this.getOverviewSettings(this._dataset);

						// check if the new position would be outside the valid range
						if (overviewLeftWidth + iDeltaX < 0) {
							iDeltaX = -overviewLeftWidth;
						}

						if (overviewRightWidth - iDeltaX < 0) {
							iDeltaX = overviewRightWidth;
						}

						// check if the overview window would be displayed outside the visible area
						if (overviewLeftWidth + iDeltaX < -oChartArea[0].offsetLeft) {
							oChartArea[0].style.left = -(overviewLeftWidth + iDeltaX) + "px";
						}

						if (overviewRightX + iDeltaX + oOverviewSettings.chartSize.leftSpace > oVisArea.innerWidth()
								- oChartArea[0].offsetLeft) {
							oChartArea[0].style.left = oVisArea.innerWidth() - overviewRightX - iDeltaX
									- oOverviewSettings.chartSize.leftSpace + "px";
						}

						overviewLeft.attr("width", overviewLeftWidth + iDeltaX);
						overviewRight.attr("x", overviewRightX + iDeltaX).attr("width", overviewRightWidth - iDeltaX);
						overviewWindow.attr("x", overviewLeftX + overviewLeftWidth + iDeltaX).attr("width",
								overviewRightX - overviewLeftX - overviewLeftWidth);

						return iDeltaX;
					},

					resizeChart : function() {

						// change the size of the chart control
						var oChart = jQuery("#" + this.getId());

						if (oChart && oChart.length) {

							var height = this.getHeight();
							var width = this.getWidth();
							oChart[0].style.height = height;
							oChart[0].style.width = width;

							// remove the old chart ...
							var overview = d3.select("#" + this.getId() + "-overview-chartArea svg").remove();
							var chart = d3.select("#" + this.getId() + "-chartArea svg").remove();
							var axis = d3.select("#" + this.getId() + "-backgroundArea svg").remove();

							// ...and create a new one
							this.setChartSize();
							this.renderChart(this._dataset);
						}
					},

					onShortageSelected : function(d) {

						if (d[this._dataset].balanceEnd < d.safetyStock) {
							if (this.getAllowNavigation() === true) {
								this.fireEvent("selected", d);
							} else {
								if (this.getNoNavigationText() != "") {
									sap.m.MessageToast.show(this.getNoNavigationText());
								}
							}
						}
					},

					/**
					 * This function handles the event when a user has clicked on the chart. <br>
					 * The function checks where on the chart the click happended:<br>
					 * 1) in the chart<br>
					 * -determine the date of the day on which the user clicked<br>
					 * -if it is a valid day fire the shortageSelected event<br>
					 * 2) in the overview area on the left of the visible detail window or<br>
					 * -move the overview window to the left by half its width<br>
					 * 3) in the overview area on the right of the visible detail window or<br>
					 * -move the overview window to the right by half its width<br> -
					 * 
					 * @param oEvent
					 */
					onclick : function(oEvent) {

						// Hint: We don't use the ontap function here (which is the one that should be
						// used) as we need to determine the offsetX of the event and jQuery returns
						// this value only for the click event

						// helper function to determine whether a DOM node contains another one
						// (unfortunately IE 10 doesn't support the "contains" function for SVG nodes,
						// so we need this wrapper)
						var contains = function(nodeA, nodeB) {
							if (nodeA.compareDocumentPosition) {
								return (nodeA === nodeB) || (nodeA.compareDocumentPosition(nodeB) & 16);
							} else if (nodeA.contains) {
								return nodeA.contains(nodeB);
							} else {
								return false;
							}
						};

						if (!this._tapStart) {
							return;
						}

						var oChartArea = jQuery("#" + this.getId() + "-chartArea");
						var oOvrWindow = jQuery("#" + this.getId() + "-overview-hidden-window");
						var oOvrBtnLeft = jQuery("#" + this.getId() + "-ovrScrollLeft");
						var oOvrBtnRight = jQuery("#" + this.getId() + "-ovrScrollRight");
						var oOvrHdnLeft = jQuery("#" + this.getId() + "-overview-hidden-left");
						var oOvrHdnRight = jQuery("#" + this.getId() + "-overview-hidden-right");
						var iWidth = (oOvrWindow) ? parseInt(oOvrWindow.attr("width") / 2) : 0;

						// if the user clicked into the chart area, determine which day was selected
						if (oChartArea && oChartArea.length && contains(oChartArea[0], oEvent.target)) {
							var posX = oEvent.getOffsetX();
							if (oEvent.target.offsetLeft) {
								posX += oEvent.target.offsetLeft;
							};
							var oChartSettings = this.getChartSettings(this._dataset);
							var iDay = Math.floor((posX - oChartSettings.chartSize.leftSpace) / oChartSettings.daySize);
							if ((iDay >= 0) && (oChartSettings.data[iDay])) {
								this.onShortageSelected(oChartSettings.data[iDay]);
							}
						}

						// if the user clicked of left button, move to the left
						var bBtnLeft = (oOvrBtnLeft && oOvrBtnLeft.length && contains(oOvrBtnLeft[0], oEvent.target));
						var bHdnLeft = (oOvrHdnLeft && oOvrHdnLeft.length && contains(oOvrHdnLeft[0], oEvent.target));
						if (bBtnLeft || bHdnLeft) {

							this.shiftLeftOverviewWindow(-iWidth);
							this.showOverviewInDetails();
						}

						// if the user clicked of right button, move to the right
						var bBtnRight = (oOvrBtnRight && oOvrBtnRight.length && contains(oOvrBtnRight[0], oEvent.target));
						var bHdnRight = (oOvrHdnRight && oOvrHdnRight.length && contains(oOvrHdnRight[0], oEvent.target));
						if (bBtnRight || bHdnRight) {
							this.shiftLeftOverviewWindow(iWidth);
							this.showOverviewInDetails();
						}
					},

					move : function(oEvent) {

						var oTouchEvent = oEvent.targetTouches[0] ? oEvent.targetTouches[0] : oEvent;
						var iCurrMoveX = (oTouchEvent.pageX) ? oTouchEvent.pageX : oTouchEvent.clientX;
						var iMoveX = iCurrMoveX - this._iStartMoveX;

						// determine if chart can be shifted by this delta to the left/right
						// * max. shift left = chart width - width of visible area
						// * max. shift right = 0
						if (this._bHidden) {
							this._iStartOffsetX = this.shiftLeftChart(this.getId() + "-overview", iMoveX);
							this._iStartMoveX = iCurrMoveX;
						} else if (this._bChart) {
							this._iStartOffsetX = this.shiftLeftChart(this.getId(), iMoveX);
							this._iStartMoveX = iCurrMoveX;
							this.showDetailsInOverview();
						} else if (this._bOverview) {
							this._iStartOffsetX = this.shiftLeftOverviewWindow(iMoveX);
							this._iStartMoveX = iCurrMoveX;
							var shiftLeftChart = this.showOverviewInDetails();
						}

						// if move was for more than 5 pixel, we have to prevent the "selected" event
						// to be fired
						if (Math.abs(this._iStartMoveX - this._iTapStartX) > 5) {
							this._tapStart = false;
						}
					},

					ontouchstart : function(oEvent) {

						// helper function to determine whether a DOM node contains another one
						// (unfortunately IE 10 doesn't support the "contains" function for SVG nodes,
						// so we need this wrapper)
						var contains = function(nodeA, nodeB) {
							if (nodeA.compareDocumentPosition) {
								return (nodeA === nodeB) || (nodeA.compareDocumentPosition(nodeB) & 16);
							} else if (nodeA.contains) {
								return nodeA.contains(nodeB);
							} else {
								return false;
							}
						};

						var oTouchEvent = oEvent.targetTouches[0] ? oEvent.targetTouches[0] : oEvent;
						// This is the detail window (which corresponds to the visible part of the chart) within the overview area
						var oOverviewArea = jQuery("#" + this.getId() + "-overview-hidden-window");
						var oOverviewHidden = jQuery("#" + this.getId() + "-overview-hidden");
						var oChartArea = jQuery("#" + this.getId() + "-chartArea");

						// determine in which part of the chart the touch started
						this._bOverview = oOverviewArea && oOverviewArea.length && contains(oOverviewArea[0], oTouchEvent.target);
						this._bHidden = (!this._bOverview) && oOverviewHidden && oOverviewHidden.length
								&& contains(oOverviewHidden[0], oTouchEvent.target);
						this._bChart = oChartArea && oChartArea.length && contains(oChartArea[0], oTouchEvent.target);

						// determine current shift of the respective chart area
						if (this._bHidden) {
							this._iStartOffsetX = oOverviewArea[0].offsetLeft;
						} else if (this._bChart) {
							this._iStartOffsetX = oChartArea[0].offsetLeft;
						} else if (this._bOverview) {
							this._iStartOffsetX = oOverviewArea[0].offsetLeft;
						}

						this._iStartMoveX = (oTouchEvent.pageX) ? oTouchEvent.pageX : oTouchEvent.clientX;
						this._touchStarted = true;
						this._tapStart = true;
						this._iTapStartX = this._iStartMoveX;

						// replace the cursor in the overview window if touch belongs to it
						if (this._bOverview) {
							var ovrWindow = d3.select("#" + this.getId() + "-overview-hidden-window");
							var bSpecialCursor = !this.getFixOverviewHeight();
							var sCSSOverviewWindow = (bSpecialCursor)
									? "sapMRPChartOverviewWindow"
									: "sapMRPChartOverviewWindowSimple";
							sCSSOverviewWindow += " sapMRPChartExecDrag";
							ovrWindow.attr("class", sCSSOverviewWindow);
						}

						if (this._bChart) {
							oChartArea.removeClass("sapMRPChartNavigation");
							oChartArea.removeClass("sapMRPChartStartDrag");
							oChartArea.addClass("sapMRPChartExecDrag");
						}
					},

					ontouchend : function(oEvent) {

						this._touchStarted = false;

						if (this._bOverview) {
							var ovrWindow = d3.select("#" + this.getId() + "-overview-hidden-window");
							var bSpecialCursor = !this.getFixOverviewHeight();
							var sCSSOverviewWindow = (bSpecialCursor)
									? "sapMRPChartOverviewWindow"
									: "sapMRPChartOverviewWindowSimple";
							sCSSOverviewWindow += " sapMRPChartStartDrag";
							ovrWindow.attr("class", sCSSOverviewWindow);
						}

						if (this._bChart) {
							var allowNavigation = this.getAllowNavigation();
							var oChartArea = jQuery("#" + this.getId() + "-chartArea");
							oChartArea.removeClass("sapMRPChartExecDrag");
							if (allowNavigation) {
								oChartArea.addClass("sapMRPChartNavigation");
							} else {
								oChartArea.addClass("sapMRPChartStartDrag");
							}
						}
					},

					ontouchmove : function(oEvent) {

						this.move(oEvent);
						oEvent.preventDefault();
						oEvent.stopPropagation();
					},

					onBeforeRendering : function() {

						this.removeHandler();
					},

					onAfterRendering : function() {

						this.setChartSize();
						this.renderChart();
					},

					renderer : function(oRm, oControl) {

						var allowNavigation = oControl.getAllowNavigation();

						oRm.write("<div");
						oRm.writeControlData(oControl); // write the Control ID and
						// enables event handling - important!
						oRm.addClass("sapMRPChart");
						oRm.writeClasses(); // write the above classes
						// plus enables support for addStyleClass(...)
						var minHeight = oControl.getMinChartHeight();
						if (minHeight) {
							oRm.addStyle("min-height", minHeight);
						}
						oRm.addStyle("height", oControl.getHeight());
						oRm.addStyle("width", oControl.getWidth());
						oRm.writeStyles();
						oRm.write(">");

						// DIV for chart background (no horizontal scrolling)
						oRm.write("<div id='");
						oRm.writeEscaped(oControl.getId());
						oRm.write("-backgroundArea' class='sapMRPChartBackground'>");
						oRm.write("</div>");

						// DIV for chart (with horizontal scrolling)
						oRm.write("<div id='");
						oRm.writeEscaped(oControl.getId());
						oRm.write("-visArea' class='sapMRPChartVisArea'>");
						oRm.write("<div id='");
						oRm.writeEscaped(oControl.getId());
						oRm.write("-chartArea'");
						oRm.addClass("sapMRPChartArea");
						if (allowNavigation) {
							oRm.addClass("sapMRPChartNavigation");
						} else {
							oRm.addClass("sapMRPChartStartDrag");
						}
						oRm.writeClasses();
						oRm.write(">");

						oRm.write("</div>");
						oRm.write("</div>");

						// DIV for the overview with left and right scroll button
						oRm.write("<div id='");
						oRm.writeEscaped(oControl.getId());
						oRm.write("-overview-area'");
						oRm.addClass("sapMRPChartOverview");
						if (oControl.getFixOverviewHeight()) {
							// oRm.addClass("sapMRPChartOverviewSimple")
						}
						oRm.writeClasses();
						oRm.write(">");
						// DIV for the overview (with horizontal scrolling)
						oRm.write("<div id='");
						oRm.writeEscaped(oControl.getId());
						oRm.write("-overview-visArea' class='sapMRPChartOverviewVisArea'>");
						// DIV to display the overview chart
						oRm.write("<div id='");
						oRm.writeEscaped(oControl.getId());
						oRm.write("-overview-chartArea' class='sapMRPChartOverviewArea'>");
						oRm.write("</div>");
						oRm.write("</div>");

						if (oControl._ovrBtnLeft) {
							oRm.write("<div id='");
							oRm.writeEscaped(oControl.getId());
							oRm.write("-ovrScrollLeft' class='sapMRPChartOverviewScrollLeft'>");
							if (oControl.getShowOverview()) {
								oRm.renderControl(oControl._ovrBtnLeft);
							}
							oRm.write("</div>");
						};
						if (oControl._ovrBtnRight) {
							oRm.write("<div id='");
							oRm.writeEscaped(oControl.getId());
							oRm.write("-ovrScrollRight' class='sapMRPChartOverviewScrollRight'>");
							if (oControl.getShowOverview()) {
								oRm.renderControl(oControl._ovrBtnRight);
							}
							oRm.write("</div>");
						};

						oRm.write("</div>");

						oRm.write("</div>");
					},

					/**
					 * Renders everything that does not scroll
					 * 
					 * @param sData -
					 *          defines if the setting for the standard chart or the preview chart should be calculated.<br>
					 *          value "basic": calculate the settings for the standard chart <br>
					 *          value "preview": return the settings for the preview chart <br>
					 * @param oChartSettings -
					 *          the settings that define the size of the chart
					 */
					renderBackground : function(sData, oChartSettings) {

						var oChartControl = jQuery("#" + oChartSettings.chartId);
						var backgroundAreaWidth = 0;

						if (oChartControl && oChartControl.length) {
							var backgroundAreaWidth = oChartControl.width();
						}

						var chart = d3.select("#" + oChartSettings.chartId + "-backgroundArea").append("svg:svg").attr("id",
								oChartSettings.chartId + "-background").attr("width", backgroundAreaWidth).attr("height",
								oChartSettings.chartSize.chartHeight);

						// create the top border
						var vis = chart.append("svg:g")
								.attr("transform", "translate(0," + oChartSettings.chartSize.topBorder + ")");

						// create the background
						if ((backgroundAreaWidth > 16 + 47) && (oChartSettings.chartSize.valueHeight > 0)) {
							vis.append("svg:rect").attr("id", oChartSettings.chartId + "-background-border").attr("class",
									"sapMRPChartBorder").attr("x", 47).attr("y", oChartSettings.chartSize.topSpace).attr("width",
									backgroundAreaWidth - 16 - 47).attr("height", oChartSettings.chartSize.valueHeight);
						}

						// create the y-axis
						var yAxis = vis.append("svg:g").attr("class", "yAxis");

						// create the ticks at the y-axis
						var yrule = yAxis.selectAll("g.y").data(oChartSettings.yScale.ticks(oChartSettings.tickCntY), function(d) {
							return d;
						}).enter().append("svg:g").attr("class", "y");

						// create the horizontal lines, including the x-axis at d = 0 (i.e. y = 0)
						yrule.append("svg:line").attr("class", function(d) {
							return (d != 0) ? "yLine sapMRPChartYLine" : "yLine sapMRPChartAxis";
						}).attr("x1", 42).attr("x2", backgroundAreaWidth - 16).attr("y1", oChartSettings.yScale).attr("y2",
								oChartSettings.yScale);

						var maxTextWidth = 0;
						var textSpace = 40;
						var sStyle = "";

						// create the texts for the y-axis
						var yRuleText = yrule.append("svg:text").attr("class", "yText sapMRPChartYAxisDescr").attr("x", 40).attr(
								"y", oChartSettings.yScale).attr("dy", "5px").attr("text-anchor", "end").text(
								jQuery.proxy(this.formatNumber, this)
						// oChartSettings.yScale.tickFormat(oChartSettings.tickCntY)
						).attr("style", function(d) {

							var textWidth = this.getComputedTextLength();
							if (textWidth > maxTextWidth) {
								maxTextWidth = textWidth;
							}
							return "";
						});

						// if the text is too long reduce the font size
						if (maxTextWidth > textSpace) {
							sStyle = "font-size:" + Math.floor(875 / maxTextWidth * textSpace) / 1000 + "rem";
							yRuleText.attr("style", sStyle);
						}
					},

					updateBackground : function(sData, oChartSettings) {

						var oChartControl = jQuery("#" + oChartSettings.chartId);
						var backgroundAreaWidth = 0;

						if (oChartControl && oChartControl.length) {
							var backgroundAreaWidth = oChartControl.width();
						}

						var vis = d3.select("#" + oChartSettings.chartId + "-backgroundArea svg g");

						var yAxis = vis.selectAll("g.yAxis");

						var yrule = yAxis.selectAll("g.y").data(oChartSettings.yScale.ticks(oChartSettings.tickCntY), function(d) {
							return d;
						});

						// Add new y-rules if applicable
						var newrule = yrule.enter().append("svg:g").attr("class", "y");

						// add new horizontal lines if necessary with a transition
						newrule.append("svg:line").attr("class", "yLine sapMRPChartYLine").attr("x1", 42).attr("x2",
								backgroundAreaWidth - 16).attr("y1", function(d) {
							return (d < 0) ? oChartSettings.chartSize.valueHeight : this._Y0Pos;
						}).attr("y2", function(d) {
							return (d < 0) ? oChartSettings.chartSize.valueHeight : this._Y0Pos;
						}).transition().duration(this._duration).attr("y1", oChartSettings.yScale)
								.attr("y2", oChartSettings.yScale);

						// add new tick texts if necessary with a transition
						newrule.append("svg:text").attr("class", "yText sapMRPChartYAxisDescr").attr("x", 40).attr("dy", "5px")
								.attr("text-anchor", "end").attr("y", function(d) {
									return (d < 0) ? oChartSettings.chartSize.valueHeight : this._Y0Pos;
								}).text(jQuery.proxy(this.formatNumber, this)).transition().duration(this._duration).attr("y",
										oChartSettings.yScale);

						// Move existing y-rules to their new position
						yrule.select("line.yLine").transition().duration(this._duration).attr("y1", oChartSettings.yScale).attr(
								"y2", oChartSettings.yScale);

						yrule.select("text.yText").transition().duration(this._duration).attr("y", oChartSettings.yScale);

						// calculate the maximum text width after all texts have been transformed
						var maxTextWidth = 0;
						var textSpace = 40;
						var fontSize = 875;

						var yRuleText = yrule.select("text.yText").attr("style", function(d) {

							var textWidth = this.getComputedTextLength();
							if (textWidth > maxTextWidth) {
								maxTextWidth = textWidth;
							}
							if (this.style.fontSize) {
								fontSize = parseFloat(this.style.fontSize) * 1000;
								return "font-size:" + this.style.fontSize;
							}
							return "";
						});

						if (maxTextWidth > textSpace) {
							jQuery.sap.log.debug("adjust font size of " + fontSize + " as text width " + maxTextWidth
									+ " > available text space");
							var sStyle = "font-size:" + Math.floor(fontSize / maxTextWidth * textSpace) / 1000 + "rem";
							yRuleText.attr("style", sStyle);
						}

						// remove obsolete y-rules
						var oldrule = yrule.exit();

						oldrule.select("line.yLine").transition().duration(this._duration).attr("y1", function(d) {
							return (d >= 0) ? 0 : oChartSettings.chartSize.valueHeight;
						}).attr("y2", function(d) {
							return (d >= 0) ? 0 : oChartSettings.chartSize.valueHeight;
						}).remove();

						oldrule.select("text.yText").transition().duration(this._duration).attr("y", function(d) {
							return (d >= 0) ? 0 : oChartSettings.chartSize.valueHeight;
						}).remove();

						oldrule.transition().duration(this._duration).remove();
					},

					renderOverviewWindow : function(vis, oChartSettings) {

						var bSpecialCursor = !this.getFixOverviewHeight();
						var sCSSOverviewWindow = (bSpecialCursor) ? "sapMRPChartOverviewWindow" : "sapMRPChartOverviewWindowSimple";
						sCSSOverviewWindow += " sapMRPChartStartDrag";
						var overviewWindow = vis.append("svg:g").attr("id", oChartSettings.chartId + "-hidden");

						overviewWindow.append("svg:rect").attr("id", oChartSettings.chartId + "-hidden-border").attr("class",
								"sapMRPChartBorder").attr("x", -oChartSettings.chartSize.leftSpace).attr("y", 1).attr(
								"width",
								oChartSettings.chartSize.valueWidth + oChartSettings.chartSize.leftSpace
										+ oChartSettings.chartSize.rightSpace).attr("height", oChartSettings.chartSize.valueHeight - 2);

						overviewWindow.append("svg:rect").attr("id", oChartSettings.chartId + "-hidden-left").attr("class",
								"sapMRPChartOverviewHidden").attr("x", -oChartSettings.chartSize.leftSpace).attr("y", 1).attr("width",
								oChartSettings.chartSize.leftSpace).attr("height", oChartSettings.chartSize.valueHeight - 2);

						overviewWindow.append("svg:rect").attr("id", oChartSettings.chartId + "-hidden-right").attr("class",
								"sapMRPChartOverviewHidden").attr("x", oChartSettings.chartSize.valueWidth).attr("y", 1).attr("width",
								oChartSettings.chartSize.rightSpace).attr("height", oChartSettings.chartSize.valueHeight - 2);

						overviewWindow.append("svg:rect").attr("id", oChartSettings.chartId + "-hidden-window").attr("class",
								sCSSOverviewWindow).attr("x", 0).attr("y", 1).attr("width", oChartSettings.chartSize.valueWidth).attr(
								"height", oChartSettings.chartSize.valueHeight - 2);
					},

					updateOverviewWindow : function(vis, oChartSettings, fromX, toX) {

						var overviewWindow = vis.select("#" + oChartSettings.chartId + "-hidden");
						var rightWidth = oChartSettings.chartSize.chartWidth - toX - oChartSettings.chartSize.leftSpace;
						if (rightWidth < 0) {
							rightWidth = 0;
						}
						var windowWidth = oChartSettings.chartSize.leftSpace + toX - fromX;
						if (windowWidth < 0) {
							windowWidth = 0;
						}

						overviewWindow.select("#" + oChartSettings.chartId + "-hidden-left").attr("width", fromX);
						overviewWindow.select("#" + oChartSettings.chartId + "-hidden-right").attr("x", toX).attr("width",
								rightWidth);

						overviewWindow.select("#" + oChartSettings.chartId + "-hidden-window").attr("x",
								-oChartSettings.chartSize.leftSpace + fromX).attr("width", windowWidth);
					},

					renderXAxis : function(vis, sData, oChartSettings) {

						var xAxis = vis.append("svg:g").attr("id", oChartSettings.chartId + "-chart-xAxis");

						xAxis.append("svg:line").attr("class", "sapMRPChartAxis").attr("x1", -oChartSettings.chartSize.leftSpace)
								.attr("x2", oChartSettings.chartSize.valueWidth + oChartSettings.chartSize.rightSpace).attr("y1",
										oChartSettings.yScale(0)).attr("y2", oChartSettings.yScale(0));
					},

					updateXAxis : function(vis, sData, oChartSettings) {

						var xAxis = vis.select("#" + oChartSettings.chartId + "-chart-xAxis");

						xAxis.select("line").transition().duration(this._duration).attr("x2", oChartSettings.chartSize.chartWidth)
								.attr("y1", oChartSettings.yScale(0)).attr("y2", oChartSettings.yScale(0));
					},

					renderDays : function(vis, sData, oChartSettings) {

						// display all days with changing background color
						var dayArea = vis.append("svg:g").attr("id", oChartSettings.chartId + "-chart-days");

						var days = dayArea.selectAll("rect").data(oChartSettings.data, function(d) {
							return d.date;
						}).enter().append("rect");

						days.attr("x", function(d) {
							return oChartSettings.xScale(d.index - 1);
						}).attr("width", oChartSettings.daySize).attr("y", oChartSettings.chartSize.topSpace).attr("height",
								oChartSettings.chartSize.valueHeight).attr(
								"class",
								function(d) {
									var sDayCSS = ((d.index - oChartSettings.timeframe.minXBasic) % 2 == 0)
											? "sapMRPChartEvenDay"
											: "sapMRPChartOddDay";
									return sDayCSS;
								});
					},

					updateDays : function(vis, sData, oChartSettings) {

						// update days
						var dayArea = vis.select("#" + oChartSettings.chartId + "-chart-days");

						var days = dayArea.selectAll("rect").data(oChartSettings.data, function(d) {
							return d.date;
						});

						// add new days if needed
						var newDays = days.enter().append("rect");

						newDays.attr("x", function(d) {
							return (d.index < oChartSettings.timeframe.minXBasic) ? 0 : oChartSettings.chartSize.chartWidth;
						}).attr("width", 0).attr("y", oChartSettings.chartSize.topSpace).attr("height", 0).transition().duration(
								this._duration).attr("x", function(d) {
							return oChartSettings.xScale(d.index - 1);
						}).attr("width", oChartSettings.daySize).attr("height", function(d) {
							return oChartSettings.chartSize.valueHeight;
						}).attr(
								"class",
								function(d) {
									var sDayCSS = ((d.index - oChartSettings.timeframe.minXBasic) % 2 == 0)
											? "sapMRPChartEvenDay"
											: "sapMRPChartOddDay";
									return sDayCSS;
								});

						// update existing days
						days.transition().duration(this._duration).attr("x", function(d) {
							return oChartSettings.xScale(d.index - 1);
						}).attr("width", oChartSettings.daySize).attr("y", oChartSettings.chartSize.topSpace).attr("height",
								oChartSettings.chartSize.valueHeight).attr(
								"class",
								function(d) {
									var sDayCSS = ((d.index - oChartSettings.timeframe.minXBasic) % 2 == 0)
											? "sapMRPChartEvenDay"
											: "sapMRPChartOddDay";
									return sDayCSS;
								});

						// remove obsolete days
						days.exit().transition().duration(this._duration).attr("x", function(d) {
							return (d.index < oChartSettings.timeframe.minXBasic) ? 0 : oChartSettings.chartSize.chartWidth;
						}).attr("width", 0).remove();
					},

					renderShortage : function(vis, sData, oChartSettings) {

						// higlight all days with a shortage
						var shortageArea = vis.append("svg:g").attr("id", oChartSettings.chartId + "-chart-shortage");

						var shortages = shortageArea.selectAll("rect").data(oChartSettings.data, function(d) {
							return d.date;
						}).enter().append("rect");

						shortages.attr("x", function(d) {
							return oChartSettings.xScale(d.index - 1);
						}).attr("width", oChartSettings.daySize).attr("y", oChartSettings.chartSize.topSpace).attr("height",
								oChartSettings.chartSize.valueHeight).attr("class", function(d) {

							var sShortageCSS = "sapMRPChartNoShortage";

							if (!d.shortageAccepted) {
								if (d[sData].balanceEnd < d.minStock) {
									sShortageCSS = "sapMRPChartShortage";
								} else if (d[sData].balanceEnd < d.safetyStock) {
									sShortageCSS = "sapMRPChartBelowSafetyStock";
								}
							}

							return sShortageCSS;
						});

						var dayDivider = shortageArea.selectAll("line").data(oChartSettings.data, function(d) {
							return d.date;
						}).enter().append("line");

						dayDivider.attr("x1", function(d) {
							return oChartSettings.xScale(d.index);
						}).attr("y1", 0).attr("x2", function(d) {
							return oChartSettings.xScale(d.index);
						}).attr("y2", oChartSettings.chartSize.valueHeight).attr("class", "sapMRPChartDayDivider");
					},

					updateShortage : function(vis, sData, oChartSettings) {

						// update shortages
						var shortageArea = vis.select("#" + oChartSettings.chartId + "-chart-shortage");

						var shortages = shortageArea.selectAll("rect").data(oChartSettings.data, function(d) {
							return d.date;
						});
						var dayDivider = shortageArea.selectAll("line").data(oChartSettings.data, function(d) {
							return d.date;
						});

						// add new shortages if needed
						var newShortages = shortages.enter().append("rect");

						newShortages.attr("x", function(d) {
							return (d.index < oChartSettings.timeframe.minXBasic) ? 0 : oChartSettings.chartSize.chartWidth;
						}).attr("width", 0).attr("y", oChartSettings.chartSize.topSpace).attr("height", 0).transition().duration(
								this._duration).attr("x", function(d) {
							return oChartSettings.xScale(d.index - 1);
						}).attr("width", oChartSettings.daySize).attr("height", function(d) {
							return oChartSettings.chartSize.valueHeight;
						}).attr("class", function(d) {

							var sShortageCSS = "sapMRPChartNoShortage";

							if (!d.shortageAccepted) {
								if (d[sData].balanceEnd < d.minStock) {
									sShortageCSS = "sapMRPChartShortage";
								} else if (d[sData].balanceEnd < d.safetyStock) {
									sShortageCSS = "sapMRPChartBelowSafetyStock";
								}
							}

							return sShortageCSS;
						});

						// update existing shortages
						shortages.transition().duration(this._duration).attr("x", function(d) {
							return oChartSettings.xScale(d.index - 1);
						}).attr("width", oChartSettings.daySize).attr("y", oChartSettings.chartSize.topSpace).attr("height",
								function(d) {
									return oChartSettings.chartSize.valueHeight;
								}).attr("class", function(d) {

							var sShortageCSS = "sapMRPChartNoShortage";

							if (!d.shortageAccepted) {
								if (d[sData].balanceEnd < d.minStock) {
									sShortageCSS = "sapMRPChartShortage";
								} else if (d[sData].balanceEnd < d.safetyStock) {
									sShortageCSS = "sapMRPChartBelowSafetyStock";
								}
							}

							return sShortageCSS;
						});

						// remove obsolete shortages
						shortages.exit().transition().duration(this._duration).attr("x", function(d) {
							return (d.index < oChartSettings.timeframe.minXBasic) ? 0 : oChartSettings.chartSize.chartWidth;
						}).attr("width", 0).remove();

						// add new day divider if needed
						var newDayDivider = dayDivider.enter().append("line");

						newDayDivider.attr("x1", function(d) {
							return oChartSettings.xScale(d.index);
						}).attr("y1", 0).attr("x2", function(d) {
							return oChartSettings.xScale(d.index);
						}).attr("y2", oChartSettings.chartSize.valueHeight).attr("class", "sapMRPChartDayDivider");

						// update existing day divider
						dayDivider.transition().duration(this._duration).attr("x1", function(d) {
							return oChartSettings.xScale(d.index);
						}).attr("y1", 0).attr("x2", function(d) {
							return oChartSettings.xScale(d.index);
						}).attr("y2", oChartSettings.chartSize.valueHeight);

						// remove obsolete day divider
						dayDivider.exit().transition().duration(this._duration).attr("x1", function(d) {
							return (d.index < oChartSettings.timeframe.minXBasic) ? 0 : oChartSettings.chartSize.chartWidth;
						}).attr("x2", function(d) {
							return (d.index < oChartSettings.timeframe.minXBasic) ? 0 : oChartSettings.chartSize.chartWidth;
						}).remove();
					},

					renderXTicks : function(vis, sData, oChartSettings) {

						// display x axis with ticks
						var xAxis = vis.append("svg:g").attr("id", oChartSettings.chartId + "-chart-xTicks").attr("minTick",
								oChartSettings.timeframe.minX);

						var xRule = xAxis.selectAll("g").data(oChartSettings.xScale.ticks(oChartSettings.tickCntX),
								jQuery.proxy(this.getDate, this)).enter().append("svg:g");

						xRule.append("svg:text").attr("class", "sapMRPChartXAxisDescr").attr("x", function(d) {
							return oChartSettings.xScale(d) - oChartSettings.daySize / 2;
						}).attr("y", oChartSettings.chartSize.chartHeight - 31).attr("text-anchor", "middle").text(
								jQuery.proxy(this.getDateFormatted, this));
					},

					updateXTicks : function(vis, sData, oChartSettings) {

						// get first existing xrule (to find out if new ones occur before of after the existing ones)
						var xAxis = vis.select("#" + oChartSettings.chartId + "-chart-xTicks");

						var firstExistingX = xAxis.attr("minTick");

						// update x axis
						var xRule = xAxis.attr("minTick", oChartSettings.timeframe.minX).selectAll("g").data(
								oChartSettings.xScale.ticks(oChartSettings.tickCntX), jQuery.proxy(this.getDate, this));

						// add new x rules
						var xRuleNew = xRule.enter().append("svg:g");

						xRuleNew.append("svg:text").attr("class", "sapMRPChartXAxisDescr").attr("x", function(idx) {
							return (idx < firstExistingX) ? 0 : oChartSettings.chartSize.chartWidth;
						}).attr("y", oChartSettings.chartSize.chartHeight - 31).attr("text-anchor", "middle").text(
								jQuery.proxy(this.getDateFormatted, this)).transition().duration(this._duration).attr("x",
								function(idx) {
									return oChartSettings.xScale(idx) - oChartSettings.daySize / 2;
								});

						// update existing x rules
						xRule.select("text.sapMRPChartXAxisDescr").transition().duration(this._duration).attr("x", function(d) {
							return oChartSettings.xScale(d) - oChartSettings.daySize / 2;
						});

						// remove obsolete x rules
						var xRuleOld = xRule.exit();

						xRuleOld.select("text.sapMRPChartXAxisDescr").transition().duration(this._duration).attr("x",
								function(idx) {
									return (idx < oChartSettings.timeframe.minX) ? 0 : oChartSettings.chartSize.chartWidth;
								}).remove();

						xRuleOld.transition().duration(this._duration).remove();
					},

					renderSupply : function(vis, sData, oChartSettings) {

						// display supply boxes
						var oController = this;
						var supplyArea = vis.append("svg:g").attr("id", oChartSettings.chartId + "-chart-supplies");

						var supplies = supplyArea.selectAll("g").data(oChartSettings.data).enter().append("svg:g");

						supplies.append("rect").attr("class", function(d) {
							var bNewSupply = (d[sData].supply > d.basic.supply);
							return (bNewSupply) ? " sapMRPChartNewSupply" : "sapMRPChartSupply";
						}).attr("x", function(d) {
							return oChartSettings.xScale(d.index) - oChartSettings.daySize / 21 * 38 / 2;
						}).attr("width", function(d) {
							return oChartSettings.daySize / 21 * 8;
						}).attr("y", function(d) {
							return oChartSettings.yScale(d[sData].balanceIntraday);
						}).attr("height", function(d) {
							return oChartSettings.yScale(d[sData].balanceStart) - oChartSettings.yScale(d[sData].balanceIntraday);
						});

						if (oChartSettings.displayText) {

							supplies.append("svg:title").text(function(d) {
								return "" + (oController.formatNumber(d[sData].supply));
							});
						}
					},

					updateSupply : function(vis, sData, oChartSettings) {

						// update supplies
						var oController = this;
						var supplyArea = vis.select("#" + oChartSettings.chartId + "-chart-supplies");

						var supplies = supplyArea.selectAll("g").data(oChartSettings.data, function(d) {
							return d.date;
						});

						// add new supply boxes if needed
						var suppliesNew = supplies.enter().append("svg:g");

						suppliesNew.append("rect").attr("class", function(d) {
							var bNewSupply = (d[sData].supply > d.basic.supply);
							return (bNewSupply) ? " sapMRPChartNewSupply" : "sapMRPChartSupply";
						}).attr("x", function(d) {
							return (d.index < oChartSettings.timeframe.minXBasic) ? 0 : oChartSettings.chartSize.chartWidth;
						}).attr("width", 0).attr("y", oChartSettings.yScale(0)).attr("height", 0).transition().duration(
								this._duration).attr("x", function(d) {
							return oChartSettings.xScale(d.index) - oChartSettings.daySize / 21 * 38 / 2;
						}).attr("width", function(d) {
							return oChartSettings.daySize / 21 * 8;
						}).attr("y", function(d) {
							return oChartSettings.yScale(d[sData].balanceIntraday);
						}).attr("height", function(d) {
							return oChartSettings.yScale(d[sData].balanceStart) - oChartSettings.yScale(d[sData].balanceIntraday);
						});

						if (oChartSettings.displayText) {

							suppliesNew.append("svg:title").text(function(d) {
								return "" + (oController.formatNumber(d[sData].supply));
							});
						}

						// update existing supply boxes
						supplies.select("rect").transition().duration(this._duration).attr("class", function(d) {
							var bNewSupply = (d[sData].supply > d.basic.supply);
							return (bNewSupply) ? "sapMRPChartNewSupply" : this.getAttribute("class");
						}).attr("x", function(d) {
							return oChartSettings.xScale(d.index) - oChartSettings.daySize / 21 * 38 / 2;
						}).attr("width", function(d) {
							return oChartSettings.daySize / 21 * 8;
						}).attr("y", function(d) {
							return oChartSettings.yScale(d[sData].balanceIntraday);
						}).attr("height", function(d) {
							return oChartSettings.yScale(d[sData].balanceStart) - oChartSettings.yScale(d[sData].balanceIntraday);
						}).transition().delay(this._duration).duration(0).attr("class", function(d) {
							var bNewSupply = (d[sData].supply > d.basic.supply);
							return (bNewSupply) ? " sapMRPChartNewSupply" : "sapMRPChartSupply";
						});

						if (oChartSettings.displayText) {

							supplies.select("title").text(function(d) {
								return "" + (oController.formatNumber(d[sData].supply));
							});
						}

						// remove obsolete supply boxes
						var suppliesOld = supplies.exit();

						suppliesOld.select("rect").transition().duration(this._duration).attr("x", function(d) {
							return (d.index < oChartSettings.timeframe.minXBasic) ? 0 : oChartSettings.chartSize.chartWidth;
						}).attr("width", 0).remove();

						suppliesOld.select("text").transition().duration(this._duration).attr("x", function(d) {
							return (d.index < oChartSettings.timeframe.minXBasic) ? 0 : oChartSettings.chartSize.chartWidth;
						}).remove();

						suppliesOld.transition().duration(this._duration).remove();
					},

					renderDemand : function(vis, sData, oChartSettings) {

						// display demand boxes
						var oController = this;
						var demandArea = vis.append("svg:g").attr("id", oChartSettings.chartId + "-chart-demands");

						var demands = demandArea.selectAll("g").data(oChartSettings.data).enter().append("svg:g");

						demands.append("rect").attr("class", "sapMRPChartDemand").attr("x", function(d) {
							return oChartSettings.xScale(d.index) - oChartSettings.daySize / 21 * 20 / 2;
						}).attr("width", function(d) {
							return oChartSettings.daySize / 21 * 8;
						}).attr("y", function(d) {
							return oChartSettings.yScale(d[sData].balanceIntraday);
						}).attr("height", function(d) {
							return oChartSettings.yScale(d[sData].balanceEnd) - oChartSettings.yScale(d[sData].balanceIntraday);
						});

						if (oChartSettings.displayText) {

							demands.append("svg:title").text(function(d) {
								return "" + (oController.formatNumber(-d[sData].demand));
							});
						}
					},

					updateDemand : function(vis, sData, oChartSettings) {

						// update demands
						var oController = this;
						var demandArea = vis.select("#" + oChartSettings.chartId + "-chart-demands");

						var demands = demandArea.selectAll("g").data(oChartSettings.data, function(d) {
							return d.date;
						});

						// add new demand boxes if needed
						var demandsNew = demands.enter().append("svg:g");

						demandsNew.append("rect").attr("class", "sapMRPChartDemand").attr("x", function(d) {
							return (d.index < oChartSettings.timeframe.minXBasic) ? 0 : oChartSettings.chartSize.chartWidth;
						}).attr("width", 0).attr("y", oChartSettings.yScale(0)).attr("height", 0).transition().duration(
								this._duration).attr("x", function(d) {
							return oChartSettings.xScale(d.index) - oChartSettings.daySize / 21 * 20 / 2;
						}).attr("width", function(d) {
							return oChartSettings.daySize / 21 * 8;
						}).attr("y", function(d) {
							return oChartSettings.yScale(d[sData].balanceIntraday);
						}).attr("height", function(d) {
							return oChartSettings.yScale(d[sData].balanceEnd) - oChartSettings.yScale(d[sData].balanceIntraday);
						});

						if (oChartSettings.displayText) {

							demandsNew.append("svg:title").text(function(d) {
								return "" + (oController.formatNumber(-d[sData].demand));
							});
						}

						// update existing demand boxes
						demands.select("rect").transition().duration(this._duration).attr("x", function(d) {
							return oChartSettings.xScale(d.index) - oChartSettings.daySize / 21 * 20 / 2;
						}).attr("width", function(d) {
							return oChartSettings.daySize / 21 * 8;
						}).attr("y", function(d) {
							return oChartSettings.yScale(d[sData].balanceIntraday);
						}).attr("height", function(d) {
							return oChartSettings.yScale(d[sData].balanceEnd) - oChartSettings.yScale(d[sData].balanceIntraday);
						});

						if (oChartSettings.displayText) {

							demands.select("title").text(function(d) {
								return "" + (oController.formatNumber(-d[sData].demand));
							});
						}

						// remove obsolete demand boxes
						var demandsOld = demands.exit();

						demandsOld.select("rect").transition().duration(this._duration).attr("x", function(d) {
							return (d.index < oChartSettings.timeframe.minXBasic) ? 0 : oChartSettings.chartSize.chartWidth;
						}).attr("width", 0).remove();

						demandsOld.select("text").transition().duration(this._duration).attr("x", function(d) {
							return (d.index < oChartSettings.timeframe.minXBasic) ? 0 : oChartSettings.chartSize.chartWidth;
						}).remove();

						demandsOld.transition().duration(this._duration).remove();
					},

					renderBalanceLine : function(vis, sData, oChartSettings) {

						// display balances lines
						var balanceArea = vis.append("svg:g").attr("id", oChartSettings.chartId + "-chart-balances");

						var balanceLines = balanceArea.selectAll("g.balanceLines").data(oChartSettings.data, function(d) {
							return d.date;
						}).enter().append("svg:g").attr("class", "balanceLines");

						balanceLines.append("svg:line").attr("class", "start sapMRPChartLineEndOfDay").attr("x1", function(d) {
							return oChartSettings.xScale(d.index - 1);
						}).attr("x2", function(d) {
							return oChartSettings.xScale(d.index) - oChartSettings.daySize / 21 * 22 / 2;
						}).attr("y1", function(d) {
							return oChartSettings.yScale(d[sData].balanceStart);
						}).attr("y2", function(d) {
							return oChartSettings.yScale(d[sData].balanceStart);
						});

						balanceLines.append("svg:line").attr(
								"class",
								function(d) {
									var cssClass = ((d[sData].demand != 0) && (d[sData].supply != 0))
											? "sapMRPChartLineIntraday"
											: "sapMRPChartLineEndOfDay";
									return "intraday " + cssClass;
								}).attr("fullX1", function(d) {
							return oChartSettings.xScale(d.index) - oChartSettings.daySize / 21 * 38 / 2;
						}).attr("x1", function(d) {
							if (d[sData].supply != 0) {
								return oChartSettings.xScale(d.index) - oChartSettings.daySize / 21 * 38 / 2;
							} else {
								return oChartSettings.xScale(d.index) - oChartSettings.daySize / 21 * 22 / 2;
							}
						}).attr("fullX2", function(d) {
							return oChartSettings.xScale(d.index) - oChartSettings.daySize / 21 * 4 / 2;
						}).attr("x2", function(d) {
							if (d[sData].demand != 0) {
								return oChartSettings.xScale(d.index) - oChartSettings.daySize / 21 * 4 / 2;
							} else {
								return oChartSettings.xScale(d.index) - oChartSettings.daySize / 21 * 20 / 2;
							}
						}).attr("y1", function(d) {
							return oChartSettings.yScale(d[sData].balanceIntraday);
						}).attr("y2", function(d) {
							return oChartSettings.yScale(d[sData].balanceIntraday);
						});

						balanceLines.append("svg:line").attr("class", "end sapMRPChartLineEndOfDay").attr("x1", function(d) {
							return oChartSettings.xScale(d.index) - oChartSettings.daySize / 21 * 20 / 2;
						}).attr("x2", function(d) {
							return oChartSettings.xScale(d.index);
						}).attr("y1", function(d) {
							return oChartSettings.yScale(d[sData].balanceEnd);
						}).attr("y2", function(d) {
							return oChartSettings.yScale(d[sData].balanceEnd);
						});
					},

					updateBalanceLine : function(vis, sData, oChartSettings) {

						// update balance lines
						var balanceArea = vis.select("#" + oChartSettings.chartId + "-chart-balances");

						var balanceLines = balanceArea.selectAll("g.balanceLines").data(oChartSettings.data, function(d) {
							return d.date;
						});

						// add new balance lines if needed
						var balanceLinesNew = balanceLines.enter().append("svg:g").attr("class", "balanceLines");

						balanceLinesNew.append("svg:line").attr("class", "start sapMRPChartLineEndOfDay").attr("x1", function(d) {
							return (d.index < oChartSettings.timeframe.minXBasic) ? 0 : oChartSettings.chartSize.chartWidth;
						}).attr("x2", function(d) {
							return (d.index < oChartSettings.timeframe.minXBasic) ? 0 : oChartSettings.chartSize.chartWidth;
						}).attr("y1", oChartSettings.yScale(0)).attr("y2", oChartSettings.yScale(0)).transition().duration(
								this._duration).attr("x1", function(d) {
							return oChartSettings.xScale(d.index - 1);
						}).attr("x2", function(d) {
							return oChartSettings.xScale(d.index) - oChartSettings.daySize / 21 * 22 / 2;
						}).attr("y1", function(d) {
							return oChartSettings.yScale(d[sData].balanceStart);
						}).attr("y2", function(d) {
							return oChartSettings.yScale(d[sData].balanceStart);
						});

						balanceLinesNew.append("svg:line").attr(
								"class",
								function(d) {
									var cssClass = ((d[sData].demand != 0) && (d[sData].supply != 0))
											? "sapMRPChartLineIntraday"
											: "sapMRPChartLineEndOfDay";
									return "intraday " + cssClass;
								}).attr("x1", function(d) {
							return (d.index < oChartSettings.timeframe.minXBasic) ? 0 : oChartSettings.chartSize.chartWidth;
						}).attr("x2", function(d) {
							return (d.index < oChartSettings.timeframe.minXBasic) ? 0 : oChartSettings.chartSize.chartWidth;
						}).attr("y1", oChartSettings.yScale(0)).attr("y2", oChartSettings.yScale(0)).transition().duration(
								this._duration).attr("fullX1", function(d) {
							return oChartSettings.xScale(d.index) - oChartSettings.daySize / 21 * 38 / 2;
						}).attr("x1", function(d) {
							if (d[sData].supply != 0) {
								return oChartSettings.xScale(d.index) - oChartSettings.daySize / 21 * 38 / 2;
							} else {
								return oChartSettings.xScale(d.index) - oChartSettings.daySize / 21 * 22 / 2;
							}
						}).attr("fullX2", function(d) {
							return oChartSettings.xScale(d.index) - oChartSettings.daySize / 21 * 4 / 2;
						}).attr("x2", function(d) {
							if (d[sData].demand != 0) {
								return oChartSettings.xScale(d.index) - oChartSettings.daySize / 21 * 4 / 2;
							} else {
								return oChartSettings.xScale(d.index) - oChartSettings.daySize / 21 * 20 / 2;
							}
						}).attr("y1", function(d) {
							return oChartSettings.yScale(d[sData].balanceIntraday);
						}).attr("y2", function(d) {
							return oChartSettings.yScale(d[sData].balanceIntraday);
						});

						balanceLinesNew.append("svg:line").attr("class", "end sapMRPChartLineEndOfDay").attr("x1", function(d) {
							return (d.index < oChartSettings.timeframe.minXBasic) ? 0 : oChartSettings.chartSize.chartWidth;
						}).attr("x2", function(d) {
							return (d.index < oChartSettings.timeframe.minXBasic) ? 0 : oChartSettings.chartSize.chartWidth;
						}).attr("y1", oChartSettings.yScale(0)).attr("y2", oChartSettings.yScale(0)).transition().duration(
								this._duration).attr("x1", function(d) {
							return oChartSettings.xScale(d.index) - oChartSettings.daySize / 21 * 20 / 2;
						}).attr("x2", function(d) {
							return oChartSettings.xScale(d.index);
						}).attr("y1", function(d) {
							return oChartSettings.yScale(d[sData].balanceEnd);
						}).attr("y2", function(d) {
							return oChartSettings.yScale(d[sData].balanceEnd);
						});

						// update existing balance lines
						balanceLines.select("line.start").transition().duration(this._duration).attr("x1", function(d) {
							return oChartSettings.xScale(d.index - 1);
						}).attr("y1", function(d) {
							return oChartSettings.yScale(d[sData].balanceStart);
						}).attr("y2", function(d) {
							return oChartSettings.yScale(d[sData].balanceStart);
						}).attr("x2", function(d) {
							return oChartSettings.xScale(d.index) - oChartSettings.daySize / 21 * 22 / 2;
						});

						balanceLines.select("line.intraday").attr(
								"class",
								function(d) {
									return ((d[sData].demand != 0) && (d[sData].supply != 0))
											? "sapMRPChartLineIntraday"
											: "sapMRPChartLineEndOfDay";
								}).attr("x1", function(d) {
							return this.getAttribute("fullX1");
						}).attr("x2", function(d) {
							return this.getAttribute("fullX2");
						}).transition().duration(this._duration).attr("y1", function(d) {
							return oChartSettings.yScale(d[sData].balanceIntraday);
						}).attr("y2", function(d) {
							return oChartSettings.yScale(d[sData].balanceIntraday);
						}).attr("x1", function(d) {
							if (d[sData].supply != 0) {
								return oChartSettings.xScale(d.index) - oChartSettings.daySize / 21 * 38 / 2;
							} else {
								return oChartSettings.xScale(d.index) - oChartSettings.daySize / 21 * 22 / 2;
							}
						}).attr("x2", function(d) {
							if (d[sData].demand != 0) {
								return oChartSettings.xScale(d.index) - oChartSettings.daySize / 21 * 4 / 2;
							} else {
								return oChartSettings.xScale(d.index) - oChartSettings.daySize / 21 * 20 / 2;
							}
						});

						balanceLines.select("line.end").transition().duration(this._duration).attr("x2", function(d) {
							return oChartSettings.xScale(d.index);
						}).attr("y1", function(d) {
							return oChartSettings.yScale(d[sData].balanceEnd);
						}).attr("y2", function(d) {
							return oChartSettings.yScale(d[sData].balanceEnd);
						}).attr("x1", function(d) {
							return oChartSettings.xScale(d.index) - oChartSettings.daySize / 21 * 20 / 2;
						});

						// remove obsolete balance lines
						var balanceLinesOld = balanceLines.exit();

						balanceLinesOld.selectAll("line").transition().duration(this._duration).attr("x1", function(d) {
							return (d.index < oChartSettings.timeframe.minXBasic) ? 0 : oChartSettings.chartSize.chartWidth;
						}).attr("x2", function(d) {
							return (d.index < oChartSettings.timeframe.minXBasic) ? 0 : oChartSettings.chartSize.chartWidth;
						}).remove();

						balanceLinesOld.transition().duration(this._duration).remove();
					},

					renderBalanceDot : function(vis, sData, oChartSettings) {

						// display start balance
						var oController = this;
						var balanceArea = vis.select("#" + oChartSettings.chartId + "-chart-balances");

						var balanceFirst = balanceArea.append("svg:g").attr("class", "firstBalance");

						balanceFirst.append("svg:line").attr("class", "sapMRPChartLineEndOfDay").attr("x1", -11).attr("x2",
								oChartSettings.xScale(oChartSettings.timeframe.minX - 1)).attr("y1",
								oChartSettings.yScale(oChartSettings.firstBalance[sData])).attr("y2",
								oChartSettings.yScale(oChartSettings.firstBalance[sData]));

						balanceFirst.append("svg:circle").attr("class", "sapMRPChartBalance").attr("cx",
								oChartSettings.xScale(oChartSettings.timeframe.minX - 1)).attr("cy",
								oChartSettings.yScale(oChartSettings.firstBalance[sData])).attr("r", 5);

						balanceFirst.append("svg:text").attr("class", "sapMRPChartBalanceDescr").attr("x", function(d) {
							return oChartSettings.xScale(oChartSettings.timeframe.minX - 1);
						}).attr("y", oChartSettings.yScale(oChartSettings.firstBalance[sData])).attr("dy", "18px").attr(
								"text-anchor", "middle").text(oController.formatNumber(oChartSettings.firstBalance[sData])).attr(
								"style", function(d) {
									var sStyle = "";
									var textWidth = this.getComputedTextLength();
									var textSpace = oChartSettings.chartSize.leftSpace + oChartSettings.daySize * 3 / 8;

									if (textWidth > textSpace) {
										sStyle = "font-size:" + Math.floor(875 / textWidth * textSpace) / 1000 + "rem";
									}
									return sStyle;
								}).attr("dx", function(d) {

							var textWidth = this.getComputedTextLength();
							if (textWidth > oChartSettings.chartSize.leftSpace * 2) {
								return (textWidth - 2 * oChartSettings.chartSize.leftSpace) + "px";
							}
							return "0px";
						});

						// add end of day balances for each day
						var balanceDot = balanceArea.selectAll("g.balanceDot").data(oChartSettings.data, function(d) {
							return d.date;
						}).enter().append("svg:g").attr("class", "balanceDot");

						balanceDot.append("svg:circle").attr("class", "sapMRPChartBalance").attr("cx", function(d) {
							return oChartSettings.xScale(d.index);
						}).attr("cy", function(d) {
							return oChartSettings.yScale(d[sData].balanceEnd);
						}).attr("r", function(d) {
							return (d[sData].demand || d[sData].supply) ? 5 : 0;
						});

						// set the tooltip for the balance dots
						if (this.getBalanceDotTooltip() != "") {
							balanceDot.append("svg:title").text(this.getBalanceDotTooltip());
						}

						balanceDot.append("svg:text").attr("class", "sapMRPChartBalanceDescr").attr("x", function(d) {
							return oChartSettings.xScale(d.index);
						}).attr("y", function(d) {
							return oChartSettings.yScale(d[sData].balanceEnd);
						}).attr("dy", "18px").attr("text-anchor", "middle").text(function(d) {
							if (d[sData].demand || d[sData].supply) {
								return oController.formatNumber(d[sData].balanceEnd);
							} else {
								return "";
							}
						}).attr("style", function(d) {
							var sStyle = "";
							var textWidth = this.getComputedTextLength();
							var textSpace = oChartSettings.daySize * 3 / 4;

							if (textWidth > textSpace) {
								sStyle = "font-size:" + Math.floor(875 / textWidth * textSpace) / 1000 + "rem";
							}
							return sStyle;
						});
					},

					updateBalanceDot : function(vis, sData, oChartSettings) {

						// update end of day balances
						var oController = this;
						var balanceArea = vis.select("#" + oChartSettings.chartId + "-chart-balances");

						var balanceFirst = balanceArea.select("g.firstBalance");

						balanceFirst.select("line").transition().duration(this._duration).attr("x2",
								oChartSettings.xScale(oChartSettings.timeframe.minX - 1)).attr("y1",
								oChartSettings.yScale(oChartSettings.firstBalance[sData])).attr("y2",
								oChartSettings.yScale(oChartSettings.firstBalance[sData]));

						balanceFirst.select("circle").transition().duration(this._duration).attr("cx",
								oChartSettings.xScale(oChartSettings.timeframe.minX - 1)).attr("cy",
								oChartSettings.yScale(oChartSettings.firstBalance[sData]));

						balanceFirst.select("text").transition().duration(this._duration).attr("x", function(d) {
							return oChartSettings.xScale(oChartSettings.timeframe.minX - 1);
						}).attr("y", oChartSettings.yScale(oChartSettings.firstBalance[sData])).attr("style", "").text(
								oController.formatNumber(oChartSettings.firstBalance[sData])).attr("style", function(d) {
							var sStyle = "";
							var textWidth = this.getComputedTextLength();
							var textSpace = oChartSettings.chartSize.leftSpace + oChartSettings.daySize * 3 / 8;

							if (textWidth > textSpace) {
								sStyle = "font-size:" + Math.floor(875 / textWidth * textSpace) / 1000 + "rem";
							}
							return sStyle;
						}).attr("dx", function(d) {

							var textWidth = this.getComputedTextLength();
							if (textWidth > oChartSettings.chartSize.leftSpace * 2) {
								return (textWidth - 2 * oChartSettings.chartSize.leftSpace) + "px";
							}
							return "0px";
						});

						// update balances
						var balanceDot = balanceArea.selectAll("g.balanceDot").data(oChartSettings.data, function(d) {
							return d.date;
						});

						// add new balances if needed
						var balanceDotNew = balanceDot.enter().append("svg:g").attr("class", "balanceDot");

						balanceDotNew.append("svg:circle").attr("class", "sapMRPChartBalance").attr("cx", function(d) {
							return (d.index < oChartSettings.timeframe.minXBasic) ? 0 : oChartSettings.chartSize.chartWidth;
						}).attr("cy", oChartSettings.yScale(0)).attr("r", function(d) {
							return (d[sData].demand || d[sData].supply) ? 5 : 0;
						}).transition().duration(this._duration).attr("cx", function(d) {
							return oChartSettings.xScale(d.index);
						}).attr("cy", function(d) {
							return oChartSettings.yScale(d[sData].balanceEnd);
						});

						balanceDotNew.append("svg:text").attr("class", "sapMRPChartBalanceDescr").attr("x", function(d) {
							return (d.index < oChartSettings.timeframe.minXBasic) ? 0 : oChartSettings.chartSize.chartWidth;
						}).attr("y", oChartSettings.yScale(0)).attr("dy", "18px").attr("text-anchor", "middle").text(function(d) {
							if (d[sData].demand || d[sData].supply) {
								return oController.formatNumber(d[sData].balanceEnd);
							} else {
								return "";
							}
						}).transition().duration(this._duration).attr("x", function(d) {
							return oChartSettings.xScale(d.index);
						}).attr("y", function(d) {
							return oChartSettings.yScale(d[sData].balanceEnd);
						});

						// update existing balances
						balanceDot.select("circle.sapMRPChartBalance").transition().duration(this._duration).attr("cx",
								function(d) {
									return oChartSettings.xScale(d.index);
								}).attr("cy", function(d) {
							return oChartSettings.yScale(d[sData].balanceEnd);
						}).attr("r", function(d) {
							return (d[sData].demand || d[sData].supply) ? 5 : 0;
						});

						balanceDot.select("text").attr("style", "").text(function(d) {
							if (d[sData].demand || d[sData].supply) {
								return oController.formatNumber(d[sData].balanceEnd);
							} else {
								return "";
							}
						}).transition().duration(this._duration).attr("x", function(d) {
							return oChartSettings.xScale(d.index);
						}).attr("y", function(d) {
							return oChartSettings.yScale(d[sData].balanceEnd);
						}).attr("style", function(d) {
							var sStyle = "";
							var textWidth = this.getComputedTextLength();
							var textSpace = oChartSettings.daySize * 3 / 4;

							if (textWidth > textSpace) {
								sStyle = "font-size:" + Math.floor(875 / textWidth * textSpace) / 1000 + "rem";
							}
							return sStyle;
						});

						// remove obsolete balances
						var balanceDotOld = balanceDot.exit();

						balanceDotOld.select("circle").transition().duration(this._duration).attr("cx", function(d) {
							return (d.index < oChartSettings.timeframe.minXBasic) ? 0 : oChartSettings.chartSize.chartWidth;
						}).attr("cy", oChartSettings.yScale(0)).remove();

						balanceDotOld.select("text").transition().duration(this._duration).attr("x", function(d) {
							return (d.index < oChartSettings.timeframe.minXBasic) ? 0 : oChartSettings.chartSize.chartWidth;
						}).attr("y", oChartSettings.yScale(0)).remove();

						balanceDotOld.transition().duration(this._duration).remove();
					},

					/**
					 * Creates the SVG elements for the chart and the overview.<br>
					 * Depending on the value of the parameter sData it creates either a basic chart or a preview.<br>
					 * The function calls the different render*() functions to render the individual parts of the chart.<br>
					 * Prerequisites: <br>
					 * -the functions calcChartSettings() and calcOverviewSettings() have been executed.<br>
					 * -the chart has data<br>
					 * -there are no SVG elements in the DOM tree part of the chart but the function renderer() has been executed
					 * so the HTML elements exist<br>
					 * 
					 * @param sData
					 */
					renderChart : function(sData) {

						sData = sData || this._dataset || "basic";

						var oChartSettings = this.getChartSettings(sData);
						var oOverviewSettings = this.getOverviewSettings(sData);

						if (oChartSettings.data.length === 0 || oOverviewSettings.data.length === 0) {
							return;
						}

						this._y0Pos = oChartSettings.posY0;

						if (!this.isVisible(sData)) {
							return;
						}

						this.renderBackground(sData, oChartSettings);

						var chart = d3.select("#" + oChartSettings.chartId + "-chartArea").append("svg:svg").attr("id",
								oChartSettings.chartId + "-chart").attr("width", oChartSettings.chartSize.chartWidth).attr("height",
								oChartSettings.chartSize.chartHeight);

						var vis = chart.append("svg:g").attr("transform",
								"translate(" + oChartSettings.chartSize.leftSpace + "," + oChartSettings.chartSize.topBorder + ")");

						if (oChartSettings.data.length) {
							this.renderDays(vis, sData, oChartSettings);
							this.renderShortage(vis, sData, oChartSettings);
							this.renderXTicks(vis, sData, oChartSettings);
							this.renderXAxis(vis, sData, oChartSettings);
							this.renderSupply(vis, sData, oChartSettings);
							this.renderDemand(vis, sData, oChartSettings);
							this.renderBalanceLine(vis, sData, oChartSettings);
							this.renderBalanceDot(vis, sData, oChartSettings);
						}

						if (this.getShowOverview() && (oOverviewSettings.chartSize.chartHeight > 0)) {
							var overview = d3.select("#" + oOverviewSettings.chartId + "-chartArea").append("svg:svg").attr("id",
									oOverviewSettings.chartId + "-chart").attr("width", oOverviewSettings.chartSize.chartWidth).attr(
									"height", oOverviewSettings.chartSize.chartHeight + 2);

							var overviewVis = overview.append("svg:g").attr(
									"transform",
									"translate(" + oOverviewSettings.chartSize.leftSpace + "," + oOverviewSettings.chartSize.topBorder
											+ ")");

							if (oOverviewSettings.data.length) {
								if (!this.getFixOverviewHeight()) {
									this.renderXAxis(overviewVis, sData, oOverviewSettings);
									this.renderSupply(overviewVis, sData, oOverviewSettings);
									this.renderDemand(overviewVis, sData, oOverviewSettings);
									this.renderBalanceLine(overviewVis, sData, oOverviewSettings);
								}
								this.renderOverviewWindow(overviewVis, oOverviewSettings);
								this.showDetailsInOverview();
							}
						}
					},

					updateChart : function(sData) {

						sData = sData || "preview";

						var oChartSettings = this.getChartSettings(sData);
						var oOverviewSettings = this.getOverviewSettings(sData);

						if (!this.isVisible(sData)) {
							return;
						}

						this.updateBackground(sData, oChartSettings);

						var chartArea = d3.select("#" + oChartSettings.chartId + "-chartArea");

						chartArea.transition().duration(this._duration).style({
							width : oChartSettings.chartSize.chartWidth + "px",
							left : "0px"
						});

						var svg = d3.select("#" + oChartSettings.chartId + "-chartArea svg");

						svg.transition().duration(this._duration).attr("width", oChartSettings.chartSize.chartWidth);

						var vis = d3.select("#" + oChartSettings.chartId + "-chartArea svg g");

						if (oChartSettings.data.length) {
							this.updateDays(vis, sData, oChartSettings);
							this.updateShortage(vis, sData, oChartSettings);
							this.updateXTicks(vis, sData, oChartSettings);
							this.updateXAxis(vis, sData, oChartSettings);
							this.updateSupply(vis, sData, oChartSettings);
							this.updateDemand(vis, sData, oChartSettings);
							this.updateBalanceLine(vis, sData, oChartSettings);
							this.updateBalanceDot(vis, sData, oChartSettings);
						}

						if (this.getShowOverview() && (oOverviewSettings.chartSize.chartHeight > 0)) {
							var overviewArea = d3.select("#" + oOverviewSettings.chartId + "-chartArea");

							overviewArea.transition().duration(this._duration).style("left", "0px");

							var overviewVis = d3.select("#" + oOverviewSettings.chartId + "-chartArea svg g");

							if (oOverviewSettings.data.length) {
								this.updateXAxis(overviewVis, sData, oOverviewSettings);
								this.updateSupply(overviewVis, sData, oOverviewSettings);
								this.updateDemand(overviewVis, sData, oOverviewSettings);
								this.updateBalanceLine(overviewVis, sData, oOverviewSettings);
							}
						}
					}
				});

}; // end of i2d/pp/mrpcockpit/reuse/controls/Chart.js
if ( !jQuery.sap.isDeclared('i2d.pp.mrpcockpit.reuse.controls.SolutionCard') ) {
  jQuery.sap.declare('i2d.pp.mrpcockpit.reuse.controls.SolutionCard');


/**
 * MRP Solution Card Control
 */
sap.ui.core.Control.extend("i2d.pp.mrpcockpit.reuse.controls.SolutionCard", {

	metadata : {
		properties : {

			"myCard" : "object",
			"title" : "string",
			"subTitle" : "string",
			"actionText" : "string",
			"materialShortageSolutionType" : "string",
			"proposalPriority" : "string",
			"state" : "string",
			"status" : "string",
			"tooltipRating" : "string",
			"tooltipAction" : "string"
		},

		aggregations : {
			"ctrlStars" : {
				type : "sap.m.RatingIndicator",
				multiple : false
			},
			"ctrlIcon" : {
				type : "sap.ui.core.Icon",
				multiple : false
			}
		}

	},

	/**
	 * Determine the root location of the tap event. Returns {inside card; execute area "choose"; on icon}
	 * 
	 * @param evt
	 * @memberOf SolutionCard
	 */
	getTapLocation : function(evt) {
		var sTapLocation = "";
		// Use jQuery to get the DOM of the currently selected card
		var oLocation = jQuery("#" + this.getId());
		// Get all children (DIVs, SPANs, ...) of that DOM element
		var aChildren = oLocation.children();
		var oChild = null;
		// Check if the card was selected directly
		if (oLocation[0].id === evt.target.id) {
			sTapLocation = this.Constants.CARD_AREA_INSIDE;
		} else {
			// Loop at each child element and check if the "event target" is part
			// of the particular child. If found, the click/tap event was triggered
			// from there...
			for ( var i = 0; i < aChildren.length; i++) {
				oChild = aChildren[i];
				if (oChild.contains(evt.target)) {
					switch (oChild.className) {
						case "sapMRPSCTitle" :
						case "sapMRPSCSubtitle" :
						case "sapMRPSCRating" :
							sTapLocation = this.Constants.CARD_AREA_INSIDE;
							break;
						case "sapMRPSCAction" :
							sTapLocation = this.Constants.CARD_AREA_EXECUTE;
							break;
						case "sapMRPSCIcon" :
							sTapLocation = this.Constants.CARD_AREA_ICON;
							break;
						default :
							sTapLocation = "";
					}
				}
			}
		}
		return sTapLocation;
	},

	/**
	 * This is a UI5 handler method that is called when the control's area is clicked. No registration required. Dependent
	 * on the location of the click event, an appropiate action is started:<BR>
	 * -Execute the solution card if the area "choose" has been clicked<BR>
	 * -Run a preview/Cancel a preview if the use has clicked somewhere within the card
	 * 
	 * @param evt
	 * @memberOf SolutionCard
	 */
	ontap : function(evt) {
		// Get the data of the current card control
		var oCard = this.getMyCard();
		// If the clicked solution card is locked, we return
		// immediately and no action is performed at all
		if (this.isSolutionCardLocked()) {
			return;
		}
		// Determine the location of the click/tap event
		var sTapLocation = this.getTapLocation(evt);
		// Based on the determined location, we trigger an action
		switch (sTapLocation) {

			case this.Constants.CARD_AREA_EXECUTE :
				// If the card is clicked in the lower area (execution) the click is interpreted as 'open the solution card'.
				this._triggerSolutionCardExecution(oCard);
				break;

			case this.Constants.CARD_AREA_INSIDE :
			case this.Constants.CARD_AREA_ICON :

				// No preview for solution card 'accepted' allowed. So we quit.
				if (this.getMaterialShortageSolutionType() === this.Constants.SOLUTIONTYPE_ACCEPT_REMOVE) {
					return;
				}
				// No preview for solution card 'accept'
				if (this.getMaterialShortageSolutionType() === this.Constants.SOLUTIONTYPE_ACCEPT) {
					// Always cancel any preview when selecting the solution card 'accept'
					this._triggerSolutionCardCancelPreview();
					this.setState(this.Constants.CARD_STATE_ENABLED);
					return;
				}
				// Set the status of the solution card. The status depends on the previous state.
				// It alternates between 'active' and 'enabled'
				if (this.hasState(this.Constants.CARD_STATE_ACTIVE)) {
					// If the card is active, the click is interpreted as cancel preview.
					this._triggerSolutionCardCancelPreview();
					// Mark the solution card as enabled
					this.setState(this.Constants.CARD_STATE_ENABLED);
				} else {
					// If the card is just enabled the click is interpreted as preview.
					this._triggerSolutionCardRunPreview(oCard);
					// Mark the solution card as active
					this.setState(this.Constants.CARD_STATE_ACTIVE);
				}
				break;
		}

	},

	/**
	 * Trigger the execution of the solution card
	 * 
	 * @param oCard
	 * @memberOf SolutionCard
	 */
	_triggerSolutionCardExecution : function(oCard) {
		var bus = sap.ui.getCore().getEventBus();
		bus.publish(this.Constants.EVENT_CHANNELID_SOLCARD, this.Constants.EVENT_EVENTID_DIALOG_START);
		bus.publish(this.Constants.EVENT_CHANNELID_SOLCARD, this.Constants.EVENT_EVENTID_EXECUTE, {
			model : oCard
		});
	},

	/**
	 * Trigger the preview of the solution card
	 * 
	 * @param oCard
	 * @memberOf SolutionCard
	 */
	_triggerSolutionCardRunPreview : function(oCard) {
		var bus = sap.ui.getCore().getEventBus();
		bus.publish(this.Constants.EVENT_CHANNELID_CARD_PREVIEW, this.Constants.EVENT_EVENTID_RUN, {
			model : oCard
		});
	},

	/**
	 * Trigger the cancel preview of the solution card
	 * 
	 * @memberOf SolutionCard
	 */
	_triggerSolutionCardCancelPreview : function() {
		var bus = sap.ui.getCore().getEventBus();
		bus.publish(this.Constants.EVENT_CHANNELID_CARD_PREVIEW, this.Constants.EVENT_EVENTID_CANCEL, {
			model : null
		});
	},

	/**
	 * Initialize the card control. Create an instance of the rating indicator to show the proposal ranking.
	 * 
	 * @memberOf SolutionCard
	 */
	init : function() {

		// Create and initialize the RatingIndicator
		var oCtrl = new sap.m.RatingIndicator({
			maxValue : 2,
			iconSize : "1.125rem",
			value : 0,
			enabled : false
		});
		this.setCtrlStars(oCtrl);
		this.setProposalPriority("0");

		// Shortcut to the MRP constants
		this.Constants = i2d.pp.mrpcockpit.reuse.util.CommonConstants;

	},

	/**
	 * Check if the current solution card is active
	 * 
	 * @memberOf SolutionCard
	 */
	isSolutionCardActive : function() {
		return this.hasState(this.Constants.CARD_STATE_ACTIVE);
	},

	/**
	 * Check if the current solution card is locked
	 * 
	 * @memberOf SolutionCard
	 */
	isSolutionCardLocked : function() {
		return this.hasState(this.Constants.CARD_STATE_LOCKED);
	},

	/**
	 * Check if the current solution card is clicked
	 * 
	 * @memberOf SolutionCard
	 */
	isSolutionCardClicked : function() {
		return this.hasState(this.Constants.CARD_STATE_CLICKED);
	},

	/**
	 * Checks if the solution cards has the UI status that the clients asks for.
	 * 
	 * @param sState
	 * @memberOf SolutionCard
	 */
	hasState : function(sState) {
		var bRet = false;
		switch (sState) {
			case this.Constants.CARD_STATE_ENABLED :
				bRet = this.hasStyleClass("sapMRPSCStatusEnabled");
				break;
			case this.Constants.CARD_STATE_DISABLED :
				bRet = this.hasStyleClass("sapMRPSCStatusDisabled");
				break;
			case this.Constants.CARD_STATE_ACTIVE :
				bRet = this.hasStyleClass("sapMRPSCStatusActive");
				break;
			case this.Constants.CARD_STATE_LOCKED :
				bRet = this.hasStyleClass("sapMRPSCStatusLocked");
				break;
			case this.Constants.CARD_STATE_CLICKED :
				bRet = this.hasStyleClass("sapMRPSCStatusClicked");
				break;
			case this.Constants.CARD_STATE_HIDDEN :
				bRet = this.hasStyleClass("sapMRPSCStatusHidden");
				break;
			default :
				bRet = false;
				break;
		}
		return bRet;
	},

	/**
	 * Sets the UI status of a solution card. Only one status can be active at one moment. So if the card has another
	 * status, the other status is removed.<BR>
	 * Each status is represented by a CSS class that is dynamically added to /removed from the HTML element.
	 * 
	 * @param sState
	 *          string that represents a UI status defined in the constant .CARD_STATE_[X]
	 * @memberOf SolutionCard
	 */
	setState : function(sState) {
		switch (sState) {
			case this.Constants.CARD_STATE_ENABLED :
				if (this.hasStyleClass("sapMRPSCStatusHidden")) {
					this.removeStyleClass("sapMRPSCStatusHidden");
				}
				if (this.hasStyleClass("sapMRPSCStatusDisabled")) {
					this.removeStyleClass("sapMRPSCStatusDisabled");
				}
				if (this.hasStyleClass("sapMRPSCStatusActive")) {
					this.removeStyleClass("sapMRPSCStatusActive");
				}
				if (this.hasStyleClass("sapMRPSCStatusLocked")) {
					this.removeStyleClass("sapMRPSCStatusLocked");
				}
				if (this.hasStyleClass("sapMRPSCStatusClicked")) {
					this.removeStyleClass("sapMRPSCStatusClicked");
				}
				if (!this.hasStyleClass("sapMRPSCStatusEnabled")) {
					this.addStyleClass("sapMRPSCStatusEnabled");
				}
				break;
			case this.Constants.CARD_STATE_DISABLED :

				if (!this.hasStyleClass("sapMRPSCStatusDisabled")) {
					this.addStyleClass("sapMRPSCStatusDisabled");
				}
				if (this.hasStyleClass("sapMRPSCStatusEnabled")) {
					this.removeStyleClass("sapMRPSCStatusEnabled");
				}
				if (this.hasStyleClass("sapMRPSCStatusActive")) {
					this.removeStyleClass("sapMRPSCStatusActive");
				}
				if (this.hasStyleClass("sapMRPSCStatusLocked")) {
					this.removeStyleClass("sapMRPSCStatusLocked");
				}
				if (this.hasStyleClass("sapMRPSCStatusClicked")) {
					this.removeStyleClass("sapMRPSCStatusClicked");
				}
				break;
			case this.Constants.CARD_STATE_ACTIVE :
				if (!this.hasStyleClass("sapMRPSCStatusActive")) {
					this.addStyleClass("sapMRPSCStatusActive");
				}
				if (this.hasStyleClass("sapMRPSCStatusEnabled")) {
					this.removeStyleClass("sapMRPSCStatusEnabled");
				}
				if (this.hasStyleClass("sapMRPSCStatusDisabled")) {
					this.removeStyleClass("sapMRPSCStatusDisabled");
				}
				if (this.hasStyleClass("sapMRPSCStatusLocked")) {
					this.removeStyleClass("sapMRPSCStatusLocked");
				}
				if (this.hasStyleClass("sapMRPSCStatusClicked")) {
					this.removeStyleClass("sapMRPSCStatusClicked");
				}
				break;
			case this.Constants.CARD_STATE_LOCKED :
				if (this.hasStyleClass("sapMRPSCStatusEnabled")) {
					this.removeStyleClass("sapMRPSCStatusEnabled");
				}
				if (this.hasStyleClass("sapMRPSCStatusDisabled")) {
					this.removeStyleClass("sapMRPSCStatusDisabled");
				}
				if (this.hasStyleClass("sapMRPSCStatusClicked")) {
					this.removeStyleClass("sapMRPSCStatusClicked");
				}
				if (this.hasStyleClass("sapMRPSCStatusActive")) {
					this.removeStyleClass("sapMRPSCStatusActive");
				}
				if (!this.hasStyleClass("sapMRPSCStatusLocked")) {
					this.addStyleClass("sapMRPSCStatusLocked");
				}
				break;
			case this.Constants.CARD_STATE_CLICKED :
				if (this.hasStyleClass("sapMRPSCStatusDisabled")) {
					this.removeStyleClass("sapMRPSCStatusDisabled");
				}
				if (this.hasStyleClass("sapMRPSCStatusLocked")) {
					this.removeStyleClass("sapMRPSCStatusLocked");
				}
				if (!this.hasStyleClass("sapMRPSCStatusClicked")) {
					this.addStyleClass("sapMRPSCStatusClicked");
				}
				break;
			case this.Constants.CARD_STATE_HIDDEN :
				if (!this.hasStyleClass("sapMRPSCStatusHidden")) {
					this.addStyleClass("sapMRPSCStatusHidden");
				}
				break;
		}
	},

	/**
	 * Initializes the card control. Sets the title, subtitle, action texts and tooltips
	 * 
	 * @memberOf SolutionCard
	 */
	initCard : function() {

		var oBundle = this.getModel("Common_i18n").getResourceBundle();
		var sTitle = "";
		var sSubtitle = "";
		var sActionText = oBundle.getText("CARD_ACT_CHOOSE");
		var myCard = this.getMyCard();
		var sIcon = "";
		var sIconTooltip = oBundle.getText("CARD_XTOL_PREVIEW");
		var sRatingTooltip = "";
		var sActionTooltip = "";

		// -----------------------------------------------
		// Subtitles depend on the type of the card
		var subTitlePoPr = "";
		if (myCard.VendorName) {
			subTitlePoPr = myCard.VendorName;
		} else {
			subTitlePoPr = oBundle.getText("CARD_SUB_UNSOURCED");
		}
		var subTitleToTor = "";
		if (myCard.SupplyingPlant) {
			subTitleToTor = oBundle.getText("CARD_SUB_PLANT", myCard.SupplyingPlant);
		} else {
			subTitleToTor = oBundle.getText("CARD_SUB_UNSOURCED");
		}
		// If the vendor and the supplying plant is provided, we concatenate both values
		// and use it for all card types (MaterialShortageSolutionType)
		if (myCard.VendorName && myCard.SupplyingPlant) {
			subTitlePoPr = oBundle.getText("PLANT_LONG", [myCard.SupplyingPlant, myCard.VendorName]);
			subTitleToTor = subTitlePoPr;
		}

		// -----------------------------------------------
		// Set the title and subtitle based on the solution type
		switch (myCard.MaterialShortageSolutionType) {
			case this.Constants.SOLUTIONTYPE_ACCEPT :
				sTitle = oBundle.getText("CARD_TIT_ACCEPT");
				sSubtitle = "";
				sIcon = this.Constants.CARD_ICON_ACCEPT;
				sIconTooltip = ""; // No tooltip for 'Accept'
				sActionText = oBundle.getText("CARD_ACT_CHOOSE");
				sActionTooltip = oBundle.getText("XTOL_ACCEPT_SOL_CARD");
				break;
			case this.Constants.SOLUTIONTYPE_ACCEPT_REMOVE :
				sTitle = oBundle.getText("CARD_TIT_ACCEPT_REMOVE");
				sSubtitle = "";
				sIcon = this.Constants.CARD_ICON_ACCEPT_REMOVE;
				sIconTooltip = ""; // No tooltip for 'Accepted'
				sActionText = oBundle.getText("CARD_ACT_CANCEL");
				sActionTooltip = oBundle.getText("XTOL_ACCEPTED_SOL_CARD");
				break;
			case this.Constants.SOLUTIONTYPE_PO_CREATE :
				sTitle = oBundle.getText("CARD_TIT_CREATEPO");
				sSubtitle = subTitlePoPr;
				sIcon = this.Constants.CARD_ICON_PROCURE;
				sActionTooltip = oBundle.getText("SOLUTION_DIALOG_PO_CREATE_TITLE");
				break;
			case this.Constants.SOLUTIONTYPE_PO_INCREASE :
				sTitle = oBundle.getText("CARD_TIT_INCREASE");
				sSubtitle = subTitlePoPr;
				sIcon = this.Constants.CARD_ICON_INCREASE;
				sActionTooltip = oBundle.getText("SOLUTION_DIALOG_PO_INCREASE_TITLE", [myCard.MRPElementExternalID,
						myCard.MRPElementItemExternalID]);
				break;
			case this.Constants.SOLUTIONTYPE_PO_RESCHEDULE :
				sTitle = oBundle.getText("CARD_TIT_RESCHEDULE");
				sSubtitle = subTitlePoPr;
				sIcon = this.Constants.CARD_ICON_RESCHEDULE;
				sActionTooltip = oBundle.getText("SOLUTION_DIALOG_PO_RESCHEDULE_TITLE", [myCard.MRPElementExternalID,
						myCard.MRPElementItemExternalID]);
				break;
			case this.Constants.SOLUTIONTYPE_PR_CREATE :
				sTitle = oBundle.getText("CARD_TIT_CREATEPO");
				sSubtitle = subTitlePoPr;
				sIcon = this.Constants.CARD_ICON_PROCURE;
				sActionTooltip = oBundle.getText("SOLUTION_DIALOG_PO_CREATE_TITLE");
				break;
			case this.Constants.SOLUTIONTYPE_PR_INCREASE :
				sTitle = oBundle.getText("CARD_TIT_INCREASE");
				sSubtitle = subTitlePoPr;
				sIcon = this.Constants.CARD_ICON_INCREASE;
				sActionTooltip = oBundle.getText("SOLUTION_DIALOG_PR_INCREASE_TITLE", [myCard.MRPElementExternalID,
						myCard.MRPElementItemExternalID]);
				break;
			case this.Constants.SOLUTIONTYPE_PR_RESCHEDULE :
				sTitle = oBundle.getText("CARD_TIT_RESCHEDULE");
				sSubtitle = subTitlePoPr;
				sIcon = this.Constants.CARD_ICON_RESCHEDULE;
				sActionTooltip = oBundle.getText("SOLUTION_DIALOG_PR_RESCHEDULE_TITLE", [myCard.MRPElementExternalID,
						myCard.MRPElementItemExternalID]);
				break;
			case this.Constants.SOLUTIONTYPE_TO_CREATE :
				sTitle = oBundle.getText("CARD_TIT_CREATETO");
				sSubtitle = subTitleToTor;
				sIcon = this.Constants.CARD_ICON_TRANSFER;
				sActionTooltip = oBundle.getText("SOLUTION_DIALOG_TO_CREATE_TITLE");
				break;
			case this.Constants.SOLUTIONTYPE_TO_INCREASE :
				sTitle = oBundle.getText("CARD_TIT_INCREASE");
				sSubtitle = subTitleToTor;
				sIcon = this.Constants.CARD_ICON_INCREASE;
				sActionTooltip = oBundle.getText("SOLUTION_DIALOG_TO_INCREASE_TITLE", [myCard.MRPElementExternalID,
						myCard.MRPElementItemExternalID]);
				break;
			case this.Constants.SOLUTIONTYPE_TO_RESCHEDULE :
				sTitle = oBundle.getText("CARD_TIT_RESCHEDULE");
				sSubtitle = subTitleToTor;
				sIcon = this.Constants.CARD_ICON_RESCHEDULE;
				sActionTooltip = oBundle.getText("SOLUTION_DIALOG_TO_RESCHEDULE_TITLE", [myCard.MRPElementExternalID,
						myCard.MRPElementItemExternalID]);
				break;
			case this.Constants.SOLUTIONTYPE_TOR_CREATE :
				sTitle = oBundle.getText("CARD_TIT_CREATETO");
				sSubtitle = subTitleToTor;
				sIcon = this.Constants.CARD_ICON_TRANSFER;
				sActionTooltip = oBundle.getText("SOLUTION_DIALOG_TO_CREATE_TITLE");
				break;
			case this.Constants.SOLUTIONTYPE_TOR_INCREASE :
				sTitle = oBundle.getText("CARD_TIT_INCREASE");
				sSubtitle = subTitleToTor;
				sIcon = this.Constants.CARD_ICON_INCREASE;
				sActionTooltip = oBundle.getText("SOLUTION_DIALOG_TOR_INCREASE_TITLE", [myCard.MRPElementExternalID,
						myCard.MRPElementItemExternalID]);
				break;
			case this.Constants.SOLUTIONTYPE_TOR_RESCHEDULE :
				sTitle = oBundle.getText("CARD_TIT_RESCHEDULE");
				sSubtitle = subTitleToTor;
				sIcon = this.Constants.CARD_ICON_RESCHEDULE;
				sActionTooltip = oBundle.getText("SOLUTION_DIALOG_TOR_RESCHEDULE_TITLE", [myCard.MRPElementExternalID,
						myCard.MRPElementItemExternalID]);
				break;
			case this.Constants.SOLUTIONTYPE_PO_CHANGE :
				sTitle = oBundle.getText("CARD_TIT_CHANGE");
				sSubtitle = subTitlePoPr;
				sIcon = this.Constants.CARD_ICON_CHANGE;
				sActionTooltip = oBundle.getText("SOLUTION_DIALOG_PO_CHANGE_TITLE", [myCard.MRPElementExternalID,
						myCard.MRPElementItemExternalID]);
				break;
			case this.Constants.SOLUTIONTYPE_PR_CHANGE :
				sTitle = oBundle.getText("CARD_TIT_CHANGE");
				sSubtitle = subTitlePoPr;
				sIcon = this.Constants.CARD_ICON_CHANGE;
				sActionTooltip = oBundle.getText("SOLUTION_DIALOG_PR_CHANGE_TITLE", [myCard.MRPElementExternalID,
						myCard.MRPElementItemExternalID]);
				break;
			case this.Constants.SOLUTIONTYPE_TO_CHANGE :
				sTitle = oBundle.getText("CARD_TIT_CHANGE");
				sSubtitle = subTitleToTor;
				sIcon = this.Constants.CARD_ICON_CHANGE;
				sActionTooltip = oBundle.getText("SOLUTION_DIALOG_TO_CHANGE_TITLE", [myCard.MRPElementExternalID,
						myCard.MRPElementItemExternalID]);
				break;
			case this.Constants.SOLUTIONTYPE_TOR_CHANGE :
				sTitle = oBundle.getText("CARD_TIT_CHANGE");
				sSubtitle = subTitleToTor;
				sIcon = this.Constants.CARD_ICON_CHANGE;
				sActionTooltip = oBundle.getText("SOLUTION_DIALOG_TOR_CHANGE_TITLE", [myCard.MRPElementExternalID,
						myCard.MRPElementItemExternalID]);
				break;
			case this.Constants.SOLUTIONTYPE_PA_CHANGE :
				sTitle = oBundle.getText("CARD_TIT_CHANGE");
				sSubtitle = subTitlePoPr;
				sIcon = this.Constants.CARD_ICON_CHANGE;
				sActionTooltip = oBundle.getText("SOLUTION_DIALOG_PA_CHANGE_TITLE", [myCard.MRPElementExternalID,
						myCard.MRPElementItemExternalID]);
				break;		
			case this.Constants.SOLUTIONTYPE_PROD_CONVERT :
				sTitle = oBundle.getText("CARD_TIT_CHANGE");
				sSubtitle = subTitlePoPr;
				sIcon = this.Constants.CARD_ICON_CHANGE;
				sActionTooltip = oBundle.getText("SOLUTION_DIALOG_PA_CHANGE_TITLE", [myCard.MRPElementExternalID,
						myCard.MRPElementItemExternalID]);
				break;					
			case this.Constants.SOLUTIONTYPE_PROC_CONVERT :
				sTitle = oBundle.getText("CARD_TIT_CHANGE");
				sSubtitle = subTitlePoPr;
				sIcon = this.Constants.CARD_ICON_CHANGE;
				sActionTooltip = oBundle.getText("SOLUTION_DIALOG_PA_CHANGE_TITLE", [myCard.MRPElementExternalID,
						myCard.MRPElementItemExternalID]);
				break;	
			case this.Constants.SOLUTIONTYPE_REQ_CONVERT :
				sTitle = oBundle.getText("CARD_TIT_CHANGE");
				sSubtitle = subTitlePoPr;
				sIcon = this.Constants.CARD_ICON_CHANGE;
				sActionTooltip = oBundle.getText("SOLUTION_DIALOG_PA_CHANGE_TITLE", [myCard.MRPElementExternalID,
						myCard.MRPElementItemExternalID]);
				break;									
			default :
				sTitle = oBundle.getText("CARD_TIT_UNKNOWN");
				sSubtitle = myCard.MaterialShortageSolutionType;
				break;
		}

		// Set the text for the tool tip for the "rating"
		switch (myCard.ProposalPriority) {
			case "0" :
				sRatingTooltip = oBundle.getText("CARD_XTOL_RATING_0");
				break;
			case "1" :
				sRatingTooltip = oBundle.getText("CARD_XTOL_RATING_1");
				break;
			case "2" :
				sRatingTooltip = oBundle.getText("CARD_XTOL_RATING_2");
				break;
			default :
				sRatingTooltip = "";
				break;
		}

		// Store the members
		this.setTitle(sTitle);
		this.setSubTitle(sSubtitle);
		this.setActionText(sActionText);
		this.setTooltipAction(sActionTooltip);
		this.setTooltipRating(sRatingTooltip);
		this.setMaterialShortageSolutionType(myCard.MaterialShortageSolutionType);
		this.setProposalPriority(myCard.ProposalPriority);

		// Create and initialize the Icon at the top of the solution card
		var oCtrlIcon = new sap.ui.core.Icon({
			src : sIcon,
			tooltip : sIconTooltip
		});
		this.setCtrlIcon(oCtrlIcon);

		// Set the CSS for the solution cards
		// Mark the solution card as card using CSS
		this.addStyleClass("sapMRPSC");
		// The card 'Accept Shortage' gets an additional CSS for special treatment
		// (The main area of the card shall not be used to trigger a preview)
		if (myCard.MaterialShortageSolutionType === this.Constants.SOLUTIONTYPE_ACCEPT
				|| myCard.MaterialShortageSolutionType === this.Constants.SOLUTIONTYPE_ACCEPT_REMOVE) {
			this.addStyleClass("sapMRPSCTypeAccept");
		}
	},

	/**
	 * Creates the required HTML code for the control. Info: It loops over all items of the object 'model' that contains
	 * the solution proposals of the solution call and creates one separate card for each proposal.
	 * 
	 * @param oRm
	 *          object that represents the renderer
	 * @param oCtrl
	 *          object that represents the control itself
	 * @memberOf control.SolutionCard
	 */
	renderer : function(oRm, oCtrl) {

		oRm.write('<div ');
		// writes the Control ID and enables event handling - important!
		oRm.writeControlData(oCtrl);
		oRm.writeClasses();
		oRm.write(">");

		// =================== ICON ===================
		oRm.write('<div ');
		oRm.addClass("sapMRPSCIcon");
		oRm.writeClasses();
		oRm.write(">");
		oRm.renderControl(oCtrl.getCtrlIcon());
		oRm.write("</div>"); // icon

		// =================== TITLE ===================
		oRm.write('<div ');
		oRm.addClass("sapMRPSCTitle");
		oRm.writeClasses();
		oRm.write(">");
		oRm.writeEscaped(oCtrl.getTitle());
		oRm.write("</div>"); // title

		// =================== SUBTITLE ===================
		oRm.write('<div ');
		if (oCtrl.getMaterialShortageSolutionType() !== oCtrl.Constants.SOLUTIONTYPE_ACCEPT) {
			oRm.addClass("sapMRPSCSubtitle");
			oRm.writeClasses();
		}
		oRm.write(">");
		oRm.writeEscaped(oCtrl.getSubTitle());
		oRm.write("</div>"); // subtitle

		// =================== RATING ===================
		oRm.write('<div ');
		oRm.writeAttributeEscaped("title", oCtrl.getTooltipRating());
		oRm.addClass("sapMRPSCRating");
		oRm.writeClasses();
		oRm.write(">");
		var oStars = oCtrl.getCtrlStars();
		var sPriority = oCtrl.getProposalPriority();
		var fPriority = parseFloat(sPriority);
		oStars.setValue(fPriority);
		oRm.renderControl(oStars);
		oRm.write("</div>"); // rating

		// =================== ACTION ===================
		oRm.write("<div ");
		oRm.writeAttributeEscaped("title", oCtrl.getTooltipAction());
		oRm.addClass("sapMRPSCAction");
		oRm.writeClasses();
		oRm.write(">");

		oRm.write('<span ');
		oRm.addClass("text");
		oRm.writeClasses();
		oRm.write(">");
		// Write the 'action' text of the solution card
		oRm.writeEscaped(oCtrl.getActionText());

		oRm.write("</span>"); // span

		oRm.write("</div>"); // action
		oRm.write("</div>"); // card

	},

	/**
	 * @param oEvent
	 * @memberOf control.SolutionCard
	 */
	onBeforeRendering : function(oEvent) {

	},

	/**
	 * @param oEvent
	 * @memberOf control.SolutionCard
	 */
	onAfterRendering : function(oEvent) {

	}

});

}; // end of i2d/pp/mrpcockpit/reuse/controls/SolutionCard.js
if ( !jQuery.sap.isDeclared('i2d.pp.mrpcockpit.reuse.controls.SolutionCardContainer') ) {
  jQuery.sap.declare('i2d.pp.mrpcockpit.reuse.controls.SolutionCardContainer');

/**
 * MRP SolutionCardContainer as a container for any amount of "Solution Cards"
 */
sap.ui.core.Control.extend("i2d.pp.mrpcockpit.reuse.controls.SolutionCardContainer", {

	metadata : {
		properties : {
			scrollStep : "int",
			animationSpeed : "int",
			cardWidth : "int",
			registrationID : "string",
			materialShortageHasNoSolution : "boolean"
		},

		defaultAggregation : "cards",
		aggregations : {
			"cards" : {
				type : "i2d.pp.mrpcockpit.reuse.controls.SolutionCard",
				multiple : true,
				singularName : "card"
			},
			"ctrlScrollLeft" : {
				type : "sap.ui.core.Icon",
				multiple : false
			},
			"ctrlScrollRight" : {
				type : "sap.ui.core.Icon",
				multiple : false
			}
		},
		associations : {
			"activeCard" : {
				type : "i2d.pp.mrpcockpit.reuse.controls.SolutionCard",
				multiple : false
			}
		}
	},

	/**
	 * Initialization: Register the browser event for resizing. Set default values for card width and animation speed.
	 * Initialize the icons for the scroll elements.
	 * 
	 * @memberOf control.SolutionCardContainer
	 */
	init : function() {

		// Set some defaults for the solution cards
		this.setAnimationSpeed(750);
		this.setCardWidth(148);
		this.setScrollStep(0);
		this.setMaterialShortageHasNoSolution(false);
		// Shortcut to the MRP constants
		this.Constants = i2d.pp.mrpcockpit.reuse.util.CommonConstants;

		// Create and init the left arrow
		var oCtrlScrollLeft = new sap.ui.core.Icon({
			id : "mrpScrollLeft",
			src : "sap-icon://navigation-left-arrow"
		});
		this.setCtrlScrollLeft(oCtrlScrollLeft);

		// Create and init the right arrow
		var oCtrlScrollRight = new sap.ui.core.Icon({
			id : "mrpScrollRight",
			src : "sap-icon://navigation-right-arrow"
		});
		this.setCtrlScrollRight(oCtrlScrollRight);

		// Register on events that indicate a solution card interaction
		var bus = sap.ui.getCore().getEventBus();
		// subscribe on event for a processed solution card in order to lock all cards on the screen
		bus.subscribe(this.Constants.EVENT_CHANNELID_SOLCARD, this.Constants.EVENT_EVENTID_DIALOG_START,
				this.onODataSent, this);
		// subscribe on event for a processed solution card in order to unlock all cards on the screen
		bus.subscribe(this.Constants.EVENT_CHANNELID_CARD_DIALOG_DATACHANGED, this.Constants.EVENT_EVENTID_DIALOG_CANCEL,
				this.unlockAllCards, this);
		// subscribe on event for a solution card failure in order to enable all cards on the screen
		bus.subscribe(this.Constants.EVENT_CHANNELID_CARD_DIALOG_DATACHANGED, this.Constants.EVENT_EVENTID_ERROR,
				this.onODataError, this);

	},

	/**
	 * Exit: Unregister the browser event for resizing
	 * 
	 * @memberOf control.SolutionCardContainer
	 */
	exit : function() {
		// Unregister the resizing event handler
		sap.ui.core.ResizeHandler.deregister(this.getRegistrationID);
		var bus = sap.ui.getCore().getEventBus();
		// Unregister the data changed events
		bus.unsubscribe(this.Constants.EVENT_CHANNELID_SOLCARD, this.Constants.EVENT_EVENTID_DIALOG_START,
				this.onODataSent, this);
		bus.unsubscribe(this.Constants.EVENT_CHANNELID_CARD_DIALOG_DATACHANGED, this.Constants.EVENT_EVENTID_DIALOG_CANCEL,
				this.onODataSent, this);
		bus.unsubscribe(this.Constants.EVENT_CHANNELID_CARD_DIALOG_DATACHANGED, this.Constants.EVENT_EVENTID_ERROR,
				this.onODataError, this);
	},

	/**
	 * This method is the handler function for the ODataError-Event that is fired from the solution dialogs when the OData
	 * Response has been received from the server but contained an error message. The solution card container has to
	 * enable all available solution cards on the screen in order to allow additional interaction by the user.
	 * 
	 * @memberOf control.SolutionCardContainer
	 */
	onODataError : function() {
		this.enableAllCards();
	},

	/**
	 * This method is the handler function for the ODataSent-Event that is fired from the solution dialogs when the OData
	 * Request has been sent to the server. The solution card container has to lock all available solution cards on the
	 * screen in order to prevent additional interaction by the user.
	 * 
	 * @memberOf control.SolutionCardContainer
	 */
	onODataSent : function() {
		this.lockAllCards();
	},

	/**
	 * Enable all cards
	 * 
	 * @memberOf control.SolutionCardContainer
	 */
	enableAllCards : function() {
		var aCards = this.getCards();
		var i;
		for (i = 0; i < aCards.length; i++) {
			aCards[i].setState(this.Constants.CARD_STATE_ENABLED);
		}
	},

	/**
	 * Enable one specific card
	 * 
	 * @param oCard
	 *          The solution card that shall be enabled
	 * @memberOf control.SolutionCardContainer
	 */
	enableCard : function(oCard) {
		var aCards = this.getCards();
		var i;
		for (i = 0; i < aCards.length; i++) {
			if (oCard === aCards[i]) {
				oCard.setState(this.Constants.CARD_STATE_ENABLED);
			}
		}
	},

	/**
	 * Lock one specific card
	 * 
	 * @param oCard
	 *          The solution card that shall be locked
	 * @memberOf control.SolutionCardContainer
	 */
	lockCard : function(oCard) {
		var aCards = this.getCards();
		for ( var i = 0; i < aCards.length; i++) {
			if (oCard === aCards[i]) {
				oCard.setState(this.Constants.CARD_STATE_LOCKED);
			}
		}
	},

	/**
	 * Lock all cards
	 * 
	 * @memberOf control.SolutionCardContainer
	 */
	lockAllCards : function() {
		var aCards = this.getCards();
		for ( var i = 0; i < aCards.length; i++) {
			aCards[i].setState(this.Constants.CARD_STATE_LOCKED);
		}
	},

	/**
	 * Un-Lock one specific card. Target status is 'enabled'
	 * 
	 * @param oCard
	 *          The solution card that shall be unlocked
	 * @memberOf control.SolutionCardContainer
	 */
	unlockCard : function(oCard) {
		var aCards = this.getCards();
		for ( var i = 0; i < aCards.length; i++) {
			if (oCard === aCards[i]) {
				oCard.setState(this.Constants.CARD_STATE_ENABLED);
			}
		}
	},

	/**
	 * Un-Lock all card. Target status is 'enabled'
	 * 
	 * @memberOf control.SolutionCardContainer
	 */
	unlockAllCards : function() {
		this.enableAllCards();
	},

	/**
	 * Deactivate one specific card
	 * 
	 * @param oCard
	 *          The solution card that shall be deactivated
	 * @memberOf control.SolutionCardContainer
	 */
	deactivateCard : function(oCard) {
		var aCards = this.getCards();
		for ( var i = 0; i < aCards.length; i++) {
			if (oCard === aCards[i]) {
				oCard.setState(this.Constants.CARD_STATE_DISABLED);
			}
		}
	},

	/**
	 * Activate one specific card
	 * 
	 * @param oCard
	 *          The solution card that shall be activated
	 * @memberOf control.SolutionCardContainer
	 */
	activateCard : function(oCard) {
		var aCards = this.getCards();
		for ( var i = 0; i < aCards.length; i++) {
			if (oCard === aCards[i]) {
				oCard.setState(this.Constants.CARD_STATE_ACTIVE);
			}
		}
	},

	/**
	 * Hide one specific card
	 * 
	 * @param oCard
	 *          The solution card that shall be hided
	 * @memberOf control.SolutionCardContainer
	 */
	hideCard : function(oCard) {
		var aCards = this.getCards();
		for ( var i = 0; i < aCards.length; i++) {
			if (oCard === aCards[i]) {
				oCard.setState(this.Constants.CARD_STATE_HIDDEN);
			}
		}
	},

	/**
	 * Disable all cards
	 * 
	 * @memberOf control.SolutionCardContainer
	 */
	disableAllCards : function() {
		var aCards = this.getCards();
		for ( var i = 0; i < aCards.length; i++) {
			aCards[i].setState(this.Constants.CARD_STATE_DISABLED);
		}
	},

	/**
	 * Disable one specific card
	 * 
	 * @param oCard
	 *          The solution card that shall be disabled
	 * @memberOf control.SolutionCardContainer
	 */
	disableCard : function(oCard) {
		var aCards = this.getCards();
		for ( var i = 0; i < aCards.length; i++) {
			if (oCard === aCards[i]) {
				oCard.setState(this.Constants.CARD_STATE_DISABLED);
			}
		}
	},

	/**
	 * Create new solution cards based on the given input array containing the data for each solution card. It adds each
	 * card to the internal aggregation and sorts the cards.
	 * 
	 * @param aCards
	 *          Array of data representing each solution card.
	 * @param MaterialShortageHasNoSolution
	 *          boolean indicating if there is a solution for the given shortage problem. If not, a static message is
	 *          shown instead of any solution card.
	 * @memberOf control.SolutionCardContainer
	 */
	addSolutionCards : function(aCards, MaterialShortageHasNoSolution) {
		// Remove all data from the container
		this.removeAllCards();

		if (MaterialShortageHasNoSolution) {
			// No solution then display no cards
			this.setMaterialShortageHasNoSolution(true);
		} else {
			this.setMaterialShortageHasNoSolution(false);
			for ( var i = 0; i < aCards.length; i++) {
				// Create a new solution card and pass the current array
				// element that contains the relevant data
				var oCard = new i2d.pp.mrpcockpit.reuse.controls.SolutionCard({
					myCard : aCards[i]
				});
				// Transfer the i18n model
				oCard.setModel(this.getModel("Common_i18n"), "Common_i18n");
				// Generate the title, subtitle, ... of the card
				oCard.initCard();
				// Set the style classes of the card
				oCard.setState(this.Constants.CARD_STATE_ENABLED);
				// Add the current card to the array
				this.addCard(oCard);
			}
			// Set the UI status of the solution cards
			this.updateStatusOfSolutionCards();
			// Add 'tool tip' for the scroll arrows
			var oBundle = this.getModel("Common_i18n").getResourceBundle();
			var oCtrlScrollLeft = this.getCtrlScrollLeft();
			oCtrlScrollLeft.setTooltip(oBundle.getText("CARD_XTOL_ARROW"));
			var oCtrlScrollRight = this.getCtrlScrollRight();
			oCtrlScrollRight.setTooltip(oBundle.getText("CARD_XTOL_ARROW"));
		}
	},

	/**
	 * Update the status/UI of the solution cards based on the currently selected solution card The update algorithm also
	 * considers the type of existing cards in the collection.
	 * 
	 * @param oCardSel
	 *          The selected solution card (optional).
	 * @memberOf control.SolutionCardContainer
	 */
	updateStatusOfSolutionCards : function(oCardSel) {

		var i;
		var aCards = this.getCards();

		// Check if we have one card of type 'ACCEPT_REMOVE'
		// This happens if the user has accepted a shortage for this
		// particular shortage before. The information comes out of
		// the solution call.
		var bExistsAccepted = this.existsSolutionCardOfType(this.Constants.SOLUTIONTYPE_ACCEPT_REMOVE);
		if (bExistsAccepted) {
			// If there's a card 'accepted', we have to
			// - enable card 'accepted'
			// - hide card 'accept'
			// - lock all other cards
			for (i = 0; i < aCards.length; i++) {
				var oCard = aCards[i];
				if (oCard.getMaterialShortageSolutionType() === this.Constants.SOLUTIONTYPE_ACCEPT_REMOVE) {
					this.enableCard(oCard);
				} else if (oCard.getMaterialShortageSolutionType() === this.Constants.SOLUTIONTYPE_ACCEPT) {
					this.hideCard(oCard);
				} else {
					this.lockCard(oCard);
				}
			}
		} else {
			// If there's no card 'accepted', we interpret the click
			// as a 'preview' or 'cancel preview' depending of the
			// status of the selected solution card.
			for (i = 0; i < aCards.length; i++) {
				var oCard = aCards[i];
				if (oCard !== oCardSel) {
					if (oCardSel && oCardSel.isSolutionCardActive()) {
						// If selected card is active (user has clicked the
						// card for preview) then disable all other cards
						this.disableCard(oCard);
					} else {
						// If selected card is not active (user has clicked
						// the card to cancel the preview) then enable
						// all other cards
						this.enableCard(oCard);
					}
				}
			}
		}

	},

	/**
	 * Checks if a solution card of a given type exists.
	 * 
	 * @param sSolutionType
	 *          string defining the type of a solution card
	 * @memberOf control.SolutionCardContainer
	 */
	existsSolutionCardOfType : function(sSolutionType) {
		var aCards = this.getCards();
		var bExists = false;
		for ( var i = 0; i < aCards.length; i++) {
			if (aCards[i].getMaterialShortageSolutionType() === sSolutionType) {
				bExists = true;
			}
		}
		return bExists;
	},

	/**
	 * Checks if a solution card of a given status exists.
	 * 
	 * @param sStatus
	 *          string defining the status of a solution card
	 * @memberOf control.SolutionCardContainer
	 */
	existsSolutionCardOfState : function(sStatus) {
		var aCards = this.getCards();
		for ( var i = 0; i < aCards.length; i++) {
			if (aCards[i].hasState(sStatus)) {
				return true;
			}
		}
		return false;
	},

	/**
	 * Add a new solution card to an existing aggregation of solution cards.
	 * 
	 * @param oCard
	 *          object representing the solution card that is added
	 * @memberOf control.SolutionCardContainer
	 */
	addSolutionCard : function(oCard) {

		// Create a new solution card and pass the current array
		// element that contains the relevant data
		var oSolCard = new i2d.pp.mrpcockpit.reuse.controls.SolutionCard({
			myCard : oCard
		});
		// Transfer the i18n model
		oSolCard.setModel(this.getModel("Common_i18n"), "Common_i18n");
		// Generate the title, subtitle, ... of the card
		oSolCard.initCard();
		// Set the style classes of the card
		oSolCard.setState(this.Constants.CARD_STATE_ENABLED);
		// Add the current card to the array
		this.addCard(oSolCard);
		// Set the UI status of the solution cards
		this.updateStatusOfSolutionCards();
	},

	/**
	 * Remove all cards
	 * 
	 * @memberOf control.SolutionCardContainer
	 */
	removeCards : function() {
		this.removeAllCards();
	},

	/**
	 * Creates the required HTML code for the control. <BR>
	 * There's an indicator in the solution call that decides whether the solution cards shall be shown or not. Info: It
	 * loops over all items of the internal aggregation of solution cards and calls the renderer of each card.
	 * 
	 * @param oRm
	 *          object representing the renderer
	 * @param oCtrl
	 *          object representing the current control instance
	 * @memberOf control.SolutionCardContainer
	 */
	renderer : function(oRm, oCtrl) {

		// --------------------------
		// Root Tag
		oRm.write('<div');
		oRm.addClass("sapMRPSolutions");
		oRm.writeClasses();
		// writes the Control ID and enables event handling - important!
		oRm.writeControlData(oCtrl);
		oRm.write(">");

		// There's an indicator in the solution call that decides whether the solution cards
		// shall be shown or not.
		if (oCtrl.getMaterialShortageHasNoSolution()) {
			// Create an area that contains the error message
			var oMsg = new sap.m.TextArea({
				value : oCtrl.getModel("Common_i18n").getResourceBundle().getText("MATERIAL_SHORTAGE_HAS_NO_SOLUTION_MSG"),
				valueState : sap.ui.core.ValueState.Warning,
				rows : 8,
				cols : 100,
				editable : false
			});
			oMsg.addStyleClass("sapMRPMaterialShortageHasNoSolutionDescription");
			oRm.renderControl(oMsg);
		} else {

			// --------------------------
			// Create the controls that are used for scrolling
			oRm.write('<div ');
			oRm.writeAttributeEscaped("id", "mrpSolCardNavLeft");
			oRm.addClass("sapMRPSCLeft");
			oRm.addClass("sapMRPSCNav");
			oRm.writeClasses();
			oRm.write(">");
			oRm.renderControl(oCtrl.getCtrlScrollLeft());
			oRm.write("</div>");

			oRm.write('<div ');
			oRm.writeAttributeEscaped("id", "mrpSolCardNavRight");
			oRm.addClass("sapMRPSCRight");
			oRm.addClass("sapMRPSCNav");
			oRm.writeClasses();
			oRm.write(">");
			oRm.renderControl(oCtrl.getCtrlScrollRight());
			oRm.write("</div>");

			// --------------------------
			// Create the main area that is used for the solution cards
			oRm.write('<div ');
			oRm.writeAttributeEscaped("id", "mrpSolCardMiddle");
			oRm.addClass("sapMRPSCMiddle");
			oRm.writeClasses();
			oRm.write(">");

			// --------------------------
			// The main area gets an additional container for the solution card
			oRm.write('<div ');
			oRm.writeAttributeEscaped("id", "mrpSolCardContainer");
			oRm.write(">");

			// --------------------------
			// Render each solution card into the container
			var aChildren = oCtrl.getCards();
			for ( var i = 0; i < aChildren.length; i++) {
				// render the child control
				oRm.renderControl(aChildren[i]);
			}
		}
		oRm.write("</div>");
	},

	/**
	 * @param oEvent
	 *          object representing the event that is passed
	 * @memberOf control.SolutionCardContainer
	 */
	onBeforeRendering : function(oEvent) {

	},

	/**
	 * Method that is called after rendering. At adapts the size of the solution card container.
	 * 
	 * @param oEvent
	 *          object representing the event that is passed
	 * @memberOf control.SolutionCardContainer
	 */
	onAfterRendering : function(oEvent) {
		// Adapt the size of the solution card container
		this.updateSolutionCardContainerSize();
	},

	/**
	 * Determine the root of the tap event.
	 * 
	 * @param evt
	 *          object representing the event that is passed
	 * @memberOf SolutionCardContainer
	 */
	_getTapLocation : function(evt) {

		var sTapLocation = "";
		// Use jQuery to get the DOM of the currently selected area
		var oLocation = jQuery("#" + this.getId());
		// Get all children (DIVs, SPANs, ...) of that DOM element
		var aChildren = oLocation.children();
		var oChild = null;
		// Loop at each child element and check if the "event target" is part
		// of the particular child. If found, the click/tap event was triggered
		// from there and we just check its id...
		for ( var i = 0; i < aChildren.length; i++) {
			oChild = aChildren[i];
			if (oChild.contains(evt.target)) {
				switch (evt.target.id) {
					case "mrpScrollLeft" :
						sTapLocation = this.Constants.CARD_AREA_SCROLLLEFT;
						break;
					case "mrpScrollRight" :
						sTapLocation = this.Constants.CARD_AREA_SCROLLRIGHT;
						break;
					case "mrpSolCardMiddle" :
						sTapLocation = this.Constants.CARD_AREA_OUTSIDE;
						break;
					default :
						sTapLocation = this.Constants.CARD_AREA_INSIDE;
						break;
				}
			}
		}
		return sTapLocation;
	},

	/**
	 * The solution card control consists of several areas and sub controls. This method finds out whether a click/tap
	 * event was triggered from/within a solution card. It traverses the UI5-objects up to a parent that is a solution
	 * card. The existence of a solution card is defined by a specific method that exist only for these cards
	 * "getMaterialShortageSolutionType".
	 * 
	 * @param oCardSel
	 *          object representing the selected solution card
	 * @memberOf SolutionCardContainer
	 */
	_getTapedSolutionCard : function(oCardSel) {
		for ( var i = 0; i < 7; i++) {
			if (!oCardSel.getMaterialShortageSolutionType) {
				oCardSel = oCardSel.getParent();
			}
		}
		if (oCardSel.getMaterialShortageSolutionType) {
			return oCardSel;
		} else {
			return null;
		}
	},

	/**
	 * Event handler for the click/tap event. It checks the source of the event (either navigation or a solution card) and
	 * triggers the relevant action.
	 * 
	 * @param evt
	 *          object representing the incoming event
	 * @memberOf control.SolutionCardContainer
	 */
	ontap : function(evt) {

		var oCardSel = null;
		// Determine the currently selected control and its area within the control
		var sTapLocation = this._getTapLocation(evt);
		switch (sTapLocation) {
			case this.Constants.CARD_AREA_SCROLLLEFT :
				this.moveToLeft(this.getScrollStep());
				break;
			case this.Constants.CARD_AREA_SCROLLRIGHT :
				this.moveToRight(this.getScrollStep());
				break;
			case this.Constants.CARD_AREA_INSIDE :
			case this.Constants.CARD_AREA_ICON :
				// Ensure that the card is selected and not just a sub control of the card
				oCardSel = evt.srcControl;
				oCardSel = this._getTapedSolutionCard(oCardSel);
				if (!oCardSel) {
					return; // Should not happen
				}
				if (oCardSel.isSolutionCardLocked()) {
					// If the currently selected solution card is locked -> no UI changes!
					return;
				}
				if (oCardSel.getMaterialShortageSolutionType() === this.Constants.SOLUTIONTYPE_ACCEPT) {
					// If the currently selected solution card is 'Accept', it might be that we've been in a preview before.
					// So we enable all cards.
					this.enableAllCards();
					return;
				}
				if (oCardSel.getMaterialShortageSolutionType() === this.Constants.SOLUTIONTYPE_ACCEPT_REMOVE) {
					// If the currently selected solution card is 'Accepted' -> no UI changes!
					return;
				}
				// Do the status update of all solution cards (enabled, active, ...)
				this.updateStatusOfSolutionCards(oCardSel);
				break;

			case this.Constants.CARD_AREA_OUTSIDE :
				// If there is one locked solution card, we must not react on this click event
				if (this.existsSolutionCardOfState(this.Constants.CARD_STATE_LOCKED)) {
					return;
				}
				// Cancel the active preview
				this._triggerSolutionCardCancelPreview();
				// Mark all the solution cards as default enabled
				this.enableAllCards();
				this.setActiveCard(null);
				break;
		}
	},

	/**
	 * Recognizes swipe events to the left. Swipe to the left means that the cards are moved to the right
	 * 
	 * @param evt
	 *          object representing the incoming event
	 * @memberOf control.SolutionCardContainer
	 */
	onswipeleft : function(evt) {
		this.moveToRight((this.getScrollStep() / 2));
	},

	/**
	 * Recognizes swipe events to the right. Swipe to the right means that the cards are moved to the left
	 * 
	 * @param evt
	 *          object representing the incoming event
	 * @memberOf control.SolutionCardContainer
	 */
	onswiperight : function(evt) {
		this.moveToLeft((this.getScrollStep() / 2));
	},

	/**
	 * Moves the solution cards to the left by x pixel.
	 * 
	 * @param iPixel
	 *          integer defining the amount of pixels the card shall be moved to the left side
	 * @memberOf control.SolutionCardContainer
	 */
	moveToLeft : function(iPixel) {
		$("#mrpSolCardMiddle").animate({
			scrollLeft : "-=" + (iPixel).toString() + "px"
		}, this.getAnimationSpeed());
	},

	/**
	 * Moves the solution cards to the right by x pixel.
	 * 
	 * @param iPixel
	 *          integer defining the amount of pixels the card shall be moved to the right side
	 * @memberOf control.SolutionCardContainer
	 */
	moveToRight : function(iPixel) {
		$("#mrpSolCardMiddle").animate({
			scrollLeft : "+=" + (iPixel).toString() + "px"
		}, this.getAnimationSpeed());
	},

	/**
	 * Arrange the solution cards into the area 'mrpSolCardMiddle' by setting the size of the container and manage the
	 * scroll arrows
	 * 
	 * @memberOf control.SolutionCardContainer
	 */
	updateSolutionCardContainerSize : function() {
		// Determine and set the size of the container containing all solution cards (might be larger than the size of the
		// screen)
		var iContainerWidth = this.getContainerWidth();
		$("#mrpSolCardContainer").width(iContainerWidth);
		// Determine the size of the page, where the container is embedded
		var iScreenWidth = $(".sapMRPSolutions").parent().width();
		// Set the width of the area 'sapMRPSolutions'
		$(".sapMRPSolutions").width("100%");
		// Adjust the relevant screen width by subtracting margins
		var iS4Margins = 32;
		var iScreenWidthRelevant = iScreenWidth - iS4Margins;
		// If the cards do NOT fit into this area, show the scroll arrows
		if (iContainerWidth < iScreenWidthRelevant) {
			// Hide the scroll arrows
			this._hideScrollArrows();
			this.setScrollStep(0);
		} else {
			// Show the scroll arrows
			this._showScrollArrows();
			// Set scrolling offset
			var iStep = this.calculateScrollStep();
			this.setScrollStep(iStep);
		}
	},

	/**
	 * Calculate the width of the container. Amount of cards * Card Size with margins + Safe Margin. Info: Some browsers
	 * have an issue with zoom factors and the calculation of the size and as a consequence the last solution card is
	 * 'overflowed'. Therefore we add 10px for safety reasons.
	 * 
	 * @memberOf control.SolutionCardContainer
	 */
	getContainerWidth : function() {
		var iAmountCards = this.getCards().length;
		var iCardWidthWithMargin = $(".sapMRPSC").outerWidth(true); // 'true' reads with margin
		var iSafeMarginRight = 10;
		return (iAmountCards * iCardWidthWithMargin + iSafeMarginRight);
	},

	/**
	 * Get the height of the solution card container
	 * 
	 * @memberOf control.SolutionCardContainer
	 */
	getContainerHeight : function() {
		var iSolutionCardContainerHeight = $(".sapMRPSolutions").height();
		return iSolutionCardContainerHeight;
	},

	/**
	 * Calculate the scroll step that is applied when the user scrolls the solution cards. The value depends on how many
	 * cards can be displayed on the screen. The scrollstep equals the amount of cards that can be displayed on the
	 * screen.
	 * 
	 * @memberOf control.SolutionCardContainer
	 */
	calculateScrollStep : function() {
		var iAmountCardsInSection = 0;
		var iCardWidth = 0;
		var iCardsSectionMiddle = $("#mrpSolCardMiddle").width();
		iCardWidth = $(".sapMRPSC").outerWidth(true); // 'true' reads with margin
		if (iCardWidth && (iCardWidth > 0)) {
			iAmountCardsInSection = Math.floor(iCardsSectionMiddle / iCardWidth);
		}
		return iCardWidth * iAmountCardsInSection;
	},

	/**
	 * Hide the scroll arrows by adding the CSS class sapMRPScrollHidden
	 * 
	 * @memberOf SolutionCard
	 */
	_hideScrollArrows : function() {
		$("#mrpScrollLeft").addClass("sapMRPScrollHidden");
		$("#mrpScrollRight").addClass("sapMRPScrollHidden");
	},

	/**
	 * Show the scroll arrows by removing the CSS class sapMRPScrollHidden
	 * 
	 * @memberOf SolutionCard
	 */
	_showScrollArrows : function() {
		$("#mrpScrollLeft").removeClass("sapMRPScrollHidden");
		$("#mrpScrollRight").removeClass("sapMRPScrollHidden");
	},

	/**
	 * Trigger the cancel preview of the solution card
	 * 
	 * @memberOf SolutionCard
	 */
	_triggerSolutionCardCancelPreview : function() {
		var bus = sap.ui.getCore().getEventBus();
		bus.publish(this.Constants.EVENT_CHANNELID_CARD_PREVIEW, this.Constants.EVENT_EVENTID_CANCEL, {
			model : null
		});
	},

	/**
	 * Get the total amount of all visible solution cards
	 * 
	 * @memberOf SolutionCard
	 */
	_getCountVisibleSolutionCards : function() {
		var iCnt = 0;
		var aCards = this.getCards();
		for ( var i = 0; i < aCards.length; i++) {
			if (!aCards[i].hasState(this.Constants.CARD_STATE_HIDDEN)) {
				iCnt++;
			}
		}
		return iCnt;
	}

});

}; // end of i2d/pp/mrpcockpit/reuse/controls/SolutionCardContainer.js
if ( !jQuery.sap.isDeclared('i2d.pp.mrpcockpit.reuse.fragments.DialogRoot') ) {
  jQuery.sap.declare('i2d.pp.mrpcockpit.reuse.fragments.DialogRoot');


jQuery.sap.require('sap.ca.ui.utils.busydialog'); // unlisted dependency retained

jQuery.sap.require('sap.ca.ui.message.message'); // unlisted dependency retained

jQuery.sap.require('sap.ca.ui.model.type.Number'); // unlisted dependency retained

jQuery.sap.require('sap.ca.ui.model.format.QuantityFormat'); // unlisted dependency retained

jQuery.sap.require('sap.ca.scfld.md.controller.BaseDetailController'); // unlisted dependency retained

// new
jQuery.sap.require('sap.ui.core.format.NumberFormat'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.Configuration'); // unlisted dependency retained


sap.ca.scfld.md.controller.BaseDetailController.extend("i2d.pp.mrpcockpit.reuse.fragments.DialogRoot", {

	/**
	 * Called when a controller is instantiated and its View controls (if available) are already created. Can be used to
	 * modify the View before it is displayed, to bind event handlers and do other one-time initialization
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.util.DialogRoot
	 */
	beforeOpen : function(oControlEvent) {
		// 'Dialog Action' is used as a variable for messages because the dialog is used in various contexts
		this.dialogAction = "";
		// Extract the dialog out of the event
		this.oDialog = oControlEvent.getSource();
		// Shortcut to the MRP constants
		this.Common_i18n = this.oDialog.getModel('Common_i18n').getResourceBundle();
		this.Constants = i2d.pp.mrpcockpit.reuse.util.CommonConstants;

		// We assume that the pre-calculated values (from the backend) are correct
		this.bDateValid = true;
		this.bAmountValid = true;

		// The control <Input> uses numbers - so convert the string
		var oModel = this.oDialog.getModel();
		oModel.setProperty("/MRPElementOriginalTotalQty", Number(oModel.getProperty("/MRPElementOriginalTotalQty")));
		oModel.setProperty("/MRPElementChangedTotalQuantity", Number(oModel.getProperty("/MRPElementChangedTotalQuantity")));
		oModel.setProperty("/OrderedChangedQuantity", Number(oModel.getProperty("/OrderedChangedQuantity")));

		// Initialize the handlers for OData Calls and store them as members
		var oHandlerOrder = {};
		oHandlerOrder.fnSuccess = function(oData, oResponse, aErrorResponses) {
			this._onOdataOrderSuccess(oData, oResponse, aErrorResponses);
		}.bind(this);
		oHandlerOrder.fnError = function(oError) {
			this._onOdataOrderError(oError);
		}.bind(this);

		var oHandlerCR = {};
		oHandlerCR.fnSuccess = function(oData, oResponse, aErrorResponses) {
			this._onOdataCRSuccess(oData, oResponse, aErrorResponses);
		}.bind(this);
		oHandlerCR.fnError = function(oError) {
			this._onOdataCRError(oError);
		}.bind(this);

		this._oHandlerOrder = oHandlerOrder;
		this._oHandlerCR = oHandlerCR;

		// Initialize the dialog - implemented in the subclasses
		this._initializeDialog();
	},

	/**
	 * This method is used to initialize the dialogs to the specific needs. It is intended to be overwritten in the sub
	 * classes.
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.util.DialogRoot
	 */
	_initializeDialog : function() {

	},

	/**
	 * This method is the handler for a successful OData Write. It determines the view model and adds a success message.
	 * Then it throws an event for the solution view in order to update all clients.
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.util.DialogRoot
	 */
	_fireEventODataSuccess : function(messageText, responseModel) {
		// Put the message to the model
		var oModel = this.oDialog.getModel();
		oModel.setProperty("/msg", messageText);
		// Fire Event to inform the controller(s) about the
		// successful ODataCall with the new data
		var bus = sap.ui.getCore().getEventBus();
		bus.publish(this.Constants.EVENT_CHANNELID_CARD_DIALOG_DATACHANGED, this.Constants.EVENT_EVENTID_OK, {
			model : {
				cardModel : oModel,
				responseModel : responseModel
			}
		});
	},

	/**
	 * This method is the handler that is executed if the OData-Call (Change the PO/TO) has been successful. A positive
	 * response may also contain error messages - therefore this is checked as well. If everything worked fine, an event
	 * is triggered in order to inform S4 about the changes.
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.util.DialogRoot
	 */
	_onOdataOrderSuccess : function(oData, oResponse, aErrorResponses) {
		// We have to track the error responses!
		sap.ca.ui.utils.busydialog.releaseBusyDialog();
		// Check if errors have occurred within the batch update
		if (aErrorResponses.length > 0) {
			// Extract the error message out of the response object
			var sErrorText = i2d.pp.mrpcockpit.reuse.util.Helper.extractErrorMsgFromBatchResponse(this.Common_i18n,
					aErrorResponses);
			// Show the error message in a message box
			sap.ca.ui.message.showMessageBox({
				type : sap.ca.ui.message.Type.ERROR,
				message : this.Common_i18n.getText("SOLUTION_DIALOG_" + this.dialogAction + "_MSG_ERROR"),
				details : sErrorText
			});
			// Inform the listeners that OData returned an error
			this._fireEventODataError();
		} else {
			// The response object indicates a success status. So publish a success event to the listeners
			this._fireEventODataSuccess(this.Common_i18n.getText("SOLUTION_DIALOG_" + this.dialogAction + "_MSG_SUCCESS"),
					oData);
		}
	},

	/**
	 * This method is the handler that is executed if the OData-Call (Change the PO/TO) has failed. The error is extracted
	 * and displayed in a error message. This message contains a static header text. The details of the message contain
	 * the text retrieved from the backend.
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.util.DialogRoot
	 */
	_onOdataOrderError : function(oError) {
		var sErrorText = "";
		sap.ca.ui.utils.busydialog.releaseBusyDialog();
		// Check if/Ensure the response object contains a body
		if (oError && oError.response && oError.response.body) {
			// Extract the error message out of the response object
			sErrorText = i2d.pp.mrpcockpit.reuse.util.Helper
					.extractErrorMsgFromStream(this.Common_i18n, oError.response.body);
		} else {
			// Use a default for an unknown error
			sErrorText = this.Common_i18n.getText("SOLUTION_DIALOG_ERROR_UNKNOWN");
		}
		// Show the error message in a message box
		sap.ca.ui.message.showMessageBox({
			type : sap.ca.ui.message.Type.ERROR,
			message : this.Common_i18n.getText("SOLUTION_DIALOG_" + this.dialogAction + "_MSG_ERROR"),
			details : sErrorText
		});
		// Inform the listeners that OData returned an error
		this._fireEventODataError();
	},

	/**
	 * This method is the handler that is executed if the OData-Call (Create Change Request) has been successful. A
	 * positive response may also contain error messages - therefore this is checked as well. If everything worked fine,
	 * an event is triggered in order to inform S4 about the changes.
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.util.DialogRoot
	 */
	_onOdataCRSuccess : function(oData, oResponse, aErrorResponses) {
		// We have to track the error responses!
		sap.ca.ui.utils.busydialog.releaseBusyDialog();
		// Get the model of the Dialog
		var oDialogModel = this.oDialog.getModel().getData();
		// Check if errors have occurred within the batch update
		if (aErrorResponses.length > 0) {
			// Extract the error message out of the response object
			var sErrorText = i2d.pp.mrpcockpit.reuse.util.Helper.extractErrorMsgFromBatchResponse(this.Common_i18n,
					aErrorResponses);
			// Show the error message in a message box
			sap.ca.ui.message.showMessageBox({
				type : sap.ca.ui.message.Type.ERROR,
				message : this.Common_i18n.getText("SOLUTION_DIALOG_MSG_REQUEST_SAVE_FAILED", [
						oDialogModel.MRPElementExternalID, oDialogModel.MRPElementItemExternalID]),
				details : sErrorText
			});
			// Inform the listeners that OData returned an error
			this._fireEventODataError();
		} else {
			// The response object indicates a success status. So publish a success event to the listeners
			var sRequestSavedText = this.Common_i18n.getText("SOLUTION_DIALOG_MSG_REQUEST_SAVED", [
					oDialogModel.MRPElementExternalID, oDialogModel.MRPElementItemExternalID]);
			this._fireEventODataSuccess(sRequestSavedText, oData);
		}
	},

	/**
	 * This method is the handler that is executed if the OData-Call (Create Change Request) has failed. The error is
	 * extracted and displayed in a error message. This message contains a static header text. The details of the message
	 * contain the text retrieved from the backend.
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.util.DialogRoot
	 */
	_onOdataCRError : function(oError) {
		var sErrorText = "";
		sap.ca.ui.utils.busydialog.releaseBusyDialog();
		// Get the model of the Dialog
		var oDialogModel = this.oDialog.getModel().getData();
		// Check if/Ensure the response object contains a body
		if (oError && oError.response && oError.response.body) {
			// Extract the error message out of the response object
			sErrorText = i2d.pp.mrpcockpit.reuse.util.Helper
					.extractErrorMsgFromStream(this.Common_i18n, oError.response.body);
		} else {
			// Use a default for an unknown error
			sErrorText = this.Common_i18n.getText("SOLUTION_DIALOG_ERROR_UNKNOWN");
		}
		// Show the error message in a message box
		sap.ca.ui.message.showMessageBox({
			type : sap.ca.ui.message.Type.ERROR,
			message : this.Common_i18n.getText("SOLUTION_DIALOG_MSG_REQUEST_SAVE_FAILED", [oDialogModel.MRPElementExternalID,
					oDialogModel.MRPElementItemExternalID]),
			details : sErrorText
		});
		// Inform the listeners that OData returned an error
		this._fireEventODataError();
	},

	/**
	 * This method is the handler for the button "OK". It is intended to be overwritten in the sub classes.
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.util.DialogRoot
	 */
	onOk : function(evt) {

	},

	/**
	 * This method is the handler for the button "Cancel" Just closes and destroys the dialog.
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.util.DialogRoot
	 */
	onCancel : function(evt) {
		evt.getSource().getParent().close();
		this.oDialog.close();
		this.oDialog.destroy();
		this._fireEventDialogCancel();
	},

	/**
	 * Event handler for the Date Picker control that is called as soon as the user leaves the date picker control. The
	 * event itself has a parameter 'invalidValue' that indicates whether the control has a valid value.
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.util.DialogRoot
	 */
	_onChangeDatePicker : function(oEvent) {
	// check valid input format
		if(!oEvent.getParameter("valid")){
			this._setStatusDate(false, oEvent.getSource(), true);
			return;
		}
		// Get the date of the date picker control
		var dPicker = oEvent.getSource().getDateValue();
		// Get the current date and initialize with 00:00 in order to be comparable with the picker value
		var dToday = new Date();
		dToday.setHours(0, 0, 0, 0);
		if (dPicker < dToday) {
			// Date in the past is not valid
			this._setStatusDate(false, oEvent.getSource());
		} else {
			// Date is valid
			this._setStatusDate(true, oEvent.getSource());
		}
	},

	/**
	 * "Live" Eventhandler for the Amount Input control that is called after each character/number the user types into the
	 * control. The event itself just has the parameter 'newValue'. So we have to check its value within that handler and
	 * set the correct UI status.
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.util.DialogRoot
	 */
	_onLiveChangeInput : function(oEvent) {
		var sQuantity = oEvent.getParameter("newValue");
		var oCurrentLocale = sap.ui.getCore().getConfiguration().getLocale();
		var oNrFormatter = sap.ui.core.format.NumberFormat.getInstance({
			style : "full"
		}, oCurrentLocale);

		// get the current separators dependent on the current language
		var decimalSeparator = oNrFormatter.oFormatOptions.decimalSeparator;
		var groupingSeparator = oNrFormatter.oFormatOptions.groupingSeparator;

		// get the positions of the separators
		var positionGroupingSeparator = sQuantity.indexOf(groupingSeparator);
		var positionDecimalSeparator = sQuantity.indexOf(decimalSeparator);
		var mDecimalSeparatorBrackets = "[" + decimalSeparator + "]";
		var regularExpressionDecSep = new RegExp(mDecimalSeparatorBrackets, 'g');

		var oModel = this.oDialog.getModel();

		// Check 1: Is decimal separator the last value
		// Check 2: Locate the position of grouping separator and decimal separator
		// Check 3: How often the decimal separator exist
		if ((sQuantity.charAt(sQuantity.length - 1) == decimalSeparator)
				&& (positionGroupingSeparator < positionDecimalSeparator)
				&& (sQuantity.charAt(sQuantity.match(regularExpressionDecSep).length) == 1)) {
			// Success
			this._setStatusAmount(true, oEvent.getSource());
		}

		else {
			// Check using internal function
			var iQuantity = oNrFormatter.parse(sQuantity);
			if (isNaN(iQuantity) || (iQuantity <= 0)) {
				// Error
				this._setStatusAmount(false, oEvent.getSource());
				oEvent.getSource().setValue(oEvent.getParameter("newValue"));
			}

			else {
				// Additional checks on values located after the decimal separator
				var indexOfDecSeparator = sQuantity.lastIndexOf(decimalSeparator);

				if (indexOfDecSeparator > 0) {
					var sliceData = sQuantity.slice(indexOfDecSeparator + 1);
					var lenghtOfSlicedData = sliceData.length;

					// before push reactivate the coding
					// compare current value with the allowed decimal places
					if (lenghtOfSlicedData <= oModel.getProperty("/TargetQuantityUnitDcmls")) {
						// Success
						this._setStatusAmount(true, oEvent.getSource());
					} else {
						// Error
						this._setStatusAmount(false, oEvent.getSource());
						oEvent.getSource().setValue(oEvent.getParameter("newValue"));
					}
				} else {
					// Success
					this._setStatusAmount(true, oEvent.getSource());
				}
			}
		}
	},

	/**
	 * This method sets the 'value state' (red box vs. info box around the input field) for the amount control and stores
	 * the information whether the date value is valid
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.util.DialogRoot
	 */
	_setStatusAmount : function(bValid, oControl) {
		// Store the information 'valid' vs. 'not valid' at the controller
		this.bAmountValid = bValid;
		// Set the style of the control. Red box with message vs. green box
		if (bValid) {
			oControl.setValueState(sap.ui.core.ValueState.Info);
		} else {
			oControl.setValueState(sap.ui.core.ValueState.Error);
		}
	},

	/**
	 * This method sets the 'value state' (red box vs. info box around the input field) for the date control and stores
	 * the information whether the date value is valid
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.util.DialogRoot
	 */
	_setStatusDate : function(bValid, oControl, bInvalidDateFormat) {
		// Store the information 'valid' vs. 'not valid' at the controller
		this.bDateValid = bValid;
		this.bInvalidDateFormat = bInvalidDateFormat;
		// Set the style of the control. Red box vs. green box
		if (bValid) {
			oControl.setValueState(sap.ui.core.ValueState.Info);
		} else {
			oControl.setValueState(sap.ui.core.ValueState.Error);
		}
	},

	/**
	 * This method checks if the screen data is valid
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.util.DialogRoot
	 */
	_isScreenDataValid : function() {
		return (this.bDateValid && this.bAmountValid);
	},

	/**
	 * This method fires an event using the eventbus. This event indicates that the OData-Call has been sent and that the
	 * dialog is going to be closed. The UI (especially S4) has to react on this in order to prevent that the user clicks
	 * on other solution cards in the meantime.
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.util.DialogRoot
	 */
	_fireEventODataSent : function() {
		// Get the event bus from the framework
		var bus = sap.ui.getCore().getEventBus();
		// Fire the event indicating that the OData Request has been sent
		bus.publish(this.Constants.EVENT_CHANNELID_CARD_DIALOG_DATACHANGED, this.Constants.EVENT_EVENTID_EXECUTE, null);
	},

	/**
	 * This method fires an event using the eventbus. This event indicates that the OData response has been received and
	 * that this response contains error messages. That means that the call in the backend raised an error. On the UI,
	 * especially S4 has to react on this. The solution cards have to become active again
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.util.DialogRoot
	 */
	_fireEventODataError : function() {
		// Get the event bus from the framework
		var bus = sap.ui.getCore().getEventBus();
		// Fire the event indicating that the OData Request has been sent
		bus.publish(this.Constants.EVENT_CHANNELID_CARD_DIALOG_DATACHANGED, this.Constants.EVENT_EVENTID_ERROR, null);
	},

 /**
  * This method fires an event using the eventbus. This event indicates that the dialog has been cancelled. 
  * The solution cards have to become active again
  * 
  * @memberOf i2d.pp.mrpcockpit.reuse.util.DialogRoot
  */
 _fireEventDialogCancel : function() {
 	 // Get the event bus from the framework
	 var bus = sap.ui.getCore().getEventBus();
	 // Fire the event indicating that the OData Request has been sent
	 bus.publish(this.Constants.EVENT_CHANNELID_CARD_DIALOG_DATACHANGED, this.Constants.EVENT_EVENTID_DIALOG_CANCEL, null);
 }
});

}; // end of i2d/pp/mrpcockpit/reuse/fragments/DialogRoot.js
if ( !jQuery.sap.isDeclared('i2d.pp.mrpcockpit.reuse.util.CalculationEngine') ) {
jQuery.sap.declare("i2d.pp.mrpcockpit.reuse.util.CalculationEngine");
jQuery.sap.require('sap.ca.ui.message.message'); // unlisted dependency retained



/**
 * Constructor
 * 
 * @param oModelI18N
 *          object representing the i18n model of reuse which is used to extract the I18N bundle
 * @memberOf i2d.pp.mrpcockpit.reuse.util.CalculationEngine
 */
i2d.pp.mrpcockpit.reuse.util.CalculationEngine = function(oModelI18N) {
	// Shortcut to the MRP constants
	this.Constants = i2d.pp.mrpcockpit.reuse.util.CommonConstants;
	// The model used to extract the I18N resource bundle
	this.oModelI18N = oModelI18N;
};

/**
 * This method represents the template for the preview algorithm for supply demand items in the table
 * 
 * @param aModelClone
 *          array of cloned objects representing the supply demand items. This array is the basic set of data that is
 *          used and changed within the preview: <BR>
 *          -MRPElementAvailyOrRqmtDate (Availability Date) <BR>
 *          -MRPAvailableQuantity (Available Quantity SUM shown as 'Available' in table) <BR>
 *          -MRPElementOpenQuantity (Quantity of the MRP Element shown in table) <BR>
 *          -MRPElement (used as key to find the active element in list)<BR>
 *          -MRPElementCategory (used as key to find the active element in list)<BR>
 *          -MRPElementItem (used as key to find the active element in list)<BR>
 *          -MRPElementScheduleLine (used as key to find the active element in list)<BR>
 *          -ChangedMrpElement (output ; boolean if the element has been changed within the preview)<BR>
 *          -InitialShortage (output ; boolean if the element has been an initial shortage)<BR>
 *          -Index (output ; ongoing number for the current element
 * @param oCard
 *          object representing the selected solution card. The object contains the relevant information for the preview
 *          data: <BR>
 *          -MaterialShortageSolutionType (optional - used to identify the algorithm of the preview
 *          create/reschedule/increase)<BR>
 *          -ChangedAvailabilityDate (new value for availability date used for preview)<BR>
 *          -MRPElementChangeOpenQuantity (new value for quantity used for preview)<BR>
 *          -MRPElementExternalID (used as key to find the active element in list)<BR>
 *          -MRPElementCategory (used as key to find the active element in list)<BR>
 *          -MRPElementItemExternalID (used as key to find the active element in list)<BR>
 *          -MRPElementScheduleLineExtID (used as key to find the active element in list)<BR>
 *          -MRPElementCategoryShortName (used as 3. sort criteria in the list)<BR>
 *          -Vendor (just for 'create' use case - used to set MRPElementBusinessPartner for the UI)<BR>
 *          -VendorName (just for 'create PO' use case - used to set MRPElementBusinessPartner for the UI)<BR>
 *          -SupplyingPlant (just for 'create TO' use case - used to set MRPElementBusinessPartner for the UI)<BR>
 * @param dShortageStartDate
 *          date object representing the start date of the shortage. Can be 'null' if called out of 540.
 * @param dShortageEndDate
 *          date object representing the end date of the shortage. Can be 'null' if called out of 540.
 * @param dDateTody
 *          date object representing the current date. It is passed from the outside in order to be able to enable unit
 *          testing for this class.
 * @return [] <BR>
 *         1. Status Code {0, OK ; -1, Missing Input Data ; -2 Invalid Input Data} <BR>
 *         2. Array of Supply Demand Items
 * @memberOf i2d.pp.mrpcockpit.reuse.util.CalculationEngine
 */
i2d.pp.mrpcockpit.reuse.util.CalculationEngine.prototype.previewTable = function(aModelClone, oCard,
		dShortageStartDate, dShortageEndDate, dDateToday) {

	this._dShortageStartDate = dShortageStartDate;
	this._dShortageEndDate = dShortageEndDate;
	this._aSupDemItems = [];

	// Check if the required data for the preview is given
	if (!oCard) {
		// Missing input data
		return [-1, this._aSupDemItems];
	}

	// Check if the given data for the preview is valid
	if (!this.isInputDataValid(dDateToday, oCard.ChangedAvailabilityDate)) {
		// Invalid input data
		return [-2, this._aSupDemItems];
	}

	// ---------------------------------------------
	// Initialize the supply demand items
	this._aSupDemItems = aModelClone;
	this.initSupDemItems();

	// ---------------------------------------------
	// Find the 'active' supply demand item that is
	// affected by the selected solution card
	var oSupDemItem = this.getActiveSupplyDemandItem(oCard);
	if (!oSupDemItem && oCard.MaterialShortageSolutionType !== this.Constants.SOLUTIONTYPE_ACCEPT) {
		oSupDemItem = this.createActiveSupplyDemandItem(oCard);
	}

	// ---------------------------------------------
	// Get the 'category' that results out of the supply
	// demand item in combination with the solution card
	var sCardCategory = this.getSupDemItemCategory(oSupDemItem, oCard);

	// ---------------------------------------------
	// Run the preview based on the determined 'category'
	switch (sCardCategory) {
		case this.Constants.CARD_CATEGORY_INCREASE :
			this.runPreviewTypeIncrease(oCard, oSupDemItem);
			break;
		case this.Constants.CARD_CATEGORY_RESCHEDULE :
			this.runPreviewTypeReschedule(oCard, oSupDemItem);
			break;
		case this.Constants.CARD_CATEGORY_CHANGE :
			this.runPreviewTypeChange(oCard, oSupDemItem);
			break;
		case this.Constants.CARD_CATEGORY_ACCEPT :
			// Do nothing in case of 'accept shortage'
			break;
	}

	// Return the new/adapted model
	return [0, this._aSupDemItems];

};

/**
 * This method checks if the input data is valid. <BR>
 * Check 1 - Is the target date in the past?<BR>
 * Check 2 - Is the time interval valid?<BR>
 * 
 * @param dToday
 *          date object representing the current date
 * @param dTarget
 *          date object representing the destination defined in the solution card that has been calculated within the
 *          solution call
 * @returns true||false
 * @memberOf i2d.pp.mrpcockpit.reuse.util.CalculationEngine
 */
i2d.pp.mrpcockpit.reuse.util.CalculationEngine.prototype.isInputDataValid = function(dToday, dTarget) {
	// Temporary Date from Today without hours, minutes, ...
	var dTodayTemp = new Date(dToday.getUTCFullYear(), dToday.getUTCMonth(), dToday.getUTCDate());
	var dTargetTmp = new Date(dTarget.getUTCFullYear(), dTarget.getUTCMonth(), dTarget.getUTCDate());
	var bValid = true;
	// Check 1 - Is the target date in the past?
	if (dTargetTmp.getTime() < dTodayTemp.getTime()) {
		bValid = false;
	}
	// Check 2 - Is the time interval valid?
	else if (this._dShortageStartDate && this._dShortageEndDate) {
		if (!(this._dShortageStartDate instanceof Date) || !(this._dShortageEndDate instanceof Date)) {
			bValid = false;
		} else if (this._dShortageStartDate > this._dShortageEndDate) {
			bValid = false;
		}
	}
	return bValid;
};

/**
 * This method prepares the array of supply demand items regarding the quantity fields and some flags that are used for
 * the UI representation of the supply demand items.<BR>
 * -Convert strings to numbers<BR>
 * -Mark the items with initial shortage (stock < critialQuantity) for UI<BR>
 * -Mark all elements as 'not changed' for initialization<BR>
 * 
 * @memberOf i2d.pp.mrpcockpit.reuse.util.CalculationEngine
 */
i2d.pp.mrpcockpit.reuse.util.CalculationEngine.prototype.initSupDemItems = function() {
	for ( var i = 0; i < this._aSupDemItems.length; i++) {
		var object = this._aSupDemItems[i];
		// Convert to numbers for the calculation
		object.MRPElementOpenQuantity = parseFloat(object.MRPElementOpenQuantity);
		object.MRPAvailableQuantity = parseFloat(object.MRPAvailableQuantity);
		object.ChangedMrpElement = false;
		// Info: We mark both - requirements and supplies!
		if (object.MRPAvailableQuantity < object.MaterialShortageCriticalQty) {
			// relevant for coloring of the preview. This item will be shown as solved when stock exceeds the safety stock
			object.InitialShortage = true;
		}
	}
};

/**
 * This method determines the 'category' that is required to realize the preview for the selected combination of
 * solution card and supply demand item. Following mapping:<BR>
 * -CARD(Accept) -> ACCEPT<BR>
 * -CARD(Create PO || Create TO) -> RESCHEDULE<BR>
 * -CARD(AvailDate)==ITEM(AvailDate)&&CARD(Quantity)<>ITEM(Quantity) -> INCREASE<BR>
 * -CARD(AvailDate)<>ITEM(AvailDate)&&CARD(Quantity)==ITEM(Quantity) -> RESCHEDULE<BR>
 * -CARD(AvailDate)<>ITEM(AvailDate)&&CARD(Quantity)<>ITEM(Quantity) -> CHANGE<BR>
 * 
 * @param oCard
 *          object representing the selected solution card
 * @param oSubDemItem
 *          object representing the related supply demand item
 * @memberOf i2d.pp.mrpcockpit.reuse.util.CalculationEngine
 */
i2d.pp.mrpcockpit.reuse.util.CalculationEngine.prototype.getSupDemItemCategory = function(oSupDemItem, oCard) {

	var sCardCategory = "";

	switch (oCard.MaterialShortageSolutionType) {
		// -CARD(Accept) -> ACCEPT
		case this.Constants.SOLUTIONTYPE_ACCEPT :
			sCardCategory = this.Constants.CARD_CATEGORY_ACCEPT;
			break;
		case this.Constants.SOLUTIONTYPE_PO_CREATE :
		case this.Constants.SOLUTIONTYPE_TO_CREATE :
			// CARD(Create PO || Create TO) -> RESCHEDULE
			sCardCategory = this.Constants.CARD_CATEGORY_RESCHEDULE;
			break;
		default :
			// For any other Solution Type we have to consider the dates and quantities to determine the category
			var dSupElDateOld = oSupDemItem.MRPElementAvailyOrRqmtDate;
			var dSupElDateNew = oCard.ChangedAvailabilityDate;
			var iSupElQuanOld = oSupDemItem.MRPElementOpenQuantity;
			var iSupElQuanNew = parseFloat(oCard.MRPElementChangeOpenQuantity);
			if (dSupElDateNew && dSupElDateOld) {
				if (dSupElDateOld.getTime() === dSupElDateNew.getTime() && iSupElQuanOld !== iSupElQuanNew) {
					// CARD(AvailDate)==ITEM(AvailDate)&&CARD(Quantity)<>ITEM(Quantity) -> INCREASE
					sCardCategory = this.Constants.CARD_CATEGORY_INCREASE;
				}
				if (dSupElDateOld.getTime() !== dSupElDateNew.getTime() && iSupElQuanOld === iSupElQuanNew) {
					// CARD(AvailDate)<>ITEM(AvailDate)&&CARD(Quantity)==ITEM(Quantity) -> RESCHEDULE
					sCardCategory = this.Constants.CARD_CATEGORY_RESCHEDULE;
				}
				if (dSupElDateOld.getTime() !== dSupElDateNew.getTime() && iSupElQuanOld !== iSupElQuanNew) {
					// CARD(AvailDate)<>ITEM(AvailDate)&&CARD(Quantity)<>ITEM(Quantity) -> CHANGE
					sCardCategory = this.Constants.CARD_CATEGORY_CHANGE;
				}
			}
			break;
	}
	return sCardCategory;
};

/**
 * This method searches and returns the active supply demand item that correspond to the selected solution card.
 * 
 * @param oCard
 *          object representing the selected solution card
 * @memberOf i2d.pp.mrpcockpit.reuse.util.CalculationEngine
 */
i2d.pp.mrpcockpit.reuse.util.CalculationEngine.prototype.getActiveSupplyDemandItem = function(oCard) {
	var oSupDemItem = null;
	switch (oCard.MaterialShortageSolutionType) {
		case this.Constants.SOLUTIONTYPE_PO_CREATE :
		case this.Constants.SOLUTIONTYPE_TO_CREATE :
			break;
		default :
			for ( var i = 0; i < this._aSupDemItems.length; i++) {
				var object = this._aSupDemItems[i];
				if (object.MRPElement === oCard.MRPElementExternalID && object.MRPElementCategory === oCard.MRPElementCategory
						&& object.MRPElementItem === oCard.MRPElementItemExternalID
						&& object.MRPElementScheduleLine === oCard.MRPElementScheduleLineExtID) {
					oSupDemItem = object;
				}
			}
			break;
	}
	return oSupDemItem;
};

/**
 * This method adds a new supply demand item to the existing array of supply demand items. This is used to realize
 * previews containing 'new' elements that will be created when using the selected solution card. The idea is to create
 * the new item at the end of the array with an availability date far in the future. The system will then use the new
 * dates out of the solution card and will trigger a 'Reschedule'
 * 
 * @param oCard
 *          object representing the selected solution card
 * @memberOf i2d.pp.mrpcockpit.reuse.util.CalculationEngine
 */
i2d.pp.mrpcockpit.reuse.util.CalculationEngine.prototype.createActiveSupplyDemandItem = function(oCard) {

	var oDateInFarFuture = new Date("3333", "03", "03");
	// In case of a new element, we don't have an ID. So
	// we just set it to a constant. This assures that we
	// don't find an existing item.
	oCard.MRPElementExternalID = "";
	if (this.oModelI18N) {
		var oBundle = this.oModelI18N.getResourceBundle();
		oCard.MRPElementExternalID = "[" + oBundle.getText("NEW") + "]";
	}

	var oSupDemItem = new Object();
	oSupDemItem.Index = this._aSupDemItems.length + 1;
	oSupDemItem.MRPElement = oCard.MRPElementExternalID;
	oSupDemItem.MRPElementAvailyOrRqmtDate = oDateInFarFuture;
	oSupDemItem.MRPElementOpenQuantity = parseFloat(oCard.MRPElementChangeOpenQuantity);
	oSupDemItem.UnitOfMeasureTechnicalName = oCard.UnitOfMeasureTechnicalName;
	oSupDemItem.MaterialID = oCard.MaterialID;
	oSupDemItem.ChangedMrpElement = true;
	oSupDemItem.MRPElementCategoryShortName = oCard.MRPElementCategoryShortName;

	switch (oCard.MaterialShortageSolutionType) {
		case this.Constants.SOLUTIONTYPE_PO_CREATE :
			oSupDemItem.Vendor = oCard.Vendor;
			oSupDemItem.VendorName = oCard.VendorName;
			oSupDemItem.MRPElementCategory = this.Constants.MRP_ELEMENT_CATEGORY_POITEM;
			oSupDemItem.MRPElementBusinessPartnerType = this.Constants.MRP_ELEMENT_BUSINESSPARTNERTYPE_SUPPLIER;
			oSupDemItem.MRPElementBusinessPartnerID = oCard.Vendor;
			oSupDemItem.MRPElementBusinessPartnerName = oCard.VendorName;
			break;
		case this.Constants.SOLUTIONTYPE_TO_CREATE :
			oSupDemItem.MRPElementCategory = this.Constants.MRP_ELEMENT_CATEGORY_RELORD;
			oSupDemItem.MRPElementBusinessPartnerType = this.Constants.MRP_ELEMENT_BUSINESSPARTNERTYPE_ISSUINGLOC;
			oSupDemItem.MRPElementBusinessPartnerID = oCard.SupplyingPlant;
			oSupDemItem.MRPElementBusinessPartnerName = oCard.VendorName;
			break;
	}
	this._aSupDemItems.push(oSupDemItem);
	return oSupDemItem;
};

/**
 * This method sets the data of the active supply demand item based on the selected solution card.
 * 
 * @param oCard
 *          object representing the selected solution card
 * @param oSubDemItem
 *          object representing the related supply demand item
 * @memberOf i2d.pp.mrpcockpit.reuse.util.CalculationEngine
 */
i2d.pp.mrpcockpit.reuse.util.CalculationEngine.prototype.setActiveSupDemItem = function(oCard, oSupDemItem) {
	// Transfer the new 'Availability Date' from the solution card to the supply demand item
	oSupDemItem.MRPElementAvailyOrRqmtDate = oCard.ChangedAvailabilityDate;
	// Transfer the new 'Quantity' from the solution card to the supply demand item
	oSupDemItem.MRPElementOpenQuantity = parseFloat(oCard.MRPElementChangeOpenQuantity);
	// Mark the supply demand items as 'changed' (relevant for the UI for coloring)
	oSupDemItem.ChangedMrpElement = true;
};

/**
 * This method realized the preview-algorithm for a solution card 'Increase'.
 * 
 * @param oCard
 *          object representing the selected solution card
 * @param oSubDemItem
 *          object representing the related supply demand item
 * @memberOf i2d.pp.mrpcockpit.reuse.util.CalculationEngine
 */
i2d.pp.mrpcockpit.reuse.util.CalculationEngine.prototype.runPreviewTypeIncrease = function(oCard, oSupDemItem) {

	var iDelta = 0;
	var dSupElDateOld = oSupDemItem.MRPElementAvailyOrRqmtDate;
	var iSupElQuanOld = oSupDemItem.MRPElementOpenQuantity;
	var iSupElQuanNew = parseFloat(oCard.MRPElementChangeOpenQuantity);

	// Update the active supply demand item with the data of the solution card.
	this.setActiveSupDemItem(oCard, oSupDemItem);

	// Adapt the available quantities based on the given shortage period. If the supply demand item
	// is outside the period, the quantity is set to [empty]
	this.adaptAvailableQuantities();

	// Increase all items below the active supply demand item.
	iDelta = iSupElQuanNew - iSupElQuanOld;
	for ( var i = 0; i < this._aSupDemItems.length; i++) {
		var object = this._aSupDemItems[i];
		object.Index = i + 1;
		if (!this.isItemStockLine(object)) {
			if (!this.isShortageIntervalDefined() || this.isItemInShortageInterval(object)) {
				if (object.MRPElementAvailyOrRqmtDate >= dSupElDateOld) {
					object.MRPAvailableQuantity += iDelta;
				}
			}
		}
	}
};

/**
 * This method determines the source position of the supply demand item in the array. This depends on the MRPElement
 * (internal id) and the type of the MRP Element (category)
 * 
 * @param oSubDemItem
 *          object representing the related supply demand item
 * 
 * @memberOf i2d.pp.mrpcockpit.reuse.util.CalculationEngine
 */
i2d.pp.mrpcockpit.reuse.util.CalculationEngine.prototype.findSourcePosition = function(oSupDemItem) {
	var iPosSource = 0;
	for ( var i = 0; i < this._aSupDemItems.length; i++) {
		var object = this._aSupDemItems[i];
		if (object.MRPElement === oSupDemItem.MRPElement && object.MRPElementCategory === oSupDemItem.MRPElementCategory
				&& object.MRPElementItem === oSupDemItem.MRPElementItem
				&& object.MRPElementScheduleLine === oSupDemItem.MRPElementScheduleLine) {
			iPosSource = i;
			break;
		}
	}
	return iPosSource;
};

/**
 * This method determines the target position of the supply demand item in the array. This depends on the 'availability
 * date' and also based on the short name of the MRP element category and finally the ID(MRPElement)
 * 
 * @param oCard
 *          object representing the selected solution card
 * @param oSubDemItem
 *          object representing the related supply demand item
 * @memberOf i2d.pp.mrpcockpit.reuse.util.CalculationEngine
 */
i2d.pp.mrpcockpit.reuse.util.CalculationEngine.prototype.findTargetPosition = function(oCard, oSupDemItem) {

	var dSupElDateNew = oCard.ChangedAvailabilityDate;

	// Find its target position
	var iTarget = this._aSupDemItems.length;
	for ( var i = 0; i < this._aSupDemItems.length; i++) {
		var object = this._aSupDemItems[i];

		// 1.Check: if the element is the Stock, this is not our target position
		if (!this.isItemStockLine(object)) {
			// 2a.Check: if the new element is later than this one, this is not our target position
			if (dSupElDateNew.getTime() < object.MRPElementAvailyOrRqmtDate.getTime()) {
				// the element is not later, so this is our position
				iTarget = i;
				break;
				// 2b.Check: if the new element is at the same date, we have to
			} else if (object.MRPElementAvailyOrRqmtDate.getTime() === dSupElDateNew.getTime()) {
				// 3a.Check: if the current element is a demand, the new element (always supply) comes first
				if (object.MRPElementOpenQuantity < 0) {
					iTarget = i;
					break;
					// 3b.Check: if the element is no supply, it is sorted by name
				} else if (object.MRPElementCategoryShortName > oSupDemItem.MRPElementCategoryShortName) {
					iTarget = i;
					break;
				} else if (object.MRPElementCategoryShortName === oSupDemItem.MRPElementCategoryShortName) {
					// 4.Check: if the name is equal, we sort by ID
					if (object.MRPElement > oSupDemItem.MRPElement) {
						iTarget = i;
						break;
					}
				}
			}
		}
	}
	return iTarget;
};

/**
 * This method checks if the given element/line of the table is a stockline
 * 
 * @param object
 *          object representing the current supply demand item
 * @memberOf i2d.pp.mrpcockpit.reuse.util.CalculationEngine
 */
i2d.pp.mrpcockpit.reuse.util.CalculationEngine.prototype.isItemStockLine = function(object) {
	if (object.MRPElementCategory === this.Constants.MRP_ELEMENT_CATEGORY_STOCK) {
		return true;
	} else {
		return false;
	}
};

/**
 * This method checks if the given element/line of the table is a supply
 * 
 * @param object
 *          object representing the current supply demand item
 * @memberOf i2d.pp.mrpcockpit.reuse.util.CalculationEngine
 */
i2d.pp.mrpcockpit.reuse.util.CalculationEngine.prototype.isItemSupply = function(object) {
	if (object.MRPElementOpenQuantity < 0) {
		// If the quantity is below zero, it is a demand
		return false;
	} else {
		// If the quantity is larger than zero, it is a supply
		return true;
	}
};

/**
 * This method checks if the given element/line of the table is in the defined shortage interval
 * 
 * @param object
 *          object representing the current supply demand item
 * @memberOf i2d.pp.mrpcockpit.reuse.util.CalculationEngine
 */
i2d.pp.mrpcockpit.reuse.util.CalculationEngine.prototype.isItemInShortageInterval = function(object) {
	var dDate = object.MRPElementAvailyOrRqmtDate;

	if ((this._dShortageStartDate <= dDate) && (dDate <= this._dShortageEndDate)) {
		return true;
	} else {
		return false;
	}
};

/**
 * This method checks if the client has provided a shortage interval
 * 
 * @memberOf i2d.pp.mrpcockpit.reuse.util.CalculationEngine
 */
i2d.pp.mrpcockpit.reuse.util.CalculationEngine.prototype.isShortageIntervalDefined = function() {
	if (this._dShortageStartDate === null || this._dShortageEndDate === null) {
		return false;
	} else {
		return true;
	}
};

/**
 * This method checks if the given element/line of the table is a stockline
 * 
 * @param object
 *          object representing the current supply demand item
 * @memberOf i2d.pp.mrpcockpit.reuse.util.CalculationEngine
 */
i2d.pp.mrpcockpit.reuse.util.CalculationEngine.prototype.isItemStockLine = function(object) {
	if (object.MRPElementCategory === this.Constants.MRP_ELEMENT_CATEGORY_STOCK) {
		return true;
	} else {
		return false;
	}
};

/**
 * This method calculates the new quantity for the active supply demand item based on the location where the supply
 * demand item is re-arranged.
 * 
 * Info : The array has already been re-arranged. That means that in case of reschedule, the item has already moved to
 * the target position. In case of procure, the item has already been inserted in the array. <BR>
 * Info2: The array has been arranged in that way, that - for the same day - all supplies are 'in front' of the first
 * demand
 * 
 * @param oCard
 *          object representing the selected solution card
 * @param oSubDemItem
 *          object representing the related supply demand item
 * @param iTarget
 *          integer representing the target position in the array of supply demand items
 * @memberOf i2d.pp.mrpcockpit.reuse.util.CalculationEngine
 */
i2d.pp.mrpcockpit.reuse.util.CalculationEngine.prototype.setActiveSupDemItemQuantity = function(oCard, oSupDemItem,
		iTarget) {

	var dSupElDateNew = oCard.ChangedAvailabilityDate;
	var iQuanNew = oCard.MRPElementChangeOpenQuantity;
	var iQuan = "";

	if (this._aSupDemItems.length === 1) {
		// If there is just one item at all. It's not a realistic use case but we never know...
		iQuan = 0;
	} else if ((iTarget > 0) && iTarget === this._aSupDemItems.length - 1) {
		// If the rescheduled item is inserted at the last position, we use the stock quantity of the
		// next to last item (just relevant for 'procure' and 'transfer')
		iQuan = this._aSupDemItems[iTarget - 1].MRPAvailableQuantity;
	} else if ((iTarget > 0)
			&& this._aSupDemItems[iTarget - 1].MRPElementAvailyOrRqmtDate.getTime() === dSupElDateNew.getTime()
			&& !this.isItemStockLine(this._aSupDemItems[iTarget - 1])) {
		// If the rescheduled item is on the same day as the previous item, we take the same stock quantity
		// (we've inserted behind)
		// This happens if there is already a supply for the target date and we've added a second one...
		iQuan = this._aSupDemItems[iTarget - 1].MRPAvailableQuantity;
	} else if (this._aSupDemItems[iTarget + 1].MRPElementAvailyOrRqmtDate.getTime() === dSupElDateNew.getTime()) {
		// If the rescheduled item is on the same day as the next item, we have to check
		// if the next item is a supply or a demand.
		// In case of a supply, we take the stock from the next item
		// In case of a demand and there is NO previous item, we take the stock from the next item
		// In case of a demand and there is a previous item, we take the stock from the previous item
		if (this.isItemSupply(this._aSupDemItems[iTarget + 1]) === true) {
			// It is a supply, so use its stock as reference
			iQuan = this._aSupDemItems[iTarget + 1].MRPAvailableQuantity;
					//- this._aSupDemItems[iTarget + 1].MRPElementOpenQuantity;
		} else if (iTarget === 0) {
			// It is a demand, but there's no previous item. So use the demands stock as reference
			iQuan = this._aSupDemItems[iTarget + 1].MRPAvailableQuantity
					- this._aSupDemItems[iTarget + 1].MRPElementOpenQuantity;
		} else {
			// It is a demand, so use previous items stock as reference
			iQuan = this._aSupDemItems[iTarget - 1].MRPAvailableQuantity;
		}
	} else if (this._aSupDemItems[iTarget + 1].MRPElementAvailyOrRqmtDate.getTime() !== dSupElDateNew.getTime()
			&& iTarget === 0) {
		// If it is a different day and we're the first item in the list, we don't know the real stock.
		// So we take the next item's stock and reduce it by the quantity of the given item
		iQuan = this._aSupDemItems[iTarget + 1].MRPAvailableQuantity - iQuanNew;
	} else if (this._aSupDemItems[iTarget + 1].MRPElementAvailyOrRqmtDate.getTime() !== dSupElDateNew.getTime()
			&& (iTarget > 0)) {
		// If it is a different day but we have previous
		// items, we use the stock quantity of the item before
		iQuan = this._aSupDemItems[iTarget - 1].MRPAvailableQuantity;
	}
	this._aSupDemItems[iTarget].MRPAvailableQuantity = iQuan;
};

/**
 * This method adapts the available quantities of the supply demand items. The decision is made by checking if the item
 * is within the given shortage interval
 * 
 * @memberOf i2d.pp.mrpcockpit.reuse.util.CalculationEngine
 */
i2d.pp.mrpcockpit.reuse.util.CalculationEngine.prototype.adaptAvailableQuantities = function() {
	var oItem = null;
	// If the shortage interval is not defined, we skip the adaption (e.g. used for change requests)
	if (this._dShortageStartDate === null || this._dShortageEndDate === null) {
		return;
	}
	// If the shortage inteval is defined, we supress the available quantities of all items that are
	// not part of the interval
	for ( var i = 0; i < this._aSupDemItems.length; i++) {
		oItem = this._aSupDemItems[i];
		if (!this.isItemInShortageInterval(oItem)) {
			oItem.MRPAvailableQuantity = "";
		}
	}
};

/**
 * This method realized the preview-algorithm for a solution card 'Reschedule'.
 * 
 * The idea is to adjust each supply demand item in between of the new date and the former old date and increase the
 * quantity of each item by the new quantity of the supply demand item that has been rescheduled/changed.
 * 
 * @param oCard
 *          object representing the selected solution card
 * @param oSubDemItem
 *          object representing the related supply demand item
 * @memberOf i2d.pp.mrpcockpit.reuse.util.CalculationEngine
 */
i2d.pp.mrpcockpit.reuse.util.CalculationEngine.prototype.runPreviewTypeReschedule = function(oCard, oSupDemItem) {

	var dSupElDateOld = oSupDemItem.MRPElementAvailyOrRqmtDate;
	var dSupElDateNew = oCard.ChangedAvailabilityDate;
	var iSupElQuanNew = parseFloat(oCard.MRPElementChangeOpenQuantity);
	var iSupElQuanOld = parseFloat(oCard.MRPElementOpenQuantity);

	// Update the active supply demand item with the data of the solution card.
	this.setActiveSupDemItem(oCard, oSupDemItem);

	// The source position is determined using the id and the type of the selected supply demand item
	var iPosSource = this.findSourcePosition(oSupDemItem);

	// Cut the supply demand item out of the array
	var aItemToMove = this._aSupDemItems.splice(iPosSource, 1);

	// Find its target position in the array comparing its date, type and name
	var iPosTarget = this.findTargetPosition(oCard, oSupDemItem);

	// Insert the item back to the array at the determined target position
	this._aSupDemItems.splice(iPosTarget, 0, aItemToMove[0]);

	// Determine the stock quantity that should be
	// displayed for the rescheduled item
	this.setActiveSupDemItemQuantity(oCard, oSupDemItem, iPosTarget);

	// Adapt the available quantities based on the given shortage period. If the supply demand item
	// is outside the period, the quantity is set to [empty]
	this.adaptAvailableQuantities();

	// Since a 'reschedule' affects position of a supply demand item in the list, we have to adapt
	// the quantity of those items that are in between of the old and the new date.
	// It depends on the 'direction', in which the item has been rescheduled. Check whether the reschedule has moved the
	// affected item to the front (further to the present) or to the back
	// (further in the future)
	if (dSupElDateNew < dSupElDateOld) {
		// If the item has been rescheduled to the 'front', we have to adjust each supply demand item in between of the
		// new date and the former old date and increase the quantity of each item by the NEW quantity
		// of the supply demand item that has been rescheduled/changed.
		for ( var i = 0; i < this._aSupDemItems.length; i++) {
			var object = this._aSupDemItems[i];
			object.Index = i + 1;
			if (!this.isItemStockLine(object)) {
				if (!this.isShortageIntervalDefined() || this.isItemInShortageInterval(object)) {
					if (((object.MRPElementAvailyOrRqmtDate >= dSupElDateNew))
							&& ((object.MRPElementAvailyOrRqmtDate < dSupElDateOld))) {
						object.MRPAvailableQuantity += iSupElQuanNew;
					}
				}
			}
		}
	} else {
		// If the item has been rescheduled to the 'back', we have to adjust each supply demand item in between of the
		// former old date and the new date and decrease its quantity of each item by the OLD quantity
		// of the supply demand item that has been rescheduled/changed.
		for ( var i = 0; i < this._aSupDemItems.length; i++) {
			var object = this._aSupDemItems[i];
			object.Index = i + 1;
			if (!this.isItemStockLine(object)) {
				if (!this.isShortageIntervalDefined() || this.isItemInShortageInterval(object)) {
					if (((object.MRPElementAvailyOrRqmtDate >= dSupElDateOld))
							&& ((object.MRPElementAvailyOrRqmtDate < dSupElDateNew))) {
						object.MRPAvailableQuantity -= iSupElQuanOld;
					}
				}
			}
		}

	}
};

/**
 * This method realized the preview-algorithm for a solution card 'Change'. * A change can be technically represented by
 * a combination of a reschedule and an increase with a slight modification. The idea is to run a normal reschedule task
 * of the supply demand item first. Then we have to additionally increase all supply demand items below the original
 * date by the delta (between its new and old quantity) of the changed supply demand item.
 * 
 * @param oCard
 *          object representing the selected solution card
 * @param oSubDemItem
 *          object representing the related supply demand item
 * @memberOf i2d.pp.mrpcockpit.reuse.util.CalculationEngine
 */
i2d.pp.mrpcockpit.reuse.util.CalculationEngine.prototype.runPreviewTypeChange = function(oCard, oSupDemItem) {

	var iDelta = 0;
	var dSupElDateOld = oSupDemItem.MRPElementAvailyOrRqmtDate;
	var dSupElDateNew = oCard.ChangedAvailabilityDate;
	var iSupElQuanOld = oSupDemItem.MRPElementOpenQuantity;
	var iSupElQuanNew = parseFloat(oCard.MRPElementChangeOpenQuantity);

	// Step 1: Run a reschedule of the given supply demand item
	this.runPreviewTypeReschedule(oCard, oSupDemItem);

	// Step 2: Since a 'change' also affects the quantity, we have to adjust the quantity of supply demand items as well.
	// We have to adjust by the delta between the old and the new quantity.
	iDelta = iSupElQuanNew - iSupElQuanOld;
	// It depends on the 'direction', in which the items has been rescheduled.
	if (dSupElDateOld < dSupElDateNew) {
		// If the item has been rescheduled to the 'back', increase the quantity of of all supply demand items
		// below the new/target date
		for ( var i = 0; i < this._aSupDemItems.length; i++) {
			var object = this._aSupDemItems[i];
			object.Index = i + 1;
			if (!this.isItemStockLine(object)) {
				if (!this.isShortageIntervalDefined() || this.isItemInShortageInterval(object)) {
					// Increase all supply demand items below the new date
					if (object.MRPElementAvailyOrRqmtDate >= dSupElDateNew) {
						object.MRPAvailableQuantity += iDelta;
					}
				}
			}
		}
	} else {
		// If the item has been rescheduled to the 'front', increase the quantity of of all supply demand items
		// below the old/source date
		for ( var i = 0; i < this._aSupDemItems.length; i++) {
			var object = this._aSupDemItems[i];
			object.Index = i + 1;
			if (!this.isItemStockLine(object)) {
				if (!this.isShortageIntervalDefined() || this.isItemInShortageInterval(object)) {
					// Increase all supply demand items below the old date
					if (object.MRPElementAvailyOrRqmtDate >= dSupElDateOld) {
						object.MRPAvailableQuantity += iDelta;
					}
				}
			}
		}
	}
};

/**
 * This method returns all supply demand items that belong to a given supply demand item
 * 
 * @memberOf i2d.pp.mrpcockpit.reuse.util.CalculationEngine
 */
i2d.pp.mrpcockpit.reuse.util.CalculationEngine.prototype.getSDItemsForShortage = function(oSupDemItem, oModelData) {

	var oSDItem = {};
	var aSDItem = [];

	for ( var sKey in oModelData) {
		if (oModelData.hasOwnProperty(sKey)) {
			if (sKey.substr(0, 17) == "SupplyDemandItems") {

				oSDItem = oModelData[sKey];

				if ((oSDItem.MRPPlant === oSupDemItem.MRPPlant) && (oSDItem.MaterialID === oSupDemItem.MaterialID)
						&& (oSDItem.MRPArea === oSupDemItem.MRPArea) && (oSDItem.MRPPlant === oSupDemItem.MRPPlant)
						&& (oSDItem.MRPPlanningSegmentType === oSupDemItem.MRPPlanningSegmentType)
						&& (oSDItem.MRPPlanningSegmentNumber === oSupDemItem.MRPPlanningSegmentNumber)) {

					aSDItem.push(oSDItem);
				}
			}
		}
	}

	return aSDItem;
};

// ----------------------------------------------------------------------
// Preview for the CHART
// ----------------------------------------------------------------------

/**
 * This method converts the data of the OData model used for the views into data for a JSON model of the chart
 * 
 * @memberOf i2d.pp.mrpcockpit.reuse.util.CalculationEngine
 */
i2d.pp.mrpcockpit.reuse.util.CalculationEngine.prototype.formatChartDate = function(oDate) {
	var sDate = oDate.toString();
	if (sDate === "Invalid Date") {
		return sDate;
	} else {
		return oDate.toISOString();
	}
};

/**
 * This method converts the data of the OData model used for the views into data for a JSON model of the chart It
 * aggregates all supplies per day and all demands per day. It adds any missing dates within the time period of the data
 * in sSDItems, so the result contains one entry per day within this time period.
 * 
 * @memberOf i2d.pp.mrpcockpit.reuse.util.CalculationEngine
 */
i2d.pp.mrpcockpit.reuse.util.CalculationEngine.prototype.initialChartData = function(aSDItems, sDateFrom, sDateTo,
		iChartScrollPos) {

	// convert the supply and demand items of the original OData model
	// into
	// supplies and demands per day needed for the chart model

	// create an initial data object
	var oDateStart = new Date(sDateFrom);
	var oDateEnd = new Date(sDateTo);
	oDateEnd = new Date(oDateEnd.getTime() + 24 * 3600 * 1000);

	var oModelData = {
		shiftLeft : iChartScrollPos,
		decimals : 0,
		startBalance : 0,
		minStock : 0,
		safetyStock : 0,
		minDate : this.formatChartDate(oDateStart),
		maxDate : this.formatChartDate(oDateEnd),
		minDateOld : "", // old minimum date for resetting
		maxDateOld : "", // old minimum date for resetting
		oMinDate : oDateStart, // minimum date as object for later comparison
		oMaxDate : oDateEnd, // maximum date as object for later comparison
		chartData : [],
		deltas : []
	};

	// collect the supplies and demands per day and calculate the minimum
	// and
	// maximum date
	var l = (aSDItems && aSDItems.length) ? aSDItems.length : 0;
	var oSDItem;
	var oFlowsPerDay = {};
	var sDate = "";
	var oDate;
	var oMinDate = null;
	var oMaxDate = null;
	var fVal = 0;
	var fMinGreen = null;
	var fMaxYellow = null;
	var fMinYellow = null;
	var fMaxRed = null;

	for ( var i = 0; i < l; i++) {

		oSDItem = aSDItems[i];

		// get the quantity (the initial stock is delivered in a separate field)
		fVal = (i === 0) ? parseFloat(oSDItem.MRPAvailableQuantity) : parseFloat(oSDItem.MRPElementOpenQuantity);
		// get the date
		oDate = oSDItem.MRPElementAvailyOrRqmtDate;
		sDate = this.formatChartDate(oDate);

		if (!oMaxDate && oSDItem.MRPEvaluationHorizonInDays) {
			var iEvalHorizon = parseInt(oSDItem.MRPEvaluationHorizonInDays);
			oMaxDate = new Date(oDate.getTime() + iEvalHorizon * 24 * 3600 * 1000);
		}

		if (!oMinDate || (oDate < oMinDate)) {
			oMinDate = oDate;
		}
		if (!oMaxDate || (oDate > oMaxDate)) {
			oMaxDate = oDate;
		}

		if (i === 0) {
			oModelData.decimals = parseInt(oSDItem.TargetQuantityUnitDcmls);
			oModelData.startBalance = fVal;
			oModelData.minStock = parseFloat(oSDItem.MaterialShortageThresholdQty);
			oModelData.safetyStock = parseFloat(oSDItem.MaterialShortageCriticalQty);
		} else {
			if (!oFlowsPerDay[sDate]) {
				oFlowsPerDay[sDate] = {
					date : sDate,
					demand : 0,
					supply : 0,
					shortageAccepted : oSDItem.MRPAvailability === i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_AVAILABILITY_ACCEPTED,
					shortageDefId : oSDItem.MaterialShortageDefinitionID
				};
			}
			if (fVal < 0) {
				oFlowsPerDay[sDate].demand += fVal;
			} else {
				oFlowsPerDay[sDate].supply += fVal;
			}
		}
	}

	// fill days without supply and demand between min and max date with
	// zero and
	// add all days into the chart data array
	if (oMinDate && oMaxDate) {

		var oLastShortage = {
			shortageAccepted : false,
			defId : ""
		};

		for ( var oDate = oMinDate; oDate <= oMaxDate; oDate = new Date(oDate.getTime() + 24 * 3600 * 1000)) {
			var sDate = this.formatChartDate(oDate);

			if (oFlowsPerDay[sDate]) {
				oLastShortage = {
					shortageAccepted : oFlowsPerDay[sDate].shortageAccepted,
					defId : oFlowsPerDay[sDate].shortageDefId
				};
				oModelData.chartData.push({
					date : oDate,
					demand : oFlowsPerDay[sDate].demand,
					supply : oFlowsPerDay[sDate].supply,
					shortageAccepted : oFlowsPerDay[sDate].shortageAccepted,
					shortageDefId : oFlowsPerDay[sDate].shortageDefId
				});
			} else {
				oModelData.chartData.push({
					date : oDate,
					demand : 0,
					supply : 0,
					shortageAccepted : oLastShortage.shortageAccepted,
					shortageDefId : oLastShortage.defId
				});
			}
		}
	}

	// return the data for the model
	return oModelData;
};

/**
 * This method returns the deltas that apply due to the selected solution card
 * 
 * @param oCard
 *          object representing the selected solution card. The object contains the relevant information for the preview
 *          data: <BR>
 *          -MaterialShortageSolutionType (optional - used to identify the algorithm of the preview
 *          create/reschedule/increase)<BR>
 *          -AvailabilityDate (old value for availability date)<BR>
 *          -ChangedAvailabilityDate (new value for availability date used for preview)<BR>
 *          -MRPElementOpenQuantity (old value for quantity)<BR>
 *          -MRPElementChangeOpenQuantity (new value for quantity used for preview)<BR>
 *          -MRPElementExternalID (used as key to find the active element in list)<BR>
 *          -MRPElementCategory (used as key to find the active element in list)<BR>
 *          -MRPElementItemExternalID (used as key to find the active element in list)<BR>
 *          -MRPElementScheduleLineExtID (used as key to find the active element in list)<BR>
 *          -MRPElementCategoryShortName (used as 3. sort criteria in the list)<BR>
 *          -MaterialID<BR>
 *          -Vendor (just for 'create' use case - used to set MRPElementBusinessPartner for the UI)<BR>
 *          -VendorName (just for 'create PO' use case - used to set MRPElementBusinessPartner for the UI)<BR>
 *          -SupplyingPlant (just for 'create TO' use case - used to set MRPElementBusinessPartner for the UI)<BR>
 * @memberOf i2d.pp.mrpcockpit.reuse.util.CalculationEngine
 */
i2d.pp.mrpcockpit.reuse.util.CalculationEngine.prototype.previewChartData = function(oCard) {

	var oDateOld = (oCard.AvailabilityDate) ? oCard.AvailabilityDate : oCard.ChangedAvailabilityDate;
	var oDateNew = oCard.ChangedAvailabilityDate;

	var sDateOld = this.formatChartDate(oDateOld);
	var fValOld = parseFloat(oCard.MRPElementOpenQuantity);
	var sDateNew = this.formatChartDate(oDateNew);
	var fValNew = parseFloat(oCard.MRPElementChangeOpenQuantity);

	// set deltas
	var aDeltas = [];
	if (sDateOld === sDateNew) {
		aDeltas = [{
			date : oDateOld,
			demand : (fValNew < 0) ? -fValOld + fValNew : 0,
			supply : (fValNew > 0) ? -fValOld + fValNew : 0
		}];
	} else {
		aDeltas = [{
			date : oDateOld,
			demand : (fValOld < 0) ? -fValOld : 0,
			supply : (fValOld > 0) ? -fValOld : 0
		}, {
			date : oDateNew,
			demand : (fValNew < 0) ? fValNew : 0,
			supply : (fValNew > 0) ? fValNew : 0
		}];
	}

	return {
		oPreviewDate : oDateNew,
		sPreviewDate : sDateNew,
		deltas : aDeltas
	};
};

/**
 * This method represents the template for the preview algorithm for supply demand items in the chart
 * 
 * @memberOf i2d.pp.mrpcockpit.reuse.util.CalculationEngine
 */
i2d.pp.mrpcockpit.reuse.util.CalculationEngine.prototype.previewChart = function() {

};

}; // end of i2d/pp/mrpcockpit/reuse/util/CalculationEngine.js
if ( !jQuery.sap.isDeclared('i2d.pp.mrpcockpit.reuse.util.CollaborationHelper') ) {
jQuery.sap.declare("i2d.pp.mrpcockpit.reuse.util.CollaborationHelper");
jQuery.sap.require('sap.ca.ui.message.message'); // unlisted dependency retained




i2d.pp.mrpcockpit.reuse.util.CollaborationHelper = {

	/**
	 * Set the OData Model that shall be used for the calls to the backend.
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.util.CollaborationHelper
	 */
	setODataModel : function(oModel, backendVersion) {
		this.oModelGlobal = oModel;
		this.backendVersion = backendVersion;
	},

	/**
	 * This method reads a 'Change Request' from the backend.
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.util.CollaborationHelper
	 */
	readRequest : function(oModel) {
		var oDataModel = this.oModelGlobal;
		//var url = i2d.pp.mrpcockpit.reuse.util.CommonConstants.ODATA_ENTITYSET_CHANGEREQUEST;
		var url = i2d.pp.mrpcockpit.reuse.util.CommonConstants.ODATA_ENTITYSET_CHANGEREQUESTVENDOR;
		var changeRequest = null; 

		// Build the URL and the filter condition
		var filter = "MRPElement eq '";
		filter += oModel.PurchaseOrderID;
		filter += "' and MRPElementItem eq '";
		filter += oModel.ItemID;
		filter += "' and MRPElementScheduleLine eq '";
		filter += oModel.ScheduleLineID;
		filter += "' and Type eq '";
		filter += oModel.Type;
		filter += "'";
		// Build the parameters for the URL
		var oUrlParams = new Array();
		var tmp = "$filter=" + filter;
		oUrlParams.push(tmp);
		// Read Purchase Order in a synchronous call
		oDataModel.read(url, null, oUrlParams, false, function(oData, oResponse) {
			changeRequest = oResponse.data.results[0];
		}, function(oError) {
			changeRequest = null;
		});
		return changeRequest;
	},

	/**
	 * This method updates a 'Change Request' to the backend within a batch request. Info: SAP type DATS has to be
	 * provided as "yyyy-MM-ddT00:00:00" *
	 * 
	 * @param sClientApp
	 *          string indicating the calling client application. It is required to distinguish between x30 apps and 540
	 *          because the values for the PO/TO are calculated differently
	 * @memberOf i2d.pp.mrpcockpit.reuse.util.CollaborationHelper
	 */
	updateRequestBatch : function(oDataDialog, oHandler, sClientApp) {

		var oDateFormat = sap.ui.core.format.DateFormat.getDateTimeInstance({
			pattern : "yyyy-MM-dd"
		});
		var aChangeOperations = new Array();
		var oDataModel = this.oModelGlobal;
		var sODataRequestType = i2d.pp.mrpcockpit.reuse.util.CommonConstants.CRUD_UPDATE;

		oDataModel.setUseBatch(true);
		oDataModel.clearBatch();

		// ---------------------------------------------------------------------
		// Check mandatory data in the model
		// ---------------------------------------------------------------------
		// return "SOLUTION_DIALOG_MSG_MANDATORY_KEY_DATA_MISSING";

		// ---------------------------------------------------------------------
		// OData: Change Request - Update just a small subset of data
		// ---------------------------------------------------------------------
		var oData = {};
		oData.SolutionRequestStatus = oDataDialog.SolutionRequestStatus;
		oData.SolutionRequestNote = oDataDialog.SolutionRequestNote;
		oData.VendorResponse = oDataDialog.VendorResponse;

		if (sClientApp === "x30") {
			// if called from the x30 where fields are provided by dialog and fields are named differently
			// oData.MRPElementChangeOpenQuantity = (oDataDialog.MRPElementChangeOpenQuantity).toString();
			// oData.MRPElementOpenQuantity = (oDataDialog.MRPElementOpenQuantity).toString();

			// Write Changed Availability Date in 'DATS'
			oData.MRPElementChgAvailyOrRqmtDate = oDateFormat.format(oDataDialog.MRPElementChgAvailyOrRqmtDate) + "T00:00:00";

			// oData.MRPElementAvailyOrRqmtDate = oDateFormat.format(oDataDialog.MRPElementAvailyOrRqmtDate) + "T00:00:00";

			// ---------the new Total Quantity fields--------------
			// Write the quantities
			oData.MRPElementChangedTotalQuantity = (oDataDialog.MRPElementChangedTotalQuantity).toString();
			oData.MRPElementChgAvailyOrRqmtDate = oDateFormat.format(oDataDialog.MRPElementChgAvailyOrRqmtDate) + "T00:00:00";
		} else {
			// if called from the Change Request app - all fields are read by ODATA
			// oData.MRPElementChangeOpenQuantity = oDataDialog.MRPElementChangeOpenQuantity;
			// oData.MRPElementOpenQuantity = oDataDialog.MRPElementOpenQuantity;
			// oData.MRPElementChgAvailyOrRqmtDate = oDataDialog.MRPElementChgAvailyOrRqmtDate;
			// oData.MRPElementAvailyOrRqmtDate = oDataDialog.MRPElementAvailyOrRqmtDate;
			// Fill changed data (CR edit)
			if(oDataDialog.MRPElementChangedTotalQuantity){
				oData.MRPElementChangedTotalQuantity = (oDataDialog.MRPElementChangedTotalQuantity).toString();
			}
			if(oDataDialog.MRPElementChgAvailyOrRqmtDate){
				oData.MRPElementChgAvailyOrRqmtDate = oDateFormat.format(oDataDialog.MRPElementChgAvailyOrRqmtDate) + "T00:00:00";
			}
			if(oDataDialog.VendorResponse === i2d.pp.mrpcockpit.reuse.util.CommonConstants.VENDOR_RESPONSE_PROPOSED &&
				 oDataDialog.MaterialShortageSolnRequestLine === null ){ 
				var oDataProposal = {};
				oDataProposal.MRPElementProposedTotalQty = (oDataDialog.MRPElementProposedQuantity).toString();
				if (oDataDialog.MRPElementProposedDate) {
					var oDate = oDataDialog.MRPElementProposedDate;
					oDataProposal.MRPElementProposedDate = oDateFormat.format(oDate) + "T00:00:00";
					oDataProposal.MRPElementScheduleLine = oDataDialog.MRPElementScheduleLine;
					oDataProposal.MaterialShortageSolnRequest = oDataDialog.MaterialShortageSolnRequest;
					var sODataRequestTypeProposal = i2d.pp.mrpcockpit.reuse.util.CommonConstants.CRUD_CREATE;
					var urlProposal = i2d.pp.mrpcockpit.reuse.util.CommonConstants.ODATA_ENTITYSET_CHANGEREQUESTPROPOSAL;
				}
			}else if(oDataDialog.VendorResponse !== i2d.pp.mrpcockpit.reuse.util.CommonConstants.VENDOR_RESPONSE_PROPOSED && 
							 oDataDialog.MaterialShortageSolnRequestLine !== null ){
				  var oDataProposal = {};
					var urlProposal = "/"+ oDataDialog.ChRequest_To_ChRequestProposal.__list[0];
					var sODataRequestTypeProposal = i2d.pp.mrpcockpit.reuse.util.CommonConstants.CRUD_DELETE;
			}
		}

		// Create the batch for CR and add batch to the array of operations
		aChangeOperations.push(oDataModel.createBatchOperation(this._buildUrlForChangeRequestUpdate(oDataDialog),
													 sODataRequestType, oData, null));
		// create New Proposal
		if(sODataRequestTypeProposal){ 
			// Add the batch to the array of operations
			aChangeOperations.push(oDataModel.createBatchOperation(urlProposal,
														 sODataRequestTypeProposal, oDataProposal, null));
		}
		
		// Collect the batch operation
		oDataModel.addBatchChangeOperations(aChangeOperations);
		// Submit the batch - synchronous call
		oDataModel.submitBatch(oHandler.fnSuccess, oHandler.fnError, false);
		// Return 'success'
		return "";
	},

	/**
	 * This method creates a new 'Change Request' to the backend within a batch request. Info: SAP type DATS has to be
	 * provided as "yyyy-MM-ddT00:00:00"
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.util.CollaborationHelper
	 */
	createRequestBatch : function(oDataDialog, oHandler) {

		var aChangeOperations = new Array();
		var oDataModel = this.oModelGlobal;
		var url = i2d.pp.mrpcockpit.reuse.util.CommonConstants.ODATA_ENTITYSET_CHANGEREQUEST;
		var sODataRequestType = i2d.pp.mrpcockpit.reuse.util.CommonConstants.CRUD_CREATE;
		oDataModel.setUseBatch(true);
		oDataModel.clearBatch();

		// ---------------------------------------------------------------------
		// Check mandatory data in the model
		// ---------------------------------------------------------------------
		// return "SOLUTION_DIALOG_MSG_MANDATORY_KEY_DATA_MISSING";

		// ---------------------------------------------------------------------
		// OData: Change Request - Create
		// ---------------------------------------------------------------------
		// Create the data for the operation
		var oData = this._buildODataForChangeRequestCreation(oDataDialog);
		// Create the batch
		var oChangeOperationCR = oDataModel.createBatchOperation(url, sODataRequestType, oData, null);
		// Add the batch to the array of operations
		aChangeOperations.push(oChangeOperationCR);
		// Collect the batch operation
		oDataModel.addBatchChangeOperations(aChangeOperations);
		// Submit the batch - synchronous call
		oDataModel.submitBatch(oHandler.fnSuccess, oHandler.fnError, false);
		// Return 'success'
		return "";
	},

	/**
	 * This method deletes a 'Accepted shortage' to the backend. Info: SAP type DATS has to be provided as
	 * "yyyy-MM-ddT00:00:00"
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.util.CollaborationHelper
	 */
	deleteShortageAcceptBatch : function(oModel, oHandler) {

		if (this.backendVersion === 1) {
			// call Wave 3 Interface
			return i2d.pp.mrpcockpit.reuse.util.Wave3CollaborationHelper.deleteShortageAcceptBatch(oModel, oHandler);
		}

		// Date format object for conversion purposes
		var oDateFormat = sap.ui.core.format.DateFormat.getDateTimeInstance({
			pattern : "yyyy-MM-dd"
		});
		var aChangeOperations = [];
		var oData = {};
		// The time interval is part of the key and has to be converted
		var materialshortagestartdate = oDateFormat.format(oModel.MaterialShortageStartDate) + "T00:00:00";
		var materialshortageenddate = oDateFormat.format(oModel.MaterialShortageEndDate) + "T00:00:00";

		// ---------------------------------------------------------------------
		// OData: Delete 'Accepted shortage'
		// ---------------------------------------------------------------------
		var oDataModel = this.oModelGlobal;

		// Build the URL to define the OData service and the keys for the shortage to delete
		var url = i2d.pp.mrpcockpit.reuse.util.CommonConstants.ODATA_ENTITYSET_ACCEPTSHORTAGE
				+ "(MaterialShortageProfile='" + oModel.MaterialShortageProfile + "',MaterialShortageProfileCount='"
				+ oModel.MaterialShortageProfileCount + "',MaterialID='" + oModel.MaterialID + "',MRPPlant='" + oModel.MRPPlant
				+ "',MRPArea='" + encodeURIComponent(oModel.MRPArea) + "',MRPPlanningSegmentType='" + oModel.MRPPlanningSegmentType
				+ "',MRPPlanningSegmentNumber='" + oModel.MRPPlanningSegmentNumber + "',MaterialShortageStartDate=datetime'"
				+ encodeURIComponent(materialshortagestartdate) + "',MaterialShortageEndDate=datetime'" + encodeURIComponent(materialshortageenddate)
				+ "')"; 

		// Define the OData Delete operation
		var sODataRequestType = i2d.pp.mrpcockpit.reuse.util.CommonConstants.CRUD_DELETE;
		// Create the batch
		var oChangeOperation = oDataModel.createBatchOperation(url, sODataRequestType, oData, null);
		// Add the batch to the array of operations
		aChangeOperations.push(oChangeOperation);
		// Collect the batch operation
		oDataModel.addBatchChangeOperations(aChangeOperations);
		// Submit the batch - Asynchronous call
		oDataModel.submitBatch(oHandler.fnSuccess, oHandler.fnError, true);
		// Return 'success'
		return "";
	},

	/**
	 * This method creates a 'Accept shortage' to the backend in batch mode. Info: SAP type DATS has to be provided as
	 * "yyyy-MM-ddT00:00:00"
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.util.CollaborationHelper
	 */
	createShortageAcceptBatch : function(oDataDialog, oHandler) {

		if (this.backendVersion === 1) {
			// call Wave 3 Interface
			return i2d.pp.mrpcockpit.reuse.util.Wave3CollaborationHelper.createShortageAcceptBatch(oDataDialog, oHandler);
		}

		var aChangeOperations = new Array();
		var oDateFormat = sap.ui.core.format.DateFormat.getDateTimeInstance({
			pattern : "yyyy-MM-dd"
		});
		var url = i2d.pp.mrpcockpit.reuse.util.CommonConstants.ODATA_ENTITYSET_ACCEPTSHORTAGE;
		var sODataRequestType = i2d.pp.mrpcockpit.reuse.util.CommonConstants.CRUD_CREATE;
		var oDataModel = this.oModelGlobal;
		oDataModel.setUseBatch(true);
		oDataModel.clearBatch();

		// ---------------------------------------------------------------------
		// Check mandatory data in the model
		// Note: MRPPlanningSegmentNumber is allowed to be ""
		// ---------------------------------------------------------------------
		if (!oDataDialog.MaterialShortageProfile || !oDataDialog.MaterialShortageProfileCount || !oDataDialog.MaterialID
				|| !oDataDialog.MRPPlant || !oDataDialog.MRPArea || !oDataDialog.MRPPlanningSegmentType
				|| !oDataDialog.MaterialShortageStartDate || !oDataDialog.MaterialShortageEndDate) {
			// A mandatory field is missing
			return "SOLUTION_DIALOG_MSG_MANDATORY_KEY_DATA_MISSING";
		}

		// ---------------------------------------------------------------------
		// OData: Accept Shortage - Create
		// ---------------------------------------------------------------------
		// Accept Shortage
		var oData = {};
		// Keys
		oData.MaterialShortageProfile = oDataDialog.MaterialShortageProfile;
		oData.MaterialShortageProfileCount = oDataDialog.MaterialShortageProfileCount;
		oData.MaterialID = oDataDialog.MaterialID;
		oData.MRPPlant = oDataDialog.MRPPlant;
		oData.MRPArea = oDataDialog.MRPArea;
		oData.MRPPlanningSegmentType = oDataDialog.MRPPlanningSegmentType;
		oData.MRPPlanningSegmentNumber = oDataDialog.MRPPlanningSegmentNumber;
		oData.MaterialShortageStartDate = oDateFormat.format(oDataDialog.MaterialShortageStartDate) + "T00:00:00";
		oData.MaterialShortageEndDate = oDateFormat.format(oDataDialog.MaterialShortageEndDate) + "T00:00:00";

		// Additional Info
		oData.MaterialShortageQuantity = (oDataDialog.MaterialShortageQuantity).toString();
		oData.AcceptShortageNote = oDataDialog.SolutionRequestNote;

		// Create the batch
		var oChangeOperation = oDataModel.createBatchOperation(url, sODataRequestType, oData, null);
		// Add the batch to the array of operations
		aChangeOperations.push(oChangeOperation);
		// Collect the batch operation
		oDataModel.addBatchChangeOperations(aChangeOperations);
		// Submit the batch - Asynchronous call
		oDataModel.submitBatch(oHandler.fnSuccess, oHandler.fnError, true);
		// Return 'success'
		return "";
	},

	/**
	 * This method updates a 'Purchase Order' and (optional) a 'Change Request'. DATS has to be provided as
	 * "yyyy-MM-ddT00:00:00" Example Result:
	 * "ScheduleLines(PurchaseOrderID='4500003069',ItemID='00010',ScheduleLineID='0001'"
	 * 
	 * @param oDataDialog
	 *          object containing the required data to identify and update a purchase/transfer order <BR>
	 *          general required fields in the object: <BR>
	 *          {MRPElement, MRPElementItem, MRPElementScheduleLine, MaterialID} <BR>
	 *          x30 apps require additional fields in this object: <BR>
	 *          {MRPElementChangeOpenQuantity, MaterialShortageSolutionType, MRPElementChgAvailyOrRqmtDate,
	 *          MRPElementAvailyOrRqmtDate, MRPElementOpenQuantity, MRPElementChangeOpenQuantity} <BR>
	 *          If a required field is missing the client gets a direct error message
	 *          !!! OrderedQuantity & OrderedChangedQuantity are now used for PurchaseOrder  instead of TotalQuantity!!!
	 * @param oHandler
	 *          object containing a success- and error handler function for OData call backs
	 * @param bChangeRequestExists
	 *          boolean indicating whether the client wants to also update the related change request for the given PO/TO.
	 *          Attention: The client has to guarantee that the CR really exists - it is not checked and more and might
	 *          result in errors.
	 * @param sClientApp
	 *          string indicating the calling client application. It is required to distinguish between x30 apps and 540
	 *          because the values for the PO/TO are calculated differently
	 * @memberOf i2d.pp.mrpcockpit.reuse.util.CollaborationHelper
	 */
	updatePurchaseOrderBatch : function(oDataDialog, oHandler, bChangeRequestExists, sClientApp) {
		if (this.backendVersion === 1) {
			// call Wave 3 Interface
			return i2d.pp.mrpcockpit.reuse.util.Wave3CollaborationHelper.writePurchaseOrderBatch(oDataDialog, null, oHandler);
		}

		var aChangeOperations = new Array();
		// Define the OdataRequestType for an update call
		var sODataRequestType = i2d.pp.mrpcockpit.reuse.util.CommonConstants.CRUD_UPDATE;
		var oDataModel = this.oModelGlobal;
		oDataModel.setUseBatch(true);
		oDataModel.clearBatch();

		// ---------------------------------------------------------------------
		// Check mandatory data in the model
		// ---------------------------------------------------------------------
		if (!oDataDialog.MRPElement || !oDataDialog.MRPElementItem || !oDataDialog.MRPElementScheduleLine
				|| !oDataDialog.MaterialID) {
			// A mandatory field is missing
			return "SOLUTION_DIALOG_MSG_MANDATORY_KEY_DATA_MISSING";
		}

		// if called from the x30 where fields are provided by dialog and fields are named differently
		if (sClientApp === "x30") {
			if (!oDataDialog.MaterialShortageSolutionType || !oDataDialog.MRPElementChgAvailyOrRqmtDate
					|| !oDataDialog.MRPElementAvailyOrRqmtDate || !oDataDialog.OrderedQuantity
					|| !oDataDialog.OrderedChangedQuantity) {
				// A mandatory field is missing
				return "SOLUTION_DIALOG_MSG_MANDATORY_KEY_DATA_MISSING";
			}
		}

		// Adjust the item id that is required as key for the MM call.
		var sItemId = this._adaptItemIdForMM(oDataDialog.MRPElementItem);

		// ---------------------------------------------------------------------
		// OData: Purchase Order - Update
		// The ETag was calculated by the backend within the solution call and passed
		// to the client. It is sent back in the MM call in order to let the backend
		// check the consistency of the business object.
		// ---------------------------------------------------------------------
		var url = i2d.pp.mrpcockpit.reuse.util.CommonConstants.ODATA_ENTITYSET_MM_PO_SCHEDLINE;
		url += "(PurchaseOrderID='";
		url += oDataDialog.MRPElement;
		url += "',ItemID='";
		url += sItemId;
		url += "',ScheduleLineID='";
		url += oDataDialog.MRPElementScheduleLine;
		url += "')";

		// Build the values for the purchase order update for the given calling app
		var oEntry = this._buildODataForPurchaseOrderUpdate(oDataDialog, sClientApp);
		// Build the parameters
		var oParams = {};
		oParams.sETag = "W/\"'" + oDataDialog.ChangeStateID + "'\"";
		// Create the batch operation
		var oChangeOperationPO = oDataModel.createBatchOperation(url, sODataRequestType, oEntry, oParams);
		// Add the batch to the array of operations
		aChangeOperations.push(oChangeOperationPO);

		// ---------------------------------------------------------------------
		// OData: Change Request - Update
		// Just in case there is an existing Change Request for the PO
		// ---------------------------------------------------------------------
		if (bChangeRequestExists === true) {
			// Define the parameters for the service of the change request
			sODataRequestType = i2d.pp.mrpcockpit.reuse.util.CommonConstants.CRUD_UPDATE;
			// Build the values for the purchase order update for the given calling app
			var sMaterialShortageDefinitionID = "";
			var oData = this._buildODataForChangeRequestUpdate(oDataDialog, sClientApp, sMaterialShortageDefinitionID);
			// Build the URL with the keys for the update operation
			url = this._buildUrlForChangeRequestUpdate(oDataDialog);
			// Create the batch
			var oBatchOperation = oDataModel.createBatchOperation(url, sODataRequestType, oData, null);
			// Add the batch to the array of operations
			aChangeOperations.push(oBatchOperation);
		}

		// Collect the batch operation
		oDataModel.addBatchChangeOperations(aChangeOperations);
		// Submit the batch - synchronous call
		oDataModel.submitBatch(oHandler.fnSuccess, oHandler.fnError, false);
		// Return 'success'
		return "";
	},

	/**
	 * This method builds the Odata data structure to update a purchase order
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.util.CollaborationHelper
	 */
	_buildODataForPurchaseOrderUpdate : function(oDataDialog, sClientApp) {
		// Date format object for conversion purposes
		var oDateFormat = sap.ui.core.format.DateFormat.getDateTimeInstance({
			pattern : "yyyy-MM-dd"
		});
		// Contrainer for return values
		var oEntry = {};
		// Based on the calling client app we use different fields for the result values
		switch (sClientApp) {
			case "x30" :
				// called from the x30 where fields are provided by dialog and fields are named differently
				var oDate = oDataDialog.MRPElementChgAvailyOrRqmtDate;
				oEntry.DeliveryDate = oDateFormat.format(oDate) + "T00:00:00";
				oEntry.PurchasingDocumentOrderQty = (oDataDialog.OrderedChangedQuantity).toString();
				break;
			case "540" :
				// called from the Change Request app - all fields are read by ODATA
				if (oDataDialog.VendorResponse === i2d.pp.mrpcockpit.reuse.util.CommonConstants.VENDOR_RESPONSE_PROPOSED) {
					// if vendor proposal selected then update PO with proposed change request data
					oEntry.DeliveryDate = oDataDialog.MRPElementProposedDate;
					oEntry.PurchasingDocumentOrderQty = oDataDialog.MRPElementProposedQuantity;
				} else {
					// else update PO with the requested change request data
					oEntry.DeliveryDate = oDataDialog.MRPElementChgAvailyOrRqmtDate;
					oEntry.PurchasingDocumentOrderQty = oDataDialog.MRPElementChangedTotalQuantity;
				}
				break;
			default :
				jQuery.sap.log.error("CollaborationHelper:_buildODataForPurchaseOrderUpdate - unknown client app: "
						+ sClientApp);
		}
		return oEntry;
	},

	/**
	 * This method builds the Odata data structure to update a Change Request
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.util.CollaborationHelper
	 */
	_buildODataForChangeRequestUpdate : function(oDataDialog, sClientApp, sMaterialShortageDefinitionID) {
		// Date format object for conversion purposes
		var oDateFormat = sap.ui.core.format.DateFormat.getDateTimeInstance({
			pattern : "yyyy-MM-dd"
		});
		// Contrainer for return values
		var oEntry = {};
		oEntry.SolutionRequestStatus = oDataDialog.SolutionRequestStatus;
		// Based on the calling client app we use different fields for the result values
		switch (sClientApp) {
			case "x30" :
				// If called from the x30 where fields are provided by dialog and fields are named differently
				// Build the shortage profile
				// Shortage Definition wasn't provided by solution call -> concatenate the profile
				sMaterialShortageDefinitionID = oDataDialog.MaterialShortageProfile + oDataDialog.MaterialShortageProfileCount;
				// Changed Delivery Date (value provided by user)
				oEntry.MRPElementChgAvailyOrRqmtDate = oDateFormat.format(oDataDialog.MRPElementChgAvailyOrRqmtDate)
						+ "T00:00:00";

				// ---------the new Total Quantity fields--------------
				// Write the quantities
				oEntry.MRPElementOriginalTotalQty = (oDataDialog.MRPElementOriginalTotalQty).toString();
				oEntry.MRPElementChangedTotalQuantity = (oDataDialog.MRPElementChangedTotalQuantity).toString();

				break;
			case "540" :
				// If called from the Change Request app - all fields are read by ODATA
				sMaterialShortageDefinitionID = oDataDialog.MaterialShortageDefinitionID;
				oEntry.SolutionRequestNote = oDataDialog.SolutionRequestNote;

				// ---------the new Total Quantity fields--------------
				// Write the quantities
				oEntry.MRPElementOriginalTotalQty = oDataDialog.MRPElementOriginalTotalQty;
				oEntry.MRPElementChangedTotalQuantity = oDataDialog.MRPElementChangedTotalQuantity;
				oEntry.MRPElementChgAvailyOrRqmtDate = oDataDialog.MRPElementChgAvailyOrRqmtDate;

				break;
			default :
				jQuery.sap.log.error("CollaborationHelper:_buildODataForChangeRequestUpdate - unknown client app: "
						+ sClientApp);
		}
		return oEntry;
	},

	/**
	 * This method builds the Odata data structure to create a Change Request in a batch call
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.util.CollaborationHelper
	 */
	_buildODataForChangeRequestCreation : function(oDataDialog) {
		// Date format object for conversion purposes
		var oDateFormat = sap.ui.core.format.DateFormat.getDateTimeInstance({
			pattern : "yyyy-MM-dd"
		});
		var oEntry = {};

		// Keys
		oEntry.MRPElement = oDataDialog.MRPElement;
		// Adjust the item id that is required as key for the MM call.
		oEntry.MRPElementItem = this._adaptItemIdForMM(oDataDialog.MRPElementItem);
		oEntry.MRPElementScheduleLine = oDataDialog.MRPElementScheduleLine;
		// Fill that with the data from the model
		oEntry.Vendor = oDataDialog.Vendor; // ID with max 10 chars
		oEntry.SupplyingPlant = oDataDialog.SupplyingPlant; // In case of TO this field is used
		oEntry.SolutionRequestStatus = oDataDialog.SolutionRequestStatus;
		oEntry.MaterialID = oDataDialog.MaterialID;
		oEntry.SolutionRequestNote = oDataDialog.SolutionRequestNote;
		oEntry.MRPPlant = oDataDialog.MRPPlant;
		oEntry.MRPArea = oDataDialog.MRPArea;
		oEntry.MRPPlanningSegmentType = oDataDialog.MRPPlanningSegmentType;
		oEntry.MRPPlanningSegmentNumber = oDataDialog.MRPPlanningSegmentNumber;
		oEntry.MRPElementCategory = oDataDialog.MRPElementCategory;
		oEntry.MaterialGoodsReceiptDuration = oDataDialog.MaterialGoodsReceiptDuration;
		// Write the quantities
		oEntry.MRPElementOpenQuantity = (oDataDialog.MRPElementOpenQuantity).toString();
		// Write Target Date in 'DATS'
		oEntry.MRPElementChgAvailyOrRqmtDate = oDateFormat.format(oDataDialog.MRPElementChgAvailyOrRqmtDate) + "T00:00:00";
		// Write Original Date in 'DATS'
		oEntry.MRPElementAvailyOrRqmtDate = oDateFormat.format(oDataDialog.MRPElementAvailyOrRqmtDate) + "T00:00:00";

		// ---------the new Total Quantity fields--------------
		// Write the quantities
		oEntry.MRPElementOriginalTotalQty = (oDataDialog.MRPElementOriginalTotalQty).toString();
		oEntry.MRPElementChangedTotalQuantity = (oDataDialog.OrderedChangedQuantity).toString();
		// Write Availability Date in 'DATS'
		oEntry.AvailabilityDate = oDateFormat.format(oDataDialog.AvailabilityDate) + "T00:00:00";

		return oEntry;
	},

	/**
	 * This method updates a 'Purchase Requisition' to the backend. DATS has to be provided as "yyyy-MM-ddT00:00:00"
	 * Example Result: "PurchaseReqItems(PurchaseRequisitionID='0010030950',ItemID='00010'"
	 * 
	 * @return {string} empty for success, string if exception occured
	 * @memberOf i2d.pp.mrpcockpit.reuse.util.CollaborationHelper
	 */
	updatePurchaseRequisitionBatch : function(oDataDialog, oHandler) {
		if (this.backendVersion === 1) {
			// call Wave 3 Interface
			return i2d.pp.mrpcockpit.reuse.util.Wave3CollaborationHelper.writePurchaseRequisitionBatch(oDataDialog, null,
					oHandler);
		}

		var aChangeOperations = new Array();
		var oDateFormat = sap.ui.core.format.DateFormat.getDateTimeInstance({
			pattern : "yyyy-MM-dd"
		});
		var oDataModel = this.oModelGlobal;
		oDataModel.setUseBatch(true);
		oDataModel.clearBatch();

		// ---------------------------------------------------------------------
		// Check mandatory data in the model
		// ---------------------------------------------------------------------
		if (!oDataDialog.MRPElement || !oDataDialog.MRPElementItem || !oDataDialog.MaterialShortageSolutionType
				|| !oDataDialog.MaterialID || !oDataDialog.MRPElementChgAvailyOrRqmtDate
				|| !oDataDialog.MRPElementAvailyOrRqmtDate || !oDataDialog.MRPElementOriginalTotalQty
				|| !oDataDialog.MRPElementChangedTotalQuantity) {
			// A mandatory field is missing
			return "SOLUTION_DIALOG_MSG_MANDATORY_KEY_DATA_MISSING";
		}

		// Adjust the item id that is required as key for the MM call.
		var sItemId = this._adaptItemIdForMM(oDataDialog.MRPElementItem);

		// ---------------------------------------------------------------------
		// OData: Purchase Requisition Update
		// The ETag is calculated by the backend within the solution call and passed
		// to the client. It is sent back in the MM call in order to let the backend
		// check the consistency of the business object.
		// ---------------------------------------------------------------------
		var url = i2d.pp.mrpcockpit.reuse.util.CommonConstants.ODATA_ENTITYSET_MM_PR_ITEM;
		url += "(PurchaseRequisitionID='";
		url += oDataDialog.MRPElement;
		url += "',ItemID='";
		url += sItemId;
		url += "')";

		var oEntry = {};
		var oDate = oDataDialog.MRPElementChgAvailyOrRqmtDate;
		oEntry.DeliveryDate = oDateFormat.format(oDate) + "T00:00:00";
		oEntry.RequestedQuantity = (oDataDialog.MRPElementChangedTotalQuantity).toString();
		// Manually changed requisitions should always be fixed
		oEntry.PurchaseRequisitionIsFixed = true;
		var oParams = {};
		oParams.sETag = "W/\"'" + oDataDialog.ChangeStateID + "'\"";
		// Create the batch
		var sODataRequestType = i2d.pp.mrpcockpit.reuse.util.CommonConstants.CRUD_UPDATE;
		var oChangeOperationPR = oDataModel.createBatchOperation(url, sODataRequestType, oEntry, oParams);
		// Add the batch to the array of operations
		aChangeOperations.push(oChangeOperationPR);

		// Collect the batch operation
		oDataModel.addBatchChangeOperations(aChangeOperations);
		// Submit the batch - synchronous call
		oDataModel.submitBatch(oHandler.fnSuccess, oHandler.fnError, false);
		// Return 'success'
		return "";
	},

	/**
	 * This method creates a 'Purchase Order' to the backend. DATS has to be provided as "yyyy-MM-ddT00:00:00" Example
	 * Result:
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.util.CollaborationHelper
	 */

	createPurchaseOrderBatch : function(oDataDialog, oHandler) {
		if (this.backendVersion === 1) {
			// call Wave 3 Interface
			return i2d.pp.mrpcockpit.reuse.util.Wave3CollaborationHelper
					.createPurchaseOrderBatch(oDataDialog, null, oHandler);
		}

		var aChangeOperations = new Array();
		var oDateFormat = sap.ui.core.format.DateFormat.getDateTimeInstance({
			pattern : "yyyy-MM-dd"
		});
		var Constants = i2d.pp.mrpcockpit.reuse.util.CommonConstants;
		// Set these keys hard-coded; Requirement of backend.
		var MRPElementItem = "00010";
		var MRPElementScheduleLine = "0001";
		var AccountAssignmentID = "01";

		// ---------------------------------------------------------------------
		// Check mandatory data in the model
		// ---------------------------------------------------------------------
		if (!oDataDialog.MRPElementChgAvailyOrRqmtDate || !MRPElementItem || !MRPElementScheduleLine
				|| !oDataDialog.PurchasingOrganisation || !oDataDialog.MRPElementChangedTotalQuantity
				|| !oDataDialog.ReceivingPlant || !oDataDialog.MaterialID || !oDataDialog.MaterialBaseUnit
				|| !AccountAssignmentID) {
			// A mandatory field is missing
			return "SOLUTION_DIALOG_MSG_MANDATORY_KEY_DATA_MISSING";
		}
		if (oDataDialog.MaterialShortageSolutionType === Constants.SOLUTIONTYPE_PO_CREATE && !oDataDialog.Vendor) { // "PO_CREATE"
			// no vendor is provided for the creation of the PO
			// this scenario should not be possible, as unsourced cards are not suggested by the backend
			// ONE CODE LINE >>>
			if (i2d.pp.mrpcockpit.reuse.util.CommonConstants.ONE_CODELINE_TEXT) {
				if (this.getModel('ServiceVersions')) {
					return i2d.pp.mrpcockpit.reuse.util.Helper.getSpecialTextForFieldInt({sI18nID : "SOLUTION_DIALOG_MSG_VENDOR_MISSING_PO", 
						sSoHI18nID : "SOLUTION_DIALOG_MSG_VENDOR_MISSING_POSoH", sModSI18nID : "SOLUTION_DIALOG_MSG_VENDOR_MISSING_POModS", 
						iServiceVersion : this.getModel('ServiceVersions').getData().iServiceSchemaVersion});			
				}
			}
			// ONE CODE LINE <<<
			
			return "SOLUTION_DIALOG_MSG_VENDOR_MISSING_PO";
		}
		if (oDataDialog.MaterialShortageSolutionType === Constants.SOLUTIONTYPE_TO_CREATE && !oDataDialog.SupplyingPlant) { // "TO_CREATE"
			// no supplying plant is provided for the creation of the PO
			// this scenario should not be possible, as unsourced cards are not suggested by the backend
			return "SOLUTION_DIALOG_MSG_SUPPLYING_PLANT_MISSING_TO";
		}

		var oDataModel = this.oModelGlobal;

		// ---------------------------------------------------------------------
		// OData: Purchase Order - Schedule Lines
		// ---------------------------------------------------------------------
		var oSchedLine = {};
		var oDate = oDataDialog.MRPElementChgAvailyOrRqmtDate;
		oSchedLine.ItemID = MRPElementItem;
		oSchedLine.ScheduleLineID = MRPElementScheduleLine;
		if (!oDate) {
			oSchedLine.DeliveryDate = " ";
		} else {
			oSchedLine.DeliveryDate = oDateFormat.format(oDate) + "T00:00:00";
		}
		oSchedLine.PurchasingDocumentOrderQty = this.replaceEmptyValues((oDataDialog.MRPElementChangedTotalQuantity)
				.toString());

		var a = new Array();
		a.push(oSchedLine);

		// ---------------------------------------------------------------------
		// OData: Purchase Order - Account Assignment
		// ---------------------------------------------------------------------
		var oAccountAssignment = {};
		oAccountAssignment.ItemID = MRPElementItem;
		oAccountAssignment.AccountAssignmentID = AccountAssignmentID;
		oAccountAssignment.SalesOrder = this.replaceEmptyValues(oDataDialog.SalesOrder);
		oAccountAssignment.SalesOrderItem = this.replaceEmptyValues(oDataDialog.SalesOrderItem);
		oAccountAssignment.WBSElement = this.replaceEmptyValues(oDataDialog.WBSElement);
		var e = new Array();
		e.push(oAccountAssignment);

		// ---------------------------------------------------------------------
		// OData: Purchase Order - Items
		// ---------------------------------------------------------------------
		var oItems = {};

		oItems.ItemID = MRPElementItem;
		oItems.AcctAssignmentCategory = this.replaceEmptyValues(oDataDialog.AcctAssignmentCategory);
		oItems.Material = this.replaceEmptyValues(oDataDialog.MaterialID);
		oItems.PurchasingDocumentOrderQty = this.replaceEmptyValues((oDataDialog.MRPElementChangedTotalQuantity).toString());
		oItems.PurgDocOrderQuantityUnit = this.replaceEmptyValues(oDataDialog.MaterialBaseUnit);
		oItems.ReceivingPlant = this.replaceEmptyValues(oDataDialog.ReceivingPlant);
		oItems.SupplyingStorageLocation = this.replaceEmptyValues(oDataDialog.SupplyingStorageLocation);
		oItems.ReceivingStorageLocation = this.replaceEmptyValues(oDataDialog.ReceivingStorageLocation);
		oItems.PurchasingInfoRecord = this.replaceEmptyValues(oDataDialog.PurchasingInfoRecord);
		oItems.PurchaseContract = this.replaceEmptyValues(oDataDialog.PurchaseContract);
		oItems.PurchaseContractItem = this.replaceEmptyValues(oDataDialog.PurchaseContractItem);
		oItems.MaterialGoodsReceiptDuration = this.replaceEmptyValues(oDataDialog.MaterialGoodsReceiptDuration);
		oItems.MMPurchaseOrderScheduleLines = a;
		oItems.MMPurchaseOrderAccAssignments = e;
		var b = new Array();
		b.push(oItems);

		// ---------------------------------------------------------------------
		// OData: Purchase Order - Header
		// ---------------------------------------------------------------------
		var url = i2d.pp.mrpcockpit.reuse.util.CommonConstants.ODATA_ENTITYSET_MM_PO_HEADER;
		var oHeader = {};
		// oHeader.PurchaseOrderType = oDataDialog.PurchaseOrderType;
		oHeader.PurchasingOrganisation = oDataDialog.PurchasingOrganisation;
		oHeader.PurchasingGroup = oDataDialog.PurchasingGroup;
		oHeader.CompanyCode = oDataDialog.CompanyCode;
		oHeader.Vendor = this.replaceEmptyValues(oDataDialog.Vendor);
		oHeader.SupplyingPlant = this.replaceEmptyValues(oDataDialog.SupplyingPlant);
		if (oDataDialog.MaterialShortageSolutionType === Constants.SOLUTIONTYPE_TO_CREATE) {
			oHeader.StockTransportOrderIndicator = true; // internal procurement
		} else {
			oHeader.StockTransportOrderIndicator = false; // external procurement
		}
		oHeader.MMPurchaseOrderItems = b;

		// Create the batch
		var sODataRequestType = i2d.pp.mrpcockpit.reuse.util.CommonConstants.CRUD_CREATE;
		var oCreateOperationPO = oDataModel.createBatchOperation(url, sODataRequestType, oHeader, null);
		// Add the batch to the array of operations
		aChangeOperations.push(oCreateOperationPO);
		// Collect the batch operation
		oDataModel.addBatchChangeOperations(aChangeOperations);
		// Submit the batch - synchronous call
		oDataModel.submitBatch(oHandler.fnSuccess, oHandler.fnError, false);
		// Return 'success'
		return "";
	},

	/**
	 * Due to an issue in the Gateway we have to provide a blank instead of empty values see internal message 0003720323
	 * 2013
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.util.CollaborationHelper
	 */
	replaceEmptyValues : function(value) {
		if (!value) {
			return " ";
		} else {
			return value;
		}
	},

	/**
	 * This method creates a 'Purchase Requisition' to the backend. DATS has to be provided as "yyyy-MM-ddT00:00:00"
	 * Example Result:
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.util.CollaborationHelper
	 */

	createPurchaseRequisitionBatch : function(oDataDialog, oHandler) {
		if (this.backendVersion === 1) {
			// call Wave 3 Interface
			return i2d.pp.mrpcockpit.reuse.util.Wave3CollaborationHelper.createPurchaseRequisitionBatch(oDataDialog, null,
					oHandler);
		}

		var aChangeOperations = new Array();
		var oDateFormat = sap.ui.core.format.DateFormat.getDateTimeInstance({
			pattern : "yyyy-MM-dd"
		});
		var Constants = i2d.pp.mrpcockpit.reuse.util.CommonConstants;
		// Set these keys hard-coded; Requirement of backend.
		var MRPElementItem = "00010";
		// var MRPElementScheduleLine = "0001";
		var AccountAssignmentID = "01";

		// // ---------------------------------------------------------------------
		// // Check mandatory data in the model
		// // ---------------------------------------------------------------------
		if (!oDataDialog.MRPElementChgAvailyOrRqmtDate || !MRPElementItem || !oDataDialog.MRPElementChangedTotalQuantity
				|| !oDataDialog.MaterialID || !oDataDialog.MaterialBaseUnit || !AccountAssignmentID) {
			// A mandatory field is missing
			return "SOLUTION_DIALOG_MSG_MANDATORY_KEY_DATA_MISSING";
		}

		if (oDataDialog.MaterialShortageSolutionType === Constants.SOLUTIONTYPE_PO_CREATE && !oDataDialog.Vendor) {
			// create PR
			// no vendor is provided for the creation of the PR
			// this scenario should not possible as unsourced cards are not provided by the backend

			// ONE CODE LINE >>>
			if (i2d.pp.mrpcockpit.reuse.util.CommonConstants.ONE_CODELINE_TEXT) {
				if (this.getModel('ServiceVersions')) {
					return i2d.pp.mrpcockpit.reuse.util.Helper.getSpecialTextForFieldInt({sI18nID : "SOLUTION_DIALOG_MSG_VENDOR_MISSING_PR", 
						sSoHI18nID : "SOLUTION_DIALOG_MSG_VENDOR_MISSING_PRSoH", sModSI18nID : "SOLUTION_DIALOG_MSG_VENDOR_MISSING_PRModS", 
						iServiceVersion : this.getModel('ServiceVersions').getData().iServiceSchemaVersion});			
				}
			}
			// ONE CODE LINE <<<
			return "SOLUTION_DIALOG_MSG_VENDOR_MISSING_PR"; // flgSuccess;
		}
		if (oDataDialog.MaterialShortageSolutionType === Constants.SOLUTIONTYPE_TO_CREATE && !oDataDialog.SupplyingPlant) {
			// no supplying plant is provided for the creation of the TR
			// this scenario should not possible as unsourced cards are not provided by the backend
			return "SOLUTION_DIALOG_MSG_SUPPLYING_PLANT_MISSING_TR";
		}
		if (oDataDialog.Vendor && !oDataDialog.PurchasingOrganisation) {
			// in case a vendor is provided the purchasing organization is mandatory
			// the purchasing organization should be provided by the solution call
			return "SOLUTION_DIALOG_MSG_PURCHASING_ORGANIZATION_MISSING_PR";
		}

		var oDataModel = this.oModelGlobal;

		// ---------------------------------------------------------------------
		// OData: Purchase Requisition - Account Assignment
		// ---------------------------------------------------------------------
		var oAccountAssignment = {};
		oAccountAssignment.ItemID = MRPElementItem;
		oAccountAssignment.AccountAssignmentID = AccountAssignmentID;
		oAccountAssignment.SalesOrder = this.replaceEmptyValues(oDataDialog.SalesOrder);
		oAccountAssignment.SalesOrderItem = this.replaceEmptyValues(oDataDialog.SalesOrderItem);
		oAccountAssignment.WBSElement = this.replaceEmptyValues(oDataDialog.WBSElement);

		var e = new Array();
		e.push(oAccountAssignment);

		// ---------------------------------------------------------------------
		// OData: Purchase Requisition - Items
		// ---------------------------------------------------------------------
		var oItems = {};
		var oDate = oDataDialog.MRPElementChgAvailyOrRqmtDate;
		oItems.ItemID = MRPElementItem;
		oItems.PurchasingOrganisation = this.replaceEmptyValues(oDataDialog.PurchasingOrganisation);
		oItems.PurchasingGroup = this.replaceEmptyValues(oDataDialog.PurchasingGroup);
		// oItems.PurchasingDocumentItemCategory = this.replaceEmptyValues(oDataDialog.PurchasingDocumentCategory);
		oItems.PurchasingDocumentItemCategory = this.replaceEmptyValues(oDataDialog.MaterialProcurementType);
		oItems.SupplyingPlant = this.replaceEmptyValues(oDataDialog.SupplyingPlant);
		oItems.AcctAssignmentCategory = this.replaceEmptyValues(oDataDialog.AcctAssignmentCategory);
		oItems.Material = this.replaceEmptyValues(oDataDialog.MaterialID);
		oItems.PurReqQuantityUnit = this.replaceEmptyValues(oDataDialog.MaterialBaseUnit);
		oItems.ReceivingPlant = this.replaceEmptyValues(oDataDialog.ReceivingPlant);
		oItems.SupplyingStorageLocation = this.replaceEmptyValues(oDataDialog.SupplyingStorageLocation);
		oItems.ReceivingStorageLocation = this.replaceEmptyValues(oDataDialog.ReceivingStorageLocation);
		oItems.PurchasingInfoRecord = this.replaceEmptyValues(oDataDialog.PurchasingInfoRecord);
		oItems.PurchaseContract = this.replaceEmptyValues(oDataDialog.PurchaseContract);
		oItems.PurchaseContractItem = this.replaceEmptyValues(oDataDialog.PurchaseContractItem);
		oItems.RequestedQuantity = this.replaceEmptyValues((oDataDialog.MRPElementChangedTotalQuantity).toString());
		oItems.FixedVendor = this.replaceEmptyValues(oDataDialog.Vendor);

		if (!oDate) {
			oItems.DeliveryDate = " ";
		} else {
			oItems.DeliveryDate = oDateFormat.format(oDate) + "T00:00:00";
		}

		oItems.MaterialGoodsReceiptDuration = this.replaceEmptyValues(oDataDialog.MaterialGoodsReceiptDuration);
		oItems.MMPurchaseReqAccAssignments = e;

		// Manually created requisitions should always be fixed
		oItems.PurchaseRequisitionIsFixed = true;

		var b = new Array();
		b.push(oItems);

		// ---------------------------------------------------------------------
		// OData: Purchase Requisition - Header
		// ---------------------------------------------------------------------
		var url = i2d.pp.mrpcockpit.reuse.util.CommonConstants.ODATA_ENTITYSET_MM_PR_HEADER;
		var oHeader = {};
		oHeader.MMPurchaseRequisitionItems = b;

		// Create the batch
		var sODataRequestType = i2d.pp.mrpcockpit.reuse.util.CommonConstants.CRUD_CREATE;
		var oCreateOperationPR = oDataModel.createBatchOperation(url, sODataRequestType, oHeader, null);
		// Add the batch to the array of operations
		aChangeOperations.push(oCreateOperationPR);
		// Collect the batch operation
		oDataModel.addBatchChangeOperations(aChangeOperations);
		// Submit the batch - synchronous call
		oDataModel.submitBatch(oHandler.fnSuccess, oHandler.fnError, false);
		// Return 'success'
		return "";
	},

	/**
	 * This method creates a 'Purchase Order' based on an existing 'Purchase Requisition'. DATS has to be provided as
	 * "yyyy-MM-ddT00:00:00" Example Result:
	 * 
	 * oDataDialog.MRPElementOriginalTotalQty oDataDialog.MRPElementChangedTotalQuantity
	 * oDataDialog.MRPElementOpenQuantity oDataDialog.MRPElementChangeOpenQuantity
	 * OpenQuantity + ChangedTotal Quantity â€“ TotalQuantity
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.util.CollaborationHelper
	 */
	convertPurchaseRequisitionBatch : function(oDataDialog, oHandler) {

		// If values have changed first an update of the Purchase Requisition needs to be triggered
		if ((oDataDialog.MRPElementChgAvailyOrRqmtDate !== oDataDialog.MRPElementAvailyOrRqmtDate) ||
				(oDataDialog.MRPElementChangedTotalQuantity !== oDataDialog.MRPElementOriginalTotalQty)) {
			 this.updatePurchaseRequisitionBatch(oDataDialog, oHandler);
		};
		
		var nOpenQuantity = (parseInt(oDataDialog.MRPElementOpenQuantity));
		var nConvertQuantity = nOpenQuantity + oDataDialog.MRPElementChangedTotalQuantity - oDataDialog.MRPElementOriginalTotalQty;
		if (nConvertQuantity < 1) {
	     // update before deleted already the document - therefore no conversion takes place		
			 return "";
		}
		var aChangeOperations = new Array();
		var oDateFormat = sap.ui.core.format.DateFormat.getDateTimeInstance({
			pattern : "yyyy-MM-dd"
		});
		var Constants = i2d.pp.mrpcockpit.reuse.util.CommonConstants;
		// Set these keys hard-coded; Requirement of backend.
		var MRPElementItem = "00010";
		var MRPElementScheduleLine = "0001";

		// ---------------------------------------------------------------------
		// Check mandatory data in the model
		// ---------------------------------------------------------------------
		if (!oDataDialog.MRPElementChgAvailyOrRqmtDate || !MRPElementItem || !MRPElementScheduleLine
				|| !oDataDialog.MRPElementChangedTotalQuantity || !oDataDialog.MRPElement) {
			// A mandatory field is missing
			return "SOLUTION_DIALOG_MSG_MANDATORY_KEY_DATA_MISSING";
		}

		if ((oDataDialog.MaterialShortageSolutionType === Constants.SOLUTIONTYPE_PR_CHANGE
				|| oDataDialog.MaterialShortageSolutionType === Constants.SOLUTIONTYPE_PR_INCREASE || oDataDialog.MaterialShortageSolutionType === Constants.SSOLUTIONTYPE_PR_RESCHEDULE)
				&& !oDataDialog.Vendor) {
			// no vendor is provided for the creation of the PO
			// this scenario should not possible as unsourced cards are not provided by the backend
			// ONE CODE LINE >>>
			if (i2d.pp.mrpcockpit.reuse.util.CommonConstants.ONE_CODELINE_TEXT) {
				if (this.getModel('ServiceVersions')) {
					return i2d.pp.mrpcockpit.reuse.util.Helper.getSpecialTextForFieldInt({sI18nID : "SOLUTION_DIALOG_MSG_VENDOR_MISSING_PO", 
						sSoHI18nID : "SOLUTION_DIALOG_MSG_VENDOR_MISSING_POSoH", sModSI18nID : "SOLUTION_DIALOG_MSG_VENDOR_MISSING_POModS", 
						iServiceVersion : this.getModel('ServiceVersions').getData().iServiceSchemaVersion});			
				}
			}
			// ONE CODE LINE <<<
			return "SOLUTION_DIALOG_MSG_VENDOR_MISSING_PO";
		}

		if ((oDataDialog.MaterialShortageSolutionType === Constants.SOLUTIONTYPE_TOR_CHANGE
				|| oDataDialog.MaterialShortageSolutionType === Constants.SOLUTIONTYPE_TOR_INCREASE || oDataDialog.MaterialShortageSolutionType === Constants.SOLUTIONTYPE_TOR_RESCHEDULE)
				&& !oDataDialog.SupplyingPlant) {
			// no supplying plant is provided for the creation of the TO
			// this scenario should not possible as unsourced cards are not provided by the backend
			return "SOLUTION_DIALOG_MSG_SUPPLYING_PLANT_MISSING_TO";
		}

		var oDataModel = this.oModelGlobal;

		// ---------------------------------------------------------------------
		// OData: Purchase Order - Schedule Lines
		// ---------------------------------------------------------------------
		var oSchedLine = {};
		var oDate = oDataDialog.MRPElementChgAvailyOrRqmtDate;
		oSchedLine.ItemID = MRPElementItem;
		oSchedLine.ScheduleLineID = MRPElementScheduleLine;
		if (!oDate) {
			oSchedLine.DeliveryDate = " ";
		} else {
			oSchedLine.DeliveryDate = oDateFormat.format(oDate) + "T00:00:00";
		}
		oSchedLine.PurchasingDocumentOrderQty = this.replaceEmptyValues((nConvertQuantity)
				.toString());
		var a = new Array();
		a.push(oSchedLine);

		// ---------------------------------------------------------------------
		// OData: Purchase Order - Items
		// ---------------------------------------------------------------------
		var oItems = {};
		oItems.ItemID = MRPElementItem;
		oItems.MaterialGoodsReceiptDuration = this.replaceEmptyValues(oDataDialog.MaterialGoodsReceiptDuration);
		oItems.PurchaseRequisition = this.replaceEmptyValues(oDataDialog.MRPElement);
		oItems.PurchaseRequisitionItem = MRPElementItem;
		oItems.MMPurchaseOrderScheduleLines = a;
		var b = new Array();
		b.push(oItems);

		// ---------------------------------------------------------------------
		// OData: Purchase Order - Header
		// ---------------------------------------------------------------------
		var url = i2d.pp.mrpcockpit.reuse.util.CommonConstants.ODATA_ENTITYSET_MM_PO_HEADER;
		var oHeader = {};
		// set indicator in case a stock transport order is to be created
		if (oDataDialog.MaterialShortageSolutionType === Constants.SOLUTIONTYPE_TOR_CHANGE
				|| oDataDialog.SolutionTyp === Constants.SOLUTIONTYPE_TOR_INCREASE
				|| oDataDialog.SolutionTyp === Constants.SOLUTIONTYPE_TOR_RESCHEDULE) {
			oHeader.StockTransportOrderIndicator = true; // internal procurement --> create TO
		} else {
			oHeader.StockTransportOrderIndicator = false; // external procurement --> create PO
		}
		oHeader.MMPurchaseOrderItems = b;

		// Create the batch
		var sODataRequestType = i2d.pp.mrpcockpit.reuse.util.CommonConstants.CRUD_CREATE;
		var oCreateOperationPO = oDataModel.createBatchOperation(url, sODataRequestType, oHeader, null);
		// Add the batch to the array of operations
		aChangeOperations.push(oCreateOperationPO);
		// Collect the batch operation
		oDataModel.addBatchChangeOperations(aChangeOperations);
		// Submit the batch - synchronous call
		oDataModel.submitBatch(oHandler.fnSuccess, oHandler.fnError, false);
		// Return 'success'
		return "";
	},

	/**
	 * Cross Navigation to Change Request App after click on CR icon in supply/demand list
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.view.S4parent
	 */
	onCRPressed : function(oEvent) {
		// The data of the currently selected supply demand item is
		// encapsulated in the event
		var oSource = oEvent.getSource();
		var oContext = oSource.getBindingContext();
		var oSdItem = oContext.getObject();
		// Now do the navigation and return any error message
		return this.navToCRApp(oSdItem);
	},

	/**
	 * Cross Navigation to Change Request App
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.view.S4parent
	 */
	navToCRApp : function(oContext) {
		var sError = "";
		var dummy = "";
		// Parameters that are transferred to the Change Request App
		var oParams = ({
			"MaterialID" : oContext.Material,
			"SupplyingPlant" : oContext.BusinessPartnerPlant,
			"MRPElementCategory" : oContext.MRPElementCategory,
			"MRPElement" : oContext.MRPElement,
			"MRPElementItem" : oContext.MRPElementItem,
			"MRPElementScheduleLine" : oContext.MRPElementScheduleLine,
			"SolutionRequestStatus" : oContext.SolutionRequestStatus,
			"Vendor" : oContext.Vendor
		});
		
	  // navigate to "manage" applications
		var fgetService = sap.ushell && sap.ushell.Container && sap.ushell.Container.getService;
		var oCrossAppNavigator = fgetService && fgetService("CrossApplicationNavigation");
		if (oCrossAppNavigator) {
			// Navigate to 'Change Request App'
			var bHash = i2d.pp.mrpcockpit.reuse.util.CommonConstants.NavToCR;
			var oPersonalizationService = sap.ushell.Container.getService("Personalization");
			var sContainerName = bHash;// "MRPCockpitNavigation." + this.sViewNumber;
			if (oPersonalizationService.getContainer) {
				oPersonalizationService.getContainer(sContainerName, {
					validity : i2d.pp.mrpcockpit.reuse.util.CommonConstants.VIEW_STATE_VALIDITY_TIME
				}).fail(function() {
					sap.ca.ui.utils.busydialog.releaseBusyDialog();
					jQuery.sap.log.error("Loading personalization data failed.");
				}).done(function(oContainer) {
					oContainer.setItemValue("Navigation", oParams);
					oContainer.save().done(function() {
						sap.ca.ui.utils.busydialog.releaseBusyDialog();
						// trigger navigation
						oCrossAppNavigator.toExternal({
		          target : { semanticObject : "MRPChangeRequest",
		                 						 action : "manage"},
		          params : {"navigationID" : bHash}
						});	
					}.bind(this));
				}.bind(this));
			} else {
			sError = this.oResourceBundle.getText("messNoLaunchpad");
			return sError;
			}
		}
	},
	
	/**
	 * Cross Navigation to Purchase Order App
	 */		
	navToPOApp : function(oPOItem) {                        
        
        if(oPOItem){          
            var sPONum = oPOItem.MRPElement;  
            var fgetService = sap.ushell && sap.ushell.Container && sap.ushell.Container.getService;
            var oCrossAppNavigator = fgetService && fgetService("CrossApplicationNavigation");    
             
            if (oCrossAppNavigator){                       
               // trigger navigation
                   oCrossAppNavigator.toExternal({
                        target: { shellHash:"PurchaseOrder-manage&/managePO/DISPLAY_PO/" + sPONum }
                });                                                                                
            }
        }
        
	},
	
	/**
	 * Cross Navigation to Sales Order App
	 */		
	navToSOApp : function(oSOItem) {                        
      	 	  
      var para = {
             FPM_START_PAGE_ID : "START",
             MODE : 3,
             BO_KEY : oSOItem.MRPElement // vbeln
      };        

      if(oSOItem){          
          var fgetService = sap.ushell && sap.ushell.Container && sap.ushell.Container.getService;
          var oCrossAppNavigator = fgetService && fgetService("CrossApplicationNavigation");               
          // trigger navigation          
          if (oCrossAppNavigator) {
        	  oCrossAppNavigator.toExternal({
                    target : {
                           semanticObject : "SalesOrder",
                           action : "maintainSFSWebClient"
                    },
                    params : para
              });              
          }
      }      
	},  

	/**
	 * Generate a hash key
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.view.S4parent
	 */
	_keyGen : function() {
		return jQuery.sap.uid();// (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
	},

	_buildUrlForChangeRequestUpdate : function(oDataDialog) {
		var url = i2d.pp.mrpcockpit.reuse.util.CommonConstants.ODATA_ENTITYSET_CHANGEREQUEST;
		// If it is an update operation - add the keys to the Update operation
		url += "(guid'";
		url += oDataDialog.MaterialShortageSolnRequest;
		url += "')";
		return url;
	},
	
	/**
	 * The MM interfaces just work with a item id length of 5 characters. The rest of the app uses 6 characters for the
	 * item id. The decision was made to just chop the first "0" of the item id in order to be compliant to the required
	 * format of MM.
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.util.CollaborationHelper
	 */
	_adaptItemIdForMM : function(sItemId) {
		var sItemIDResult = sItemId;
		if (sItemIDResult.length > 5) {
			sItemIDResult = sItemIDResult.substring(1);
		}
		return sItemIDResult;
	},

	/**
	 * This method updates one or more Change Request Documents in a batch operation.
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.util.CollaborationHelper
	 */
	updateChangeRequestDocumentsBatch : function(aChangeRequests, oHandler) {
		
		var aChangeOperations = new Array();
		// Define the OdataRequestType for an update call
		var sODataRequestType = i2d.pp.mrpcockpit.reuse.util.CommonConstants.CRUD_UPDATE;
		
		var oDataModel = this.oModelGlobal;
		oDataModel.setUseBatch(true);
		oDataModel.clearBatch();			  		
		
		for (var i=0; i<aChangeRequests.length; i++){	
//		  // Check mandatory data in the model
//			if (!aChangeRequests[i].MaterialShortageSolnRequest) {
//				// A mandatory field is missing
//				return "SOLUTION_DIALOG_MSG_MANDATORY_KEY_DATA_MISSING";
//			}			
  	  //add Items to batch Request
			var sItemPath = i2d.pp.mrpcockpit.reuse.util.CommonConstants.ODATA_ENTITYSET_CHANGEREQUEST;
			// If it is an update operation - add the keys to the Update operation
			sItemPath += "(guid'";
			sItemPath += aChangeRequests[i].MaterialShortageSolnRequest;
			sItemPath += "')";
			
		  // Create the entries
			var oEntry = {};
			oEntry.SolutionRequestStatus = i2d.pp.mrpcockpit.reuse.util.CommonConstants.REQUEST_STATUS_REQUESTED;
			
	    // Create the parameters
		  var oParams = {};
		  oParams.sETag = "W/\"'" + aChangeRequests[i].ChangeStateID + "'\"";
			
		  // Create the batch
			var oBatchOperation = oDataModel.createBatchOperation(sItemPath, sODataRequestType, oEntry, oParams);				
		  // Collect the batch operation
			oDataModel.addBatchChangeOperations([oBatchOperation]);
		}
								
		// Submit the batch - synchronous call
		oDataModel.submitBatch(oHandler.fnSuccess, oHandler.fnError, false);
		// Return 'success'. Method always returns success as in case of an error corresponding callback is
		// executed
		return "";		
	},
	
		
		/**
		 * This method updates a 'Planned Order' to the backend. DATS has to be provided as "yyyy-MM-ddT00:00:00"
		 * Example Result: "QuickViews(MRPElement='6385033',MRPElementItem='000001',MRPElementScheduleLine='0000',MRPElementCategory='SB')"
		 * 
		 * @return {string} empty for success, string if exception occured
		 * @memberOf i2d.pp.mrpcockpit.reuse.util.CollaborationHelper
		 */
	updatePlannedOrderBatch : function(oDataDialog, oHandler) {

			var aChangeOperations = new Array();
			// Date format object for conversion purposes			
			var oDateFormat = sap.ui.core.format.DateFormat.getDateTimeInstance({
				pattern : "yyyy-MM-dd"
			});
			var oDataModel = this.oModelGlobal;
			oDataModel.setUseBatch(true);
			oDataModel.clearBatch();

			// ---------------------------------------------------------------------
			// Check mandatory data in the model
			// ---------------------------------------------------------------------
			if (!oDataDialog.MRPElement || !oDataDialog.MRPElementItem || !oDataDialog.MaterialShortageSolutionType
					|| !oDataDialog.MaterialID || !oDataDialog.OrderFinishDate || !oDataDialog.ChangedOrderFinishDate 
					|| !oDataDialog.MRPElementOriginalTotalQty || !oDataDialog.MRPElementChangedTotalQuantity) {
				// A mandatory field is missing
				return "SOLUTION_DIALOG_MSG_MANDATORY_KEY_DATA_MISSING";
			}

			// Adjust the item id that is required as key for the MM call.
			var sItemId = this._adaptItemIdForMM(oDataDialog.MRPElementItem);

			// What should be done - only update planned order or follow up action
			var oPlanChange = false;
			var oPlanConvert = false;
			if ((oDataDialog.OrderFinishDate === oDataDialog.ChangedOrderFinishDate) &&
					(oDataDialog.MRPElementOriginalTotalQty === oDataDialog.MRPElementChangedTotalQuantity)) {
			  	// if quantity and date are not changed - only make conversion
			  	oPlanChange = false;
			} else {
          oPlanChange = true;
			};		
			if (oDataDialog.DialogActivity === i2d.pp.mrpcockpit.reuse.util.CommonConstants.SolutionDialogActivity_EXECUTE) {
			  	// if activity = 000 - only PlanChange - else make conversion too
			  	oPlanConvert = false;
			} else {
          oPlanConvert = true;
			};				
			
			var url = i2d.pp.mrpcockpit.reuse.util.CommonConstants.ODATA_ENTITYSET_QUICKVIEWS;
			url += "(MRPElement='";
			url += oDataDialog.MRPElement;
			url += "',MRPElementItem='";
			url += sItemId;
			url += "',MRPElementScheduleLine='";
			url += oDataDialog.MRPElementScheduleLine;	
			url += "',MRPElementCategory='";
			url += oDataDialog.MRPElementCategory;				
			url += "')";

			
			// First backend call when update of planned order is requested
			if (oPlanChange === true) {
				oDataDialog.QuickviewCategory = i2d.pp.mrpcockpit.reuse.util.CommonConstants.QUICKVIEW_CAT.CHANGE_PLANORD;
		
		  	var oEntry = {};
	  		oEntry.MRPElement = oDataDialog.MRPElement;
	  		var oDate = oDataDialog.ChangedOrderFinishDate;
	  		oEntry.OrderFinishDate = oDateFormat.format(oDate) + "T12:00:00";
	  		oEntry.TotalQuantity = (oDataDialog.MRPElementChangedTotalQuantity).toString();
	   		oEntry.QuickviewCategory = oDataDialog.QuickviewCategory;
		  	oEntry.PlannedOrder = oDataDialog.PlannedOrder;
	  		// Create the batch
	  		var sODataRequestType = i2d.pp.mrpcockpit.reuse.util.CommonConstants.CRUD_UPDATE;
	  		var oChangeOperation = oDataModel.createBatchOperation(url, sODataRequestType, oEntry, null);
	  		// Add the batch to the array of operations
	  		aChangeOperations.push(oChangeOperation);

		  	// Collect the batch operation
	  		oDataModel.addBatchChangeOperations(aChangeOperations);
	  		// Submit the batch - synchronous call
	  		oDataModel.submitBatch(oHandler.fnSuccess, oHandler.fnError, false);
	    };		

	    var aChangeOperations = [];
	    oDataModel.clearBatch();
	    
			// Second backend call when conversion of planned order is requested
			if (oPlanConvert === true) {
				switch (oDataDialog.DialogActivity) {
					case i2d.pp.mrpcockpit.reuse.util.CommonConstants.SolutionDialogActivity_EXECUTE :
						// change Planned Order
						oDataDialog.QuickviewCategory = i2d.pp.mrpcockpit.reuse.util.CommonConstants.QUICKVIEW_CAT.CHANGE_PLANORD;
						break;
					case i2d.pp.mrpcockpit.reuse.util.CommonConstants.SolutionDialogActivity_REQ_CONVERT :
						// change Planned Order + convert to Purchase Requisition
						oDataDialog.QuickviewCategory = i2d.pp.mrpcockpit.reuse.util.CommonConstants.QUICKVIEW_CAT.CONV_REQ;
						break;
					case i2d.pp.mrpcockpit.reuse.util.CommonConstants.SolutionDialogActivity_PROC_CONVERT :
						// change Planned Order + convert to Process Order
						oDataDialog.QuickviewCategory = i2d.pp.mrpcockpit.reuse.util.CommonConstants.QUICKVIEW_CAT.CONV_PROC;
						break;
					case i2d.pp.mrpcockpit.reuse.util.CommonConstants.SolutionDialogActivity_PROD_CONVERT :
						// change Planned Order + convert to Production Order
						oDataDialog.QuickviewCategory = i2d.pp.mrpcockpit.reuse.util.CommonConstants.QUICKVIEW_CAT.CONV_PROD;
						break;
				};	
		
		  	var oEntry = {};
	  		oEntry.MRPElement = oDataDialog.MRPElement;
	  		var oDate = oDataDialog.ChangedOrderFinishDate;
	  		oEntry.OrderFinishDate = oDateFormat.format(oDate) + "T12:00:00";
	  		oEntry.TotalQuantity = (oDataDialog.MRPElementChangedTotalQuantity).toString();
	   		oEntry.QuickviewCategory = oDataDialog.QuickviewCategory;
		  	oEntry.PlannedOrder = oDataDialog.PlannedOrder;
	  		// Create the batch
	  		var sODataRequestType = i2d.pp.mrpcockpit.reuse.util.CommonConstants.CRUD_UPDATE;
	  		var oChangeOperation = oDataModel.createBatchOperation(url, sODataRequestType, oEntry, null);
	  		// Add the batch to the array of operations
	  		aChangeOperations.push(oChangeOperation);

		  	// Collect the batch operation
	  		oDataModel.addBatchChangeOperations(aChangeOperations);
	  		// Submit the batch - synchronous call
	  		oDataModel.submitBatch(oHandler.fnSuccess, oHandler.fnError, false);
	    };	    
					
		// Return 'success'			
			return "";
		}
	
};

}; // end of i2d/pp/mrpcockpit/reuse/util/CollaborationHelper.js
if ( !jQuery.sap.isDeclared('i2d.pp.mrpcockpit.reuse.view.AoRHandler') ) {
jQuery.sap.declare("i2d.pp.mrpcockpit.reuse.view.AoRHandler");





i2d.pp.mrpcockpit.reuse.view.AoRHandler = {

		i18NCommonReuseModel : new sap.ui.model.resource.ResourceModel({
			bundleUrl : jQuery.sap.getModulePath("i2d.pp.mrpcockpit.reuse") + "/" + "i18n/i18n.properties"
		}),	


		//Method called by the apps to start the AoRMainDialog
		openOnboardingDialog : function(evt, oSelModel, fCallBackFunction, oController) {
			this.openAoRMainDialog(evt, true, oSelModel, fCallBackFunction, null, false, oController);
		},

		//Method called by the apps to start the AoRWelcomeDialog for the first Onboarding
		openFirstOnboardingDialog : function(oSelModel, fCallBackFunction, oController) {
			this.openAoRWelcomeDialog(null, oSelModel, fCallBackFunction, oController);
		},



		// open AoRAddDialog (old name:Select Dialog)
		openAoRAddDialog : function(evt, oSelModel, fCallBackFunction, aAORData, bComesFromWelcome, oController) {

			var effectiveUrl = jQuery.sap.getModulePath("i2d.pp.mrpcockpit.reuse") + "/" + "i18n/i18n.properties";
			var oBundle = new sap.ui.model.resource.ResourceModel({
				bundleUrl : effectiveUrl
			});
			
			// search function - called when the search button is pressed on the dialog 
			var fnSearch = function(oEvt) {
				var sValue = oEvt.getParameter("value");
				var oFilter = new sap.ui.model.Filter("MRPControllerName", sap.ui.model.FilterOperator.Contains, sValue);
				var oBinding = oEvt.getSource().getBinding("items");
				oBinding.filter([oFilter]);
			};

			var that = this;

			// open the AoRMainDialog after closing the AoRAddDialog
			var fnConfirm = function(oEvent) {
				if (oEvent) {
					this.openAoRMainDialog(oEvent, false, oSelModel, fCallBackFunction, aAORData, bComesFromWelcome, oController);
				}
			}.bind(this);

			// navigate to launchpad when the user cancel the welcome dialog (no AoR is set)
			var fnClose = function(oEvent) {
				if (oEvent) {
					if (bComesFromWelcome) {
						var fgetService = sap.ushell && sap.ushell.Container && sap.ushell.Container.getService;
						this.oCrossAppNav = fgetService && fgetService("CrossApplicationNavigation");

						var href2 = (this.oCrossAppNav && this.oCrossAppNav.toExternal({
							target : {
								shellHash : "#"
							}
						})) || "";
					} else {
						if(fCallBackFunction) {
							fCallBackFunction(i2d.pp.mrpcockpit.reuse.util.CommonConstants.AOR_DEFINITION_CANCELED);
						}
					} 
				}
			}.bind(this);

			//create the AoRAddDialog

				this.oMRPSDialogView = new sap.ui.view({
					viewName : "i2d.pp.mrpcockpit.reuse.view.AoRAddDialog",
					type : sap.ui.core.mvc.ViewType.XML
				});


			// get the dialog instance from the view
			var oDialog = this.oMRPSDialogView.byId("DLG_SELECT");

			// set model to dialog/view
			var oDialogModel = {
					closeFunction : fnClose,
					confirmFunction : fnConfirm
			};

			// Workaround to remove the "No Data" label in the first call (Fix is in UI5 1.20)
			oDialog._list.setShowNoData(false);

			oDialog._list.removeSelections(true);
			oController.getView().addDependent(oDialog);
			oDialog.open();
			var oModel = new sap.ui.model.json.JSONModel(oDialogModel);
			oDialog.setModel(oModel);	
			oDialog.setModel(oBundle, "commondialogs_i18n");
			oDialog.setTitle(oDialog.getModel('commondialogs_i18n').getResourceBundle().getText("DIALOG_SELECT"));

			// Set Model after Open to see the loading indicator (Can be changed after UI5 1.20)
			oDialog.setModel(oSelModel, "items");
			var itemsBinding = oDialog.getBinding("items");
			if(itemsBinding.aFilters.length != 0) {
				oDialog.getBinding("items").filter([]);
			}

		},

		// open AoRMainDialog (here you can see your selected AoRs and can add or delete AoRs)
		openAoRMainDialog : function(oEvent, readFromBackend, oSelModel, fCallBackFunction, aAORData, bComesFromWelcome, oController) {

			var effectiveUrl = jQuery.sap.getModulePath("i2d.pp.mrpcockpit.reuse") + "/" + "i18n/i18n.properties";
			var oBundle = new sap.ui.model.resource.ResourceModel({
				bundleUrl : effectiveUrl
			});

			var that = this;

			if (!aAORData) {
				aAORData = [];
			}
			this.oSelModel = oSelModel;
			this.oSelectedItemsJSON = new sap.ui.model.json.JSONModel();
			jQuery.sap.require("sap.m.MessageToast");

			//Read AoR Data from the backend
			if (readFromBackend) {
				oSelModel.read("/MRPControllers", null, {
					"$filter" : "(AreaOfResponsibility eq true)"
				}, true, function(oData, oResponse) {
					that.oSelectedItemsJSON.setData({
						data : oData.results
					});
					aAORData = oData.results;
				});

			} else {

				this.oSelectedItems = [];
				this.oSelectedItems = oEvent.getParameter("selectedContexts");

				//Add all new selected Items to the AORData
				if (this.oSelectedItems) {
					for ( var i = 0; i < this.oSelectedItems.length; i++) {
						var bFound = false;
						for ( var j = 0; j < aAORData.length; j++) {
							var oTempObject = this.oSelectedItems[i].getObject();

							if(aAORData[j].MRPControllerID === oTempObject.MRPControllerID && 
									aAORData[j].MRPPlant === oTempObject.MRPPlant) {
								bFound = true;
								break;
							}

						}
						if(!bFound){
							aAORData.push(this.oSelectedItems[i].getObject());
						}

					}
					//Store AORData in JSON for binding to the list
					this.oSelectedItemsJSON.setData({
						data : aAORData
					});
				}

			}

			// navigate to launchpad when the user cancel the welcome dialog (no AoR is set)
			var fnClose = function(oResult) {
				if (bComesFromWelcome) {
					var fgetService = sap.ushell && sap.ushell.Container && sap.ushell.Container.getService;
					this.oCrossAppNav = fgetService && fgetService("CrossApplicationNavigation");

					var href2 = (this.oCrossAppNav && this.oCrossAppNav.toExternal({
						target : {
							shellHash : "#"
						}
					})) || "";
				} else {
					if(fCallBackFunction) {
						fCallBackFunction(i2d.pp.mrpcockpit.reuse.util.CommonConstants.AOR_DEFINITION_CANCELED);
					}
				}  
				fnCloseDialog();
			}.bind(this);

			//Open AoRAddDialog
			var fnOpenSelDialog = function(oEvent) {
				if (oEvent) {
					that.openAoRAddDialog(oEvent, that.oSelModel, fCallBackFunction, aAORData, bComesFromWelcome, oController);
				}
			};

			//Send AoRData to the backend and close the dialog
			var fnConfirmDialog = function(oEvent) {
				if (oEvent) {
					that.sendAoRtoBackend(oEvent, that.oSelectedItemsJSON, fCallBackFunction, that.sSuccessMessage, oSelModel);
					fnCloseDialog();
				}
			};

			//Create AoRMainDialog

				this.oMRPAORDialogView = new sap.ui.view({
					viewName : "i2d.pp.mrpcockpit.reuse.view.AoRMainDialog",
					type : sap.ui.core.mvc.ViewType.XML
				});

			// set model to dialog/view
			var oDialogModel = {
					closeFunction : fnClose,
					addFunction : fnOpenSelDialog,
					confirmFunction : fnConfirmDialog
			};

			//Create confirm button for the dialog
			var oConfirmBtn = new sap.m.Button({
				press : fnConfirmDialog,
				text : ""
			});

			//Create cancel button for the dialog
			var oCancelBtn = new sap.m.Button({
				press : fnClose,
				text : ""
			});

			//Create a dialog for the AoRMainDialog
			var oDialog = sap.ui.getCore().byId("DLG_AOR_ID");

			//Destroy dialog before creating a new one 
			if (oDialog !== undefined) {
				oDialog.removeAllContent();
				oDialog.destroy();

			}

			//Create the AoRMainDialog 
			oDialog = new sap.m.Dialog("DLG_AOR_ID", {
				content : [this.oMRPAORDialogView],
				title : "",
				beginButton : oConfirmBtn,
				endButton : oCancelBtn
			});

			var oModel = new sap.ui.model.json.JSONModel(oDialogModel);
			oDialog.setModel(oModel);
			oDialog.setModel(this.oSelectedItemsJSON, "items");
			oDialog.setModel(oBundle, "commondialogs_i18n");
			oDialog.getBeginButton().setText(oDialog.getModel('commondialogs_i18n').getResourceBundle().getText("BUTTON_OK"));
			oDialog.getEndButton().setText(oDialog.getModel('commondialogs_i18n').getResourceBundle().getText("BUTTON_CANCEL"));
			oDialog.setTitle(oDialog.getModel('commondialogs_i18n').getResourceBundle().getText("DIALOG_AOR"));


			var fnCloseDialog = function(oEvent) {
				oDialog.close();

			};

			this.sSuccessMessage = oDialog.getModel('commondialogs_i18n').getResourceBundle().getText("SEND_AOR_SUCCESS_MSG");

			oController.getView().addDependent(oDialog);
			oDialog.open();

		},

		// Welcome Dialog
		openAoRWelcomeDialog : function(evt, oSelModel, fCallBackFunction, oController) {

			var effectiveUrl = jQuery.sap.getModulePath("i2d.pp.mrpcockpit.reuse") + "/" + "i18n/i18n.properties";
			var oBundle = new sap.ui.model.resource.ResourceModel({
				bundleUrl : effectiveUrl
			});
			
			// the dialog close callback function, send the dialog
			// results for further process
			var fnClose = function(oResult) {

			};

			var that = this;

			//Open AoRAddDialog
			var fnOpenAoRAddDialog = function(oEvent) {
				if (oEvent) {
					that.openAoRAddDialog(oEvent, oSelModel, fCallBackFunction, null,  true, oController);
				}
			};

			//Create AoRWelcomeDialog
				this.oMRPWLCDialogView = new sap.ui.view({
					viewName : "i2d.pp.mrpcockpit.reuse.view.AoRWelcomeDialog",
					type : sap.ui.core.mvc.ViewType.XML
				});


			// get the dialog instance from the view
			var oDialog = this.oMRPWLCDialogView.byId("DLG_WLC");

			// set model to dialog/view
			var oDialogModel = {
					title : oBundle.getResourceBundle().getText("DIALOG_WELCOME"),
					text : oBundle.getResourceBundle().getText("DIALOG_WELCOME_TEXT"),
					closeFunction : fnClose,
					fnOpenAoRAddDialog : fnOpenAoRAddDialog
			};

			var oModel = new sap.ui.model.json.JSONModel(oDialogModel);
			oDialog.setModel(oModel);
			oDialog.setModel(oBundle, "commondialogs_i18n");
			//oDialog.setText(oDialog.getModel('commondialogs_i18n').getResourceBundle().getText("DIALOG_WELCOME_TEXT"));
			//oDialog.setTitle(oDialog.getModel('commondialogs_i18n').getResourceBundle().getText("DIALOG_WELCOME"));

			oController.getView().addDependent(oDialog);
			oDialog.open();

		},

		sendAoRtoBackend : function(oEvent, oSelectedItemsJSON, fCallBackFunction, successMessage, oModel) {

			//var oModel = oSelModel;//new sap.ui.model.odata.ODataModel("/sap/opu/odata/sap/PP_MRP_COCKPIT_SRV");
			
			var oMRPControllers = [];

			// Create MRPController/Plant Items
			if (oSelectedItemsJSON) {
				for ( var i = 0; i < oSelectedItemsJSON.oData.data.length; i++) {
					var oMRPController = {};
					oMRPController.MRPPlant = oSelectedItemsJSON.oData.data[i].MRPPlant;
					oMRPController.MRPControllerID = oSelectedItemsJSON.oData.data[i].MRPControllerID;
					oMRPControllers.push(oMRPController);

				}
			}

			var oAreaOfResponsibility = {};
			oAreaOfResponsibility.AreaOfResponsibility_To_MRPControllers = oMRPControllers;

			// Send data to the backend
			oModel.create('/AreasOfResponsibility', oAreaOfResponsibility, null, function() {
				// Create successful;
				jQuery.sap.require("sap.m.MessageToast");
				sap.m.MessageToast.show(successMessage);

				if(fCallBackFunction) {
					fCallBackFunction();
				}

			}, function() {
				//Create failed;
					if(fCallBackFunction) {
						fCallBackFunction(i2d.pp.mrpcockpit.reuse.util.CommonConstants.AOR_DEFINITION_FAILED);
					}
				
			});

		}


};

}; // end of i2d/pp/mrpcockpit/reuse/view/AoRHandler.js
if ( !jQuery.sap.isDeclared('i2d.pp.mrpcockpit.reuse.view.S3parent') ) {
  jQuery.sap.declare('i2d.pp.mrpcockpit.reuse.view.S3parent');
// add required libs
jQuery.sap.require('sap.ca.scfld.md.controller.BaseDetailController'); // unlisted dependency retained


jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained







sap.ca.scfld.md.controller.BaseDetailController.extend("i2d.pp.mrpcockpit.reuse.view.S3parent", {

	constructor : function() {

		sap.ca.scfld.md.controller.BaseDetailController.apply(this, arguments);

		// remember the base class onInit implementation to execute it later
		var onInit = this.onInit;

		this.onInit = function() {
			// Initialize the i18n model before the oData model is initialized by the base controller onInit
			// this is important to avoid "i18n model not initialized" errors in the formatters
			var oBundle = new sap.ui.model.resource.ResourceModel({
				bundleName : "i2d.pp.mrpcockpit.reuse.i18n.i18n"
			});
			// get the versions model (that was initialized in s2.parent controller) and bind it to the view
			var oVersion = this.oApplicationImplementation.getApplicationModel("ServiceVersions");
			this.getView().setModel(oVersion, "ServiceVersions");
			this.getView().setModel(oBundle, "Common_i18n");

			onInit.apply(this, arguments);
		};

	},

	/**
	 * This method is called by the framework when initializing the S3 view.
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.view.S3parent
	 */
	onInit : function() {

		// do the Supply Demand Items Table binding dynamically (e.g. to {Material_To_SupplyDemandItems})
		var sdItemTable = this.getView().byId("SDItems");
		var oTemplate = sdItemTable.getItems()[0];
		sdItemTable.removeItem(oTemplate);

		// old solution
		/*
		 * sdItemTable.bindAggregation("items", { path : this.getDetailListNavProperty(), template : oTemplate });
		 */

		// reserved for a new button design
		// (factory pattern to add class to a table row during binding)
		sdItemTable.bindAggregation("items", this.getDetailListNavProperty(), function(sId, oCtx) {
			var oClone = oTemplate.clone(sId);

			var value = parseFloat(oCtx.getProperty("MRPAvailableQuantity"));
			// below critical quantity, the material is below safety stock
			var valueCritical = parseFloat(oCtx.getProperty("MaterialShortageCriticalQty"));
			// below threshold, the material is short
			var valueThreshold = parseFloat(oCtx.getProperty("MaterialShortageThresholdQty"));
			// Get the current object that is used
			var oObject = oCtx.getObject();
			
			// remove all style classes
			oClone.removeStyleClass("sapMRPShortage");
			oClone.removeStyleClass("sapMRPShortageSolved");
			oClone.removeStyleClass("sapMRPElementChanged");
			oClone.removeStyleClass("sapMRPShortageAccepted");
			oClone.removeStyleClass("sapMRPShortageSafetyStock");
			
			if (oObject.MRPAvailability === i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_AVAILABILITY_ACCEPTED) {
				// Shortage was accepted.
				oClone.addStyleClass("sapMRPShortageAccepted");

			} else {
				// Standard behavior we are either in the initial call or in the preview.
				if (oObject.ChangedMrpElement && oObject.ChangedMrpElement === true) {
					// This is the changed element in the preview. It will be highlighted separately.
					oClone.addStyleClass("sapMRPElementChanged");
				} else if ((value < valueThreshold)
						&& (i2d.pp.mrpcockpit.reuse.util.CommonFormatter.isStockItem(oObject.MRPElementCategory) || (Number(oObject.MRPElementOpenQuantity) < 0))) {
					// material is short, below the threshold AND (is the stock item or item is a requirement)
					oClone.addStyleClass("sapMRPShortage");
				} else if ((value < valueCritical)
						&& (i2d.pp.mrpcockpit.reuse.util.CommonFormatter.isStockItem(oObject.MRPElementCategory) || (Number(oObject.MRPElementOpenQuantity) < 0))) {
					// Value is below safety stock AND (is the stock item or item is a requirement)
					oClone.addStyleClass("sapMRPShortageSafetyStock");
				} else if ((value >= valueCritical) && (oObject.InitialShortage && oObject.InitialShortage === true)) {
					// This element was initially below safety stock but has been increased in the preview.
					oClone.addStyleClass("sapMRPShortageSolved");
				}
			}
			
			return oClone;
		});

		// set Navigation Button on page
		var oPage = this.getView().getContent()[0];
		oPage.setShowNavButton(jQuery.device.is.phone);
		// Register the handler for routing events
		this.oRouter.attachRoutePatternMatched(this._onRoutePatternMatched, this);
		// Initialize the chart
		this.initChart();
		this.resizeHandlerParent = [];
		this.resizeHandlerPage = [];
		this.resizeTimer = [];
		this.isChartVisible = false;
		// handle special logic of s3 for master list refresh
		this.oApplicationFacade.registerOnMasterListRefresh(this.onMasterRefresh, this);

		// if we are not on desktop we do not show the display fact sheet button
		if (!sap.ui.Device.system.desktop) {
			var factSheetButton = this.getView().byId("factSheetButton");
			if (factSheetButton !== undefined) {
				factSheetButton.setVisible(false);
			}
		}

		var changedItems = null;
		changedItems = this.oApplicationFacade.getApplicationModel("changedItems");
		if (!changedItems) {
			changedItems = new sap.ui.model.json.JSONModel();
			this.oApplicationFacade.setApplicationModel("changedItems", changedItems);
		}

	},

	/**
	 * Subscribe events that are used for the communication between this controller (S3) and the solution dialogs called
	 * via QuickView
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.view.S3parent
	 */
	_subscribeEvents : function() {
		var bus = sap.ui.getCore().getEventBus();
		// --------------------------------------
		// Subscribe events for the current view
		// --------------------------------------
		bus.subscribe(i2d.pp.mrpcockpit.reuse.util.CommonConstants.EVENT_CHANNELID_CARD_DIALOG_DATACHANGED,
				i2d.pp.mrpcockpit.reuse.util.CommonConstants.EVENT_EVENTID_OK, this._onDataChanged, this);

	},

	/**
	 * Unsubscribe events that have been registered before. Info: Required in context of Fiori Launchpad when single apps
	 * can be run several times. We run into major problems if events haven't been removed correctly!
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.view.S3parent
	 */
	_unsubscribeEvents : function() {
		var bus = sap.ui.getCore().getEventBus();
		// De-Register first
		bus.unsubscribe(i2d.pp.mrpcockpit.reuse.util.CommonConstants.EVENT_CHANNELID_CARD_DIALOG_DATACHANGED,
				i2d.pp.mrpcockpit.reuse.util.CommonConstants.EVENT_EVENTID_OK, this._onDataChanged, this);

	},

	/**
	 * Handles the OK-Event of the closing solution dialog
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.view.S3parent
	 */
	_onDataChanged : function(channelId, eventId, data) {
		if (data && data.model.cardModel) {
			var msg;
			if (data.model.cardModel.oData.msg) {
				msg = data.model.cardModel.oData.msg;
			} else {
				msg = "Data has been saved.";
			}
			// Show the message toast
			sap.ca.ui.message.showMessageToast(msg);
			// set the context and force a backend call to update the data
			this.refreshSDList();
		}
	},

	/**
	 * Handles the event MasterRefresh; This allows us to reload the master list only when the user has explicitly
	 * refreshed it or for a navigation
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.view.S3parent
	 * @param oEvent
	 */
	onMasterRefresh : function(oEvt) {
		if (oEvt.getParameter("bManualRefresh") === true) {
			// a master List refresh was triggered by clicking the refresh button or doing a "pull to refresh"
			if (oEvt.getParameter("bAutoNavigation") === true) {
				// the master list refresh caused a navigation to the detail screen
			} else {
				// no navigation to the detail screen happened because the correct detail was already displayed
				// set the context and force a backend call
				this.refreshSDList();

				// change also the header of the detail view
				this._changeModel();
			}
		} else {
			// a master list refresh was done by the scaffolding e.g. during a back end search or after getting items
			// of a growing list
		}

		// highlight the currently selected master list record in the supply demand item list
		if (this.sdItemHighlightingNeeded) {
			this._highlightSdItemTableRecord.call(this);
		}

	},

	/**
	 * Highlights the currently active master list record in the supply demand items table in case the app was called by a
	 * deep link url, the detail and the master call are triggered in parallel and the detail call might be back earlier,
	 * therefore we potentially have to highlight the selection of the supply demand item list as soon as the master call
	 * is back
	 */
	_highlightSdItemTableRecord : function() {

		var sdItems = this.getView().byId("SDItems");
		var bindingContext = sdItems.getBindingContext();

		// object contains the data of entry that is currently
		// selected in the master list
		var object = bindingContext.getObject();

		// comparing the items only makes sense when there is a master list items
		// sometimes there is no master list item, e.g. we use a direct link to the app
		// which also contains the binding context of the detail view and the detail
		// view data is loaded before the master list is loaded. In this case no item is marked
		if (object !== undefined) {

			// coloring of the selected item
			var aItems = sdItems.getItems();

			var itemObject = null;
			var i;
			for (i = 0; i < aItems.length; i++) {

				itemObject = aItems[i].getBindingContext().getObject();

				// call app specific object compare functions (see app's S3 controller)
				if (this.compareKeys(itemObject, object)) {
					aItems[i].addStyleClass("sapMRPSDItemSelected");

					// future requirement
					// scroll to selected uncovered demand item in s3 table
					// var domref = aitems[i].getdomref();
					// if (!sap.ui.device.support.touch && domref !== null) {
					// domref.scrollintoview(true);
					// }
				} else {
					aItems[i].removeStyleClass("sapMRPSDItemSelected");
				}
			}
		}

	},

	/**
	 * Handles the event attachRoutePatternMatched; Sets BindingContext of the view to read/show the detail data belonging
	 * to the selected master list item by triggering an OData ("Detail")Call. Attention: This handler just ensures that
	 * the event belongs to ANY S3 detail view. But this handler cannot ensure that this event belongs to this particular
	 * S3 view. For this purpose, the sub-class controller has to take care for this condition and then just call this
	 * method if this check has been passed successfully. So normally this method in overwritten in the sub classes.
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.view.S3parent
	 * @param oEvent
	 */
	_onRoutePatternMatched : function(oEvent) {
		var oView = this.getView();
		// The name of the event is the indicator from where the event is triggered
		if (oEvent.getParameter("name") === i2d.pp.mrpcockpit.reuse.util.CommonConstants.ROUTING.DETAIL) {
			// Ensure that there is no handler registered for 'request completed'
			oView.getModel().detachRequestCompleted(this._onModelLoaded, this);
			// Register the handler for a OData data read
			oView.getModel().attachRequestCompleted(this._onModelLoaded, this);
			// De-Register first (just for safety reasons)
			this._unsubscribeEvents();
			// Register events
			this._subscribeEvents();
			// Set the context for the view
			var context = new sap.ui.model.Context(oView.getModel(), '/' + oEvent.getParameter("arguments").contextPath);
			oView.setBindingContext(context);
			// If the Material Info tab is available - read data
			var matInfoPage = this.getView().byId("infoTabContainer");
			if (matInfoPage !== undefined) {
				matInfoPage
						.bindElement('/' + oEvent.getParameter("arguments").contextPath + '/' + this.getInfoTabNavProperty());
			}

			// Save navParameters from configured "pattern" :
			this.navParameter = oEvent.getParameter("arguments");
			// decode attributes of navParameter
			for ( var index in this.navParameter) {
				this.navParameter[index] = decodeURIComponent(this.navParameter[index]);
			}

			// exchange the model JSON <--> ODATA depending on the availability
			this._changeModel();

		} else {
			// DE-Register the event handlers because we are leaving S3 now
			this._unsubscribeEvents();
			// Detach the handler if we leave the view...
			oView.getModel().detachRequestCompleted(this._onModelLoaded, this);
			// Destroy the Quick Views to avoid duplicate ID errors
			i2d.pp.mrpcockpit.reuse.util.QuickViewHelper.destroyQuickViews(this);
		}
	},

	/**
	 * This method is used to navigate from S3 to S4
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.view.S3parent
	 * @param oDate
	 */
	navToSolutionView : function(oDate) {
		// generically read the current binding context and create a navigation object based on the keys of the
		// masterlist
		var bindingContextObject = this.getView().getBindingContext().getObject();
		var navigationObject = {};
		var masterListKeys = this.oApplicationFacade.oApplicationImplementation.aMasterKeys;

		for ( var index in masterListKeys) {
			// because it is not allowed to have empty data we check this in and set a blank if there is no data for
			// an attribute
			if (bindingContextObject[masterListKeys[index]] !== "") {
				// only strings and not objects are allowed
				if (!(bindingContextObject[masterListKeys[index]] instanceof Date)) {
					navigationObject[masterListKeys[index]] = bindingContextObject[masterListKeys[index]];
				} else {
					// convert dates to string
					// remove the last 5 characters from the converted ISO string (2014-04-11T12:00:00.000Z)
					// we need to get rid of the Z as OData cannot handle that. Furthermore the milliseconds cannot
					// be handled by the Internet Explorer and are not necessary
					navigationObject[masterListKeys[index]] = bindingContextObject[masterListKeys[index]].toISOString().slice(0,
							-5);
				}
			} else {
				navigationObject[masterListKeys[index]] = " ";
			}
		}

		// add the attributes that are specific for s4
		var oChart = this.getView().byId("chart");
		navigationObject.ChartScrollPos = (oChart) ? oChart.getShiftLeft() : 0;
		// Set a navigation parameter that indicates whether S4 shall show the table or the chart after
		// initialization
		var oChartContainer = this.getView().byId("chartContainer");
		navigationObject.DisplayInChart = (oChartContainer.getVisible()) ? true : false;
		// Set the state parameter that contains the ID of the view state in the backend
		navigationObject.stateID = this.navParameter.stateID;
		// pass the detail list nav prob in order to read the data for the chart
		navigationObject.DetailListNavProperty = this.getDetailListNavProperty();

		// Pass the following values to the solution view:
		var routeName;

		var backendVersion = i2d.pp.mrpcockpit.reuse.util.InteroperabilityHelper
				.getServiceSchemaVersion(this.oApplicationFacade);

		if (backendVersion === 1) {

			// Wave 3
			routeName = i2d.pp.mrpcockpit.reuse.util.CommonConstants.ROUTING.SUB_DETAIL_WAVE3;
			var oShortagePeriod = i2d.pp.mrpcockpit.reuse.util.Wave3Helper.calcShortagePeriod.call(this, oDate);
			// there is no shortage on the given date -> do nothing
			if (!oShortagePeriod.firstDate || !oShortagePeriod.lastDate || !oShortagePeriod.shortageItem) {
				return;
			}
			navigationObject.MaterialShortageStartDate = oShortagePeriod.firstDate.toISOString().slice(0, -5);
			navigationObject.MaterialShortageEndDate = oShortagePeriod.lastDate.toISOString().slice(0, -5);

		} else {
			// Wave 5 ...
			routeName = i2d.pp.mrpcockpit.reuse.util.CommonConstants.ROUTING.SUB_DETAIL;

			// The SelectedSupDemItemDate is the date of the supply demand item that was selected in order to
			// navigate to the solution view.
			// we remove the last 5 characters from the converted ISO string (2014-04-11T12:00:00.000Z)
			// we need to get rid of the Z as OData cannot handle that. Furthermore the milliseconds cannot
			// be handled by the Internet Explorer and are not necessary
			navigationObject.SelectedSupDemItemDate = oDate.toISOString().slice(0, -5);
		}

		// we have to encode the attributes of navigationObject
		for ( var attribute in navigationObject) {
			navigationObject[attribute] = encodeURIComponent(navigationObject[attribute]);
		}

		var bReplace = !jQuery.device.is.phone;
		this.oRouter.navTo(routeName, navigationObject, bReplace);

	},

	/**
	 * This method is the handler for the stock control click event. It extracts the Availability Date from the selected
	 * supply demand item and starts the navigation to the solution view
	 * 
	 * @param oEvent
	 * @memberOf i2d.pp.changerequest.details.view.S3parent
	 */
	selectShortage : function(oEvent) {
		var oTableItem = oEvent.getSource();
		var oContext = oTableItem.getBindingContext();
		var oSDItem = oContext.getObject();
		var oDate = oSDItem.MRPElementAvailyOrRqmtDate;
		if (oDate) {
			this.navToSolutionView(oDate);
		}
	},

	/**
	 * @memberOf i2d.pp.mrpcockpit.reuse.view.S3parent
	 * @param oEvent
	 */
	selectShortageInChart : function(oEvent) {
		var oEventDate = oEvent.getParameter("date");
		if (oEventDate) {
			this.navToSolutionView(oEventDate);
		}
	},

	/**
	 * Handles the event Model Loaded
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.view.S3parent
	 * @param oEvent
	 */
	_onModelLoaded : function(oEvent) {
		// If the model for a Quick View has been loaded we have to open the Quick View popover here
		var sURL = oEvent.getParameter("url");
		var iIndex = sURL.indexOf("QuickViews");
		if (iIndex >= 0) {
			var oMrpElementData = this._oSelectedMRPElementItem.getBindingContext().getObject();
			var oError = oEvent.getParameter("errorobject");
			if (oError) {
				var oBundle = this.getView().getModel("Common_i18n").getResourceBundle();
				var sErrorText = i2d.pp.mrpcockpit.reuse.util.Helper.extractErrorMsgFromStream(oBundle, oError.responseText);
				// remove error code from error message and show the error message in a message box
				sErrorText = sErrorText.replace("@QuickView@", "");
				sap.ca.ui.message.showMessageBox({
					type : sap.ca.ui.message.Type.ERROR,
					message : sErrorText
				});
				return;
			} else {
				// Link the popover to the control which has been clicked
				var quickViewName = i2d.pp.mrpcockpit.reuse.util.QuickViewHelper
						.getQuickViewFragment(oMrpElementData.MRPElementCategory);
				var quickView = this._oQuickViewContainer[quickViewName];
				// set the icon and the visibility for the quick edit button
				var quickViewObject = quickView.getBindingContext().getObject();
				var crExisting = i2d.pp.mrpcockpit.reuse.util.CommonFormatter
						.getChangeRequestVisibility(quickViewObject.SolutionRequestStatus);
				var editAllowed = i2d.pp.mrpcockpit.reuse.util.QuickViewHelper
						.isEditAllowed(quickViewObject.QuickviewCategory);
				var editButton = quickView.getBeginButton();
				if (editButton) {
					if (crExisting) {
						if (this._isNavToCrAppAllowed()) {
							editButton.setProperty("icon", "sap-icon://request");
							editButton.setProperty("visible", editAllowed);
						} else {
							editButton.setProperty("visible", false);
						}
					} else {
						editButton.setProperty("icon", "sap-icon://edit");
						editButton.setProperty("visible", editAllowed);
					}
				}else{
				  //set "EditButton" of PurchaseOrderQuickView visible
					if(editAllowed && this.getView().sViewName !== "i2d.pp.changerequest.details.view.S4"){
					quickView.getFooter().getContent()[0].setVisible(true);
					}
				}
				quickView.openBy(this._oSelectedMRPElementItem);
				return;
			}
		}

		// ***************
		// * Set Safety Stock (wave 3 functionality, with wave 5 the safety stock is part of the details call)
		// ***************
		// get the service schema version to check if the following coding has to be executed to set the safety
		// stock (wave 3)
		// or not (wave 5)
		var iServiceSchemaVersion = i2d.pp.mrpcockpit.reuse.util.InteroperabilityHelper
				.getServiceSchemaVersion(this.oApplicationFacade);

		if (iServiceSchemaVersion === 1) { // wave 3
			i2d.pp.mrpcockpit.reuse.util.Wave3Helper.determineAndWriteSafetyStock(this.getView());
		}

		this.writeDetailListTitle();

		// ***************
		// * update chart
		// ***************
		// check if it shall be possible to navigate into the solution view
		var bDecisionSupport = false;
		var backendVersion = i2d.pp.mrpcockpit.reuse.util.InteroperabilityHelper
				.getServiceSchemaVersion(this.oApplicationFacade);
		var oSDItemTable = this.getView().byId("SDItems");
		if (oSDItemTable) {
			var oSdItems = oSDItemTable.getItems();
			for ( var iSdItemIndex = 0 in oSdItems) {
				var oSdItem = oSdItems[iSdItemIndex].getBindingContext().getObject();
				if (i2d.pp.mrpcockpit.reuse.util.CommonFormatter.allowSolutionNavigation(oSdItem.MRPAvailability,
						oSdItem.MRPElementCategory, oSdItem.DecisionSupport, backendVersion) === true) {
					bDecisionSupport = true;
					break;
				}
			}
		}
		var oChart = this.getView().byId("chart");
		oChart.setProperty("allowNavigation", bDecisionSupport, true);

		this.setChartData();

		// highlight the currently selected master list record in the supply demand item list
		if (this.sdItemHighlightingNeeded) {
			this._highlightSdItemTableRecord.call(this);
		}
	},

	/**
	 * Write the detail list title <br>
	 * Since Wave 5 the backend provides the shortage count and the frontend appends this shortage count to the detail
	 * list title for all apps <br>
	 * Till Wave 4 setting the detail list title was app specific<br>
	 * 130: append material name/id to the title <br>
	 * 230: calculate the shortage count on the frontend and append it to the detail list title
	 */
	writeDetailListTitle : function() {

		var title;
		var backendVersion = i2d.pp.mrpcockpit.reuse.util.InteroperabilityHelper
				.getServiceSchemaVersion(this.oApplicationFacade);

		if (backendVersion === 1) {

			// Wave 3
			if (this.getDetailListTitle) {
				title = this.getDetailListTitle();
			} else {
				// Wave 5 App executed with wave 3 backend -> stop!
				return;
			}

		} else {

			// >= Wave 5
			var shortageCount = 0;
			var length = 0;
			var aItems = [];
			var oItem;

			// get items of detail list
			var oSDItemTable = this.getView().byId("SDItems");

			if (oSDItemTable) {
				aItems = oSDItemTable.getItems();
				if (aItems && aItems.length) {
					length = aItems.length;
				}
			}

			// determine number of shortages
			var i;
			for (i = 0; i < length; i++) {
				// get item from the model
				oItem = aItems[i].getBindingContext().getObject();

				if (oItem.ShortageCount > shortageCount) {
					shortageCount = oItem.ShortageCount;
				}
			}

			var oBundle = this.getView().getModel("Common_i18n").getResourceBundle();
			title = oBundle.getText("DETAIL_LIST_TITLE", [shortageCount]);
		}

		// update toolbar title with number of shortages
		var oToolbar = this.getView().byId("panel").getHeaderToolbar();
		if (oToolbar) {
			//oToolbar.mAggregations.content[0].setTitle(title);
		  oToolbar.getContent()[0].setTitle(title);
		}

	},

	/**
	 * This method is the handler to switch from table to the chart view
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.view.S3parent
	 */
	switchToChart : function() {
		// Set the member indicating that the chart is visible - used in the preview
		this.isChartVisible = true;
		// View/Hide the appropriate container for the current selection
		this.getView().byId("chartContainer").setVisible(true);
		this.getView().byId("SDItems").setVisible(false);
	},

	/**
	 * This method is the handler to switch from chart to the table view
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.view.S3parent
	 */
	switchToTable : function() {
		// Set the member indicating that the chart is NOT visible - used in the preview
		this.isChartVisible = false;
		// View/Hide the appropriate container for the current selection
		this.getView().byId("chartContainer").setVisible(false);
		this.getView().byId("SDItems").setVisible(true);
	},

	/**
	 * This method is the handler for the segmented button within the table toolbar that allows the user to switch between
	 * the table and the chart view
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.view.S3parent
	 */
	onToolbarIconSelect : function(oEvent) {
		var oSource = oEvent.getSource();
		var sButtonId = oSource.getSelectedButton();
		if (sButtonId.match("btnChart")) {
			// The chart button/icon has been pressed
			this.switchToChart();
		} else {
			// The table button/icon has been pressed
			this.switchToTable();
		}
	},

	/**
	 * This method initializes the chart
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.view.S3parent
	 */
	initChart : function() {
		// Add selection handlers to the chart control
		var oChart = this.getView().byId("chart");
		oChart.attachSelected(this.selectShortageInChart, this);
		// Set the model for the chart
		this.oChartModel = new sap.ui.model.json.JSONModel();
		// the model doesn't support passing the size limit directly with the constructor
		// (whyever), so we have to set it afterwards with a separate call
		this.oChartModel.setSizeLimit(10000);
		oChart.setModel(this.oChartModel);
		// Define the Template for the chart control
		var oChartValueTemplate = new i2d.pp.mrpcockpit.reuse.controls.ChartValue({
			date : "{date}",
			demand : "{demand}",
			supply : "{supply}",
			shortageAccepted : "{shortageAccepted}"
		});
		// oChart.setProperty("sizeDOMNodeId", this.getView().byId("pageChart").getId(), true);
		oChart.setProperty("height", "300px", true);
		oChart.setProperty("width", "100%", true);
		var noNavigationMessage = this.getView().getModel("Common_i18n").getResourceBundle().getText(
				"NO_NAVIGATION_TO_SOLUTION");
		oChart.setProperty("noNavigationText", noNavigationMessage, true);
		var balanceDotTooltip = this.getView().getModel("Common_i18n").getResourceBundle().getText("XTOL_BAL_DOT");
		oChart.setProperty("balanceDotTooltip", balanceDotTooltip);
		oChart.bindProperty("shiftLeft", "/shiftLeft");
		oChart.bindProperty("unitDecimals", "/decimals");
		oChart.bindProperty("startBalance", "/startBalance");
		oChart.bindProperty("minStock", "/minStock");
		oChart.bindProperty("safetyStock", "/safetyStock");
		oChart.bindValues("/chartData", oChartValueTemplate);
	},

	/**
	 * This method sets the initial chart data
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.view.S3parent
	 */
	setChartData : function() {
		// retrieve all relevant data from detail view
		var view = this.getView();
		var oData = view.getModel().oData;
		var oCalculationEngine = new i2d.pp.mrpcockpit.reuse.util.CalculationEngine(view.getModel("Common_i18n"));
		// retrieve all relevant data from detail view
		var aResult = [];
		var oTable = this.byId("SDItems");
		var aItems = (oTable) ? oTable.getItems() : [];
		var l = (aItems && aItems.length) ? aItems.length : 0;
		for ( var i = 0; i < l; i++) {
			var oItem = oData[aItems[i].getBindingContext().getPath().slice(1)];
			aResult.push(oItem);
		}
		// convert it into the model data for the chart model
		var oModelData = oCalculationEngine.initialChartData(aResult, this.dateStart, this.dateEnd, 0);
		this.oChartModel.setData(oModelData);
	},

	/**
	 * Navigate to the MM02 transaction
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.view.S3parent
	 * @param oControlEvent
	 */
	navToMM02 : function(oControlEvent) {
		var materialID = this.getView().getBindingContext().getObject().MaterialID;
		var semanticObject = "MRPMaterial";
		var action = "changeMaterial";
		var params = {
			"Material" : materialID
		};
		i2d.pp.mrpcockpit.reuse.util.Helper.factsheetNavigate(semanticObject, action, params);
	},

	/**
	 * Navigate to the MD04 transaction
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.view.S3parent
	 * @param oControlEvent
	 */
	navToMD04 : function(oControlEvent) {
		var material = this.getView().getBindingContext().getObject();
		var materialID = material.MaterialID;
		var mrpArea = material.MRPArea;
		var plant = material.MRPPlant;
		var semanticObject = "MRPMaterial";
		var action = "showStockRequirementsList";
		var params = {
			"Material" : materialID,
			"MRPPlant" : mrpArea,
			"MRPArea" : plant
		};
		i2d.pp.mrpcockpit.reuse.util.Helper.factsheetNavigate(semanticObject, action, params);
	},

	/**
	 * Navigate to the corresponding display transaction
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.view.S3parent
	 */
	navToTransaction : function(evt) {
		var oData = evt.getSource().getBindingContext().getObject();

		var semanticObject = i2d.pp.mrpcockpit.reuse.util.QuickViewHelper.getSemanticObject(oData.QuickviewCategory);
		var action = i2d.pp.mrpcockpit.reuse.util.QuickViewHelper.getTransactionAction(oData.QuickviewCategory);
		var params = i2d.pp.mrpcockpit.reuse.util.QuickViewHelper.getNavigationParameter(oData.QuickviewCategory,
				oData.MRPElement, ' ', oData.PlannedOrder);

		i2d.pp.mrpcockpit.reuse.util.Helper.factsheetNavigate(semanticObject, action, params);
	},

	/**
	 * Navigate to the corresponding fact sheet
	 */
	navToFactsheet : function(evt) {
		var oData = evt.getSource().getBindingContext().getObject();

		var semanticObject = i2d.pp.mrpcockpit.reuse.util.QuickViewHelper.getSemanticObject(oData.QuickviewCategory);
		var action = i2d.pp.mrpcockpit.reuse.util.QuickViewHelper.getFactsheetAction(oData.QuickviewCategory);
		var params = i2d.pp.mrpcockpit.reuse.util.QuickViewHelper.getNavigationParameter(oData.QuickviewCategory,
				oData.MRPElement, oData.MRPElementItem, oData.PlannedOrder);

		i2d.pp.mrpcockpit.reuse.util.Helper.factsheetNavigate(semanticObject, action, params);
	},
	
	/**
	 * Navigate to the corresponding PO App or transaction
	 */
	navToPODestination: function(evt) {
		
		var oPO = evt.getSource().getBindingContext().getObject();
		
		var iVersion = this.getView().getModel('ServiceVersions').getData().iServiceSchemaVersion;
		if(iVersion === i2d.pp.mrpcockpit.reuse.util.CommonConstants.BACKEND_MODEL_S) {
		/** Navigate to App */
			i2d.pp.mrpcockpit.reuse.util.CollaborationHelper.navToPOApp(oPO);
		} else {
		/** Navigate to transaction */
			this.navToTransaction(evt);			
		}	
	},	
	
	/**
	 * Navigate to the corresponding Sales order App or transaction
	 */
	navToSODestination: function(evt) {
		
		var oSO = evt.getSource().getBindingContext().getObject();
		
		var iVersion = this.getView().getModel('ServiceVersions').getData().iServiceSchemaVersion;
		if(iVersion === i2d.pp.mrpcockpit.reuse.util.CommonConstants.BACKEND_MODEL_S) {
		/** Navigate to App */				
			i2d.pp.mrpcockpit.reuse.util.CollaborationHelper.navToSOApp(oSO);			
		} else {
		/** Navigate to transaction */
			this.navToTransaction(evt);			
		}	
	},		

	/**
	 * This method opens a fact sheet.
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.view.S3parent
	 */
	openFactSheetActionSheet : function(evt) {
		// create action sheet only once
		if (!this._actionSheet) {
			this._actionSheet = new sap.m.ActionSheet({
				title : "",
				showCancelButton : false,
				placement : sap.m.PlacementType.Top,
				buttons : [new sap.m.Button({
					icon : "sap-icon://popup-window",
					text : "{Common_i18n>MD04}",
					press : jQuery.proxy(this.navToMD04, this)
				}), new sap.m.Button({
					icon : "sap-icon://popup-window",
					text : "{Common_i18n>MM02}",
					press : jQuery.proxy(this.navToMM02, this)
				})]
			});
			// set i18n
			this._actionSheet.setModel(this.getView().getModel("Common_i18n"), "Common_i18n");
		}
		// open action sheet
		this._actionSheet.openBy(evt.getSource());
	},

	/**
	 * This method is called by the framework if the view is left.
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.view.S3parent
	 */
	onExit : function() {
		// delete action sheet
		if (this._actionSheet) {
			this._actionSheet.destroy();
		}
		// Unsubscribe all events
		this._unsubscribeEvents();
		// Remove resizing handlers
		this.removeHandler();
		// deregister event
		this.oApplicationFacade.deRegisterOnMasterListRefresh(this.onMasterRefresh, this);
		// Ensure that there is no handler registered for 'request completed'
		this.getView().getModel().detachRequestCompleted(this._onModelLoaded, this);
		// Detach the handler for routing events
		this.oRouter.detachRoutePatternMatched(this._onRoutePatternMatched, this);
		// Destroy the Quick Views to avoid duplicate ID errors
		i2d.pp.mrpcockpit.reuse.util.QuickViewHelper.destroyQuickViews(this);
	},

	/**
	 * remove all existing handler for size calculation
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.view.S3parent
	 */
	removeHandler : function() {
		// clear handler for size changes
		if (this.resizeHandlerParent.length >= 0) {
			for ( var i in this.resizeHandlerParent) {
				sap.ui.core.ResizeHandler.deregister(this.resizeHandlerParent[i]);
			}
			this.resizeHandlerParent = [];
		}
		if (jQuery.device.is.desktop) {
			if (this.resizeHandlerPage.length >= 0) {
				for ( var j in this.resizeHandlerPage) {
					sap.ui.core.ResizeHandler.deregister(this.resizeHandlerPage[j]);
				}
				this.resizeHandlerPage = [];
			}
		} else {
			sap.ui.Device.orientation.detachHandler(this.onResize, this);
			sap.ui.Device.resize.detachHandler(this.onResize, this);
		}
		// clear delayed calls for resizing
		if (this.resizeTimer.length >= 0) {
			for ( var k in this.resizeTimer) {
				jQuery.sap.clearDelayedCall(this.resizeTimer[k]);
			}
			this.resizeTimer = [];
		}
	},

	/**
	 * calculate the size for the chart
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.view.S3parent
	 */
	resize : function(resizeControlId) {
		i2d.pp.mrpcockpit.reuse.util.Helper.resizeUiControls(this, i2d.pp.mrpcockpit.reuse.util.CommonConstants.VIEW_S3);
	},

	/**
	 * Handle the resize event and trigger a delayed call to calculate the proper sizes
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.view.S3parent
	 */
	onResize : function(resizeControlId) {
		// don't trigger a resize calculation immediately (for performance reasons) but
		// create a delayed call instead
		// if there is already a delayed call, remove it and create a new one instead
		if (this.resizeTimer[resizeControlId]) {
			jQuery.sap.clearDelayedCall(this.resizeTimer[resizeControlId]);
		}
		// so now create the delayed call to handle the resize
		this.resizeTimer[resizeControlId] = jQuery.sap.delayedCall(200, this, jQuery.proxy(this.resize, this,
				resizeControlId));
	},

	/**
	 * This method is called by the framework before the UI has been rendered. It is used to remove handlers
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.view.S3parent
	 */
	onBeforeRendering : function() {
		// as DOM nodes will change, remove the resize handler
		this.removeHandler();
	},

	/**
	 * This method is called by the framework after the UI has been rendered. It is used to register handlers for resizing
	 * and press events
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.view.S3parent
	 */
	onAfterRendering : function() {
		this._registerResizeHandler("mainPage-cont");
		// After the screen has been rendered, we dynamically add the press event handler to the icons.
//		this._setCrIconClickStatus();
	},

	/**
	 * This method sets the default for the change request item press event This method that is intended to be overwritten
	 * by subclasses to change the behavior of the change request icons. (e.g. if the user should not be able to press on
	 * the icon). In S3 the trigger is onAfterRendering(), since the fragment SupDemItem was defined via XML
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.view.S3parent
	 */
//	_setCrIconClickStatus : function() {
//		// The icons have been added within the XML with this particular ID
//		var oIcon = this.getView().byId("sapMrpCrIcon");
//		if (oIcon) {
//			// Attach the 'press' event to the change request icon
//			oIcon.attachPress(this.onClickChangeRequest, this);
//		}
//	},

	/**
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.view.S3parent
	 */
	selectIconTabBarSelect : function(oEvent) {
		// this id is set as attribute of the icon tab bar
		// we need to call the resize logic for the chart manually
		// when clicking on the Supply Demand Items as there we do have
		// panel to calculate the possible height.
		var resizeControlId = oEvent.getParameter("key");
		// resize only for "supDemItemsTab"
		if ("supDemItemsTab" == resizeControlId) {
			this.onResize();
		}
	},

	/**
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.view.S3parent
	 */
	_registerResizeHandler : function(resizeControlId) {
		var parent = null;
		var page = null;
		this.onResize();
		var $NavContent = jQuery("#" + this.getView().getId() + "--" + resizeControlId);
		if ($NavContent && $NavContent.length) {

			if (resizeControlId == 'mainPage-cont') {
				// NavContent is already the page
				parent = $NavContent;
			} else {
				// determine page and parent node
				parent = $NavContent.parent();
			}
			page = parent;

			// go to main page to get the possible size
			while ((page.length != 0) && !(page.attr('id') == this.getView().getId() + "--" + "mainPage-cont")) {
				page = page.parent();
			}

			if (parent) {
				this.resizeHandlerParent[resizeControlId] = sap.ui.core.ResizeHandler.register(parent[0], jQuery.proxy(
						this.onResize, this, resizeControlId));
			}

			if (jQuery.device.is.desktop) {
				if (page) {
					this.resizeHandlerPage[resizeControlId] = sap.ui.core.ResizeHandler.register(page[0], jQuery.proxy(
							this.onResize, this, resizeControlId));
				}
			} else {
				sap.ui.Device.orientation.attachHandler(this.onResize, this, resizeControlId);
				sap.ui.Device.resize.attachHandler(this.onResize, this, resizeControlId);
			}
		}
	},

	/**
	 * Updates the noDataText to "Loading..." <br>
	 * Method is called when data in table refreshed
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.view.S3parent
	 */
	onItemsUpdateStarted : function(oEvent) {
		var sdItemTable = this.getView().byId("SDItems");
		var i18nModel = this.getView().getModel("Common_i18n");
		if (i18nModel && sdItemTable) {
			sdItemTable.setNoDataText(i18nModel.getResourceBundle().getText("tableUpdateStarted"));
		}
	},

	/**
	 * Updates the noDataText of the supply demand item talbe to "No items are currently available", if Odata has returned
	 * no results.
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.view.S3parent
	 */
	onItemsUpdateFinished : function(oEvent) {
		var oSource = oEvent.getSource();
		var aItems = oSource.getItems();
		if (!aItems || aItems.length === 0) {
			var sdItemTable = this.getView().byId("SDItems");
			var i18nModel = this.getView().getModel("Common_i18n");
			if (i18nModel && sdItemTable) {
				sdItemTable.setNoDataText(i18nModel.getResourceBundle().getText("tableUpdateFinished"));
			}
		}
	},

	/**
	 * On click on the change request icon within the supply demand item list we call the app for change request
	 * processing (540)
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.view.S3parent
	 */
	onClickChangeRequest : function(evt) {
		// Navigate to the Change Request App
		var sError = i2d.pp.mrpcockpit.reuse.util.CollaborationHelper.onCRPressed(evt);
		// Error handling for the navigation
		if (sError) {
			sap.ca.ui.message.showMessageBox({
				type : sap.ca.ui.message.Type.ERROR,
				message : sError
			});
		}
	},

	/**
	 * Opens the Quick View for the selected MRP element <br>
	 * A single quick view instance is stored in a container for each mrp element category and restored if needed. We do
	 * it this way to avoid 'duplicate id' errors when opening multiple quick views for the same mrp element category
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.view.S3parent
	 */
	handlePressDispoElementQuickView : function(evt) {
		i2d.pp.mrpcockpit.reuse.util.QuickViewHelper.handlePressDispoElementQuickView(evt,this);	
	},

	/**
	 * Close the Quick View popover when the user click on the close button
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.view.S3parent
	 */
	handleCloseButton : function(oEvent) {
		var oMrpElementData = this._oSelectedMRPElementItem.getBindingContext().getObject();
		var quickViewFragment = i2d.pp.mrpcockpit.reuse.util.QuickViewHelper
				.getQuickViewFragment(oMrpElementData.MRPElementCategory);
		var quickView = this._oQuickViewContainer[quickViewFragment];
		quickView.close();
	},

	/**
	 * Generally the navigation to CR app is allowed <br>
	 * If not desired, rewrite this method in the app controller
	 */
	_isNavToCrAppAllowed : function() {
		return true;
	},

	/**
	 * Opens the edit dialog for purchase order or purchase requisition
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.view.S3parent
	 */
	handleEditButton : function(oEvent) {

		var oQuickViewData = oEvent.getSource().getBindingContext().getObject();
		var oMrpElementData = this._oSelectedMRPElementItem.getBindingContext().getObject();

		var crExisting = i2d.pp.mrpcockpit.reuse.util.CommonFormatter
				.getChangeRequestVisibility(oQuickViewData.SolutionRequestStatus);

		if (this._isNavToCrAppAllowed() && crExisting) {
			// Navigate to the Change Request App
			var sError = i2d.pp.mrpcockpit.reuse.util.CollaborationHelper.navToCRApp(oQuickViewData, oMrpElementData);
			// Error handling for the navigation
			if (sError) {
				sap.ca.ui.message.showMessageBox({
					type : sap.ca.ui.message.Type.ERROR,
					message : sError
				});
			}
		} else {

			// open the corresponding solution dialog
			var sSolutionType = i2d.pp.mrpcockpit.reuse.util.QuickViewHelper
					.getSolutionType(oQuickViewData.QuickviewCategory);
			var sViewName = i2d.pp.mrpcockpit.reuse.util.QuickViewHelper.getEditFragment(oQuickViewData.QuickviewCategory);

			var oQuickEditModel = new sap.ui.model.json.JSONModel({
				ContactPersonName : oQuickViewData.ContactPersonName,
				ContactPersonEmailAddress : oQuickViewData.ContactPersonEmailAddress,
				ContactPersonPhoneNumber : oQuickViewData.ContactPersonPhoneNumber,
				IntContactPersonName : oQuickViewData.IntContactPersonName,
				IntContactPersonEmailAddress : oQuickViewData.IntContactPersonEmailAddress,
				IntContactPersonTelephone : oQuickViewData.IntContactPersonTelephone,				
				MaterialShortageSolutionType : sSolutionType,

				MRPElementAvailyOrRqmtDate : oQuickViewData.MRPElementPlndDeliveryDate,
				MRPElementChgAvailyOrRqmtDate : oQuickViewData.MRPElementPlndDeliveryDate,
				MRPElementOpenQuantity : oMrpElementData.MRPElementOpenQuantity,
				MRPElementChangeOpenQuantity : oMrpElementData.MRPElementOpenQuantity,
				MaterialGoodsReceiptDuration : oQuickViewData.MaterialGoodsReceiptDuration,
				AvailabilityDate : oQuickViewData.MRPElementPlndDeliveryDate,
				ChangedAvailabilityDate : oQuickViewData.MRPElementPlndDeliveryDate,
				OrderFinishDate : oQuickViewData.OrderFinishDate,
				ChangedOrderFinishDate : oQuickViewData.OrderFinishDate,
				MRPElementOriginalTotalQty : oQuickViewData.TotalQuantity,
				MRPElementChangedTotalQuantity : oQuickViewData.TotalQuantity,
				OrderedQuantity : oQuickViewData.OrderedQuantity,
				OrderedChangedQuantity : oQuickViewData.OrderedQuantity,				

				SupplyingPlant : oQuickViewData.BusinessPartnerPlant,
				Vendor : oQuickViewData.Vendor,
				VendorName : oQuickViewData.VendorName,
				TargetQuantityUnitDcmls : oQuickViewData.TargetQuantityUnitDcmls,
				OrderUnitOfMeasureTechnicalName : oQuickViewData.UnitOfMeasureTechnicalName,

				MaterialID : oMrpElementData.MaterialID,
				MRPPlant : oQuickViewData.MRPPlant,
				MRPArea : oMrpElementData.MRPArea,
				MRPPlanningSegmentType : oMrpElementData.MRPPlanningSegmentType,
				MRPPlanningSegmentNumber : oMrpElementData.MRPPlanningSegmentNumber,
				MRPElement : oQuickViewData.MRPElement,
				MRPElementCategory : oQuickViewData.MRPElementCategory,
				MRPElementExternalID : oQuickViewData.MRPElementExternalID,
				MRPElementItem : oQuickViewData.MRPElementItem,
				MRPElementItemExternalID : oQuickViewData.MRPElementItemExternalID,
				MRPElementScheduleLine : oQuickViewData.MRPElementScheduleLine,
				MRPController : oQuickViewData.MRPController,
				MRPControllerName : oQuickViewData.MRPControllerName,

				SolutionRequestNote : oQuickViewData.SolutionRequestNote,
				SolutionRequestStatus : oQuickViewData.SolutionRequestStatus,
				VendorResponse : "",
				// split the material shortage definition id into profile (First 12 digits) and count (last 3 digits)
				// TODO: clarify if supplying profile + profileCount is needed at all
				MaterialShortageProfile : oMrpElementData.MaterialShortageDefinitionID.substring(0, 12),
				MaterialShortageProfileCount : oMrpElementData.MaterialShortageDefinitionID.substring(12, 15),
				MaterialShortageDefinitionID : oMrpElementData.MaterialShortageDefinitionID,

				// This ID is necessary to be able to change a purchase order.
				// The ID is used in the backend to check if the purchase order has changed in the meantime.
				ChangeStateID : oQuickViewData.ChangeStateID,
				QuickviewCategory : oQuickViewData.QuickviewCategory,
				PlannedOrder : oQuickViewData.PlannedOrder,
				ProductionSupervisor : oQuickViewData.ProductionSupervisor,
				ProductionSupervisorDesc : oQuickViewData.ProductionSupervisorDesc,
				BusinessPartnerPlant : oQuickViewData.BusinessPartnerPlant,
				BusinessPartnerPlantName : oQuickViewData.BusinessPartnerPlantName,
				VendorIsFixed : oQuickViewData.VendorIsFixed
			});

			var backendVersion = i2d.pp.mrpcockpit.reuse.util.InteroperabilityHelper
					.getServiceSchemaVersion(this.oApplicationFacade);
			i2d.pp.mrpcockpit.reuse.util.CollaborationHelper.setODataModel(this.getView().getModel(), backendVersion);
			i2d.pp.mrpcockpit.reuse.util.Wave3CollaborationHelper.setODataModel(this.getView().getModel(), backendVersion);

			// Create the dialog fragment
			var ctrl = sap.ui.controller(sViewName);
			var oDialogFragment = sap.ui.xmlfragment(sViewName, ctrl);
			oDialogFragment.setModel(this.oApplicationImplementation.getApplicationModel("ServiceVersions"),"ServiceVersions");
			oDialogFragment.setModel(this.getView().getModel("Common_i18n"), "Common_i18n");
			// register the quick view as a separate model, this allows the xml views to pass the constants to
			// formatter methods
			var oQuickEditConstModel = new sap.ui.model.json.JSONModel(
					i2d.pp.mrpcockpit.reuse.util.CommonConstants.QUICKVIEW_CAT);
			oDialogFragment.setModel(oQuickEditConstModel, "QuickEditConstantsModel");
			// Pass the model to the dialog fragment
			oDialogFragment.setModel(oQuickEditModel);
			oDialogFragment.open();
		}
	},

	/**
	 * Reloads the supply/demand item table
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.view.S3parent
	 */
	refreshSDList : function() {
		// trigger refresh of the supply demand table
		var context = this.getView().getBindingContext();
		this.getView().setBindingContext(null);
		this.getView().setBindingContext(context);
	},

	/**
	 * Changes the models of the app specific UI Element to reflect the changes which are not part of the odata model.
	 * When there is an already changed Item available, oData model will be ignored.
	 */
	_changeModel : function() {

		var oView = this.getView();

		// get the json Model
		var changedItems = this.oApplicationFacade.getApplicationModel("changedItems");
		if (!changedItems) {
			return;
		}

		// get the relevant UI Elements
		var aUIElements = new Array();
		aUIElements = this._changeModelAppSpecific();
		for ( var i = 0; i < aUIElements.length; i++) {

			var oUIElement = oView.byId(aUIElements[i]);
			if (!oUIElement) {
				continue;
			}

			// change the model of the UI Element to a JSON Model if available. Otherwise set to the original ODATA
			// Model from the view
			var oContextPath = null;
			if (oView && oView.getBindingContext()) {
				oContextPath = oView.getBindingContext().getPath();
			}
			if (changedItems.getProperty(oContextPath)) {
				// By setting the new model the Binding Context of the parent is not valid for this element anymore. We
				// have to define the Binding Context for the element again
				oUIElement.setModel(changedItems);
				oUIElement.bindElement(oContextPath);
			} else {
				// If there is no changed model then set back to the original ODATA Model from the view
				oUIElement.setModel();
				// By resetting the oData model we have to remove the BindingContext so the parent BindingContext will
				// be inherited
				oUIElement.unbindElement();
			}
		}

	},

	/**
	 * This method is used to define the UI Elements which are neccessary to update without receiving the response from an
	 * ODAta Call It is intended to be overwritten in the sub classes. We need to provide an own json model as we are not
	 * allowed to update the OData values.
	 */
	_changeModelAppSpecific : function() {
		return ["objectHeader"];
	},

	/**
	 * This handler should start the MRP in backend - but only for ModelS function import RunMRP FunctionImports
	 * eMail: ChangeRequestGetEMailText -> ChangeRequestIDs FunctionImports RunMRP: RunMRP
	 */

	runMRP : function() {
		var oDataModel = this.getView().getModel();
		oDataModel.setUseBatch(true);
		oDataModel.clearBatch();

		var oModelI18N = this.getView().getModel("Common_i18n");
		var oBundle = oModelI18N.getResourceBundle();

		var oObjectHeader = this.getView().byId("objectHeader");
		var oBindingContext = oObjectHeader.getBindingContext();
		var oObjectHeader = oBindingContext.getObject();

		var url = "/RunMRP?MaterialID='";
		url += oObjectHeader.MaterialID;
		url += "'&MRPPlant='";
		url += oObjectHeader.MRPPlant;
		url += "'";

		oDataModel.addBatchChangeOperations([oDataModel.createBatchOperation(url, "POST")]);
		oDataModel.submitBatch(function(oResult, oResponse, aErrorResponses) {
			if (aErrorResponses.length > 0) {
				// Extract the error message out of the response object
				var sErrorText = i2d.pp.mrpcockpit.reuse.util.Helper.extractErrorMsgFromBatchResponse(oBundle,
						aErrorResponses);
				// Show the error message in a message box
				sap.ca.ui.message.showMessageBox({
					type : sap.ca.ui.message.Type.ERROR,
					message : oBundle.getText("MRP_RUN_ERRORS"),
					details : sErrorText
				});
			} else {
				oDataModel.refresh();
				sap.m.MessageToast.show(oBundle.getText("MRP_RUN_COMPLETED"));
			}
		},

		function(oError) {
			var sErrorText = "";
			// Check if/Ensure the response object contains a body
			if (oError && oError.response && oError.response.body) {
				// Extract the error message out of the response object
				sErrorText = i2d.pp.mrpcockpit.reuse.util.Helper.extractErrorMsgFromStream(oBundle,
						oError.response.body);
			} else {
				// Use a default for an unknown error
				sErrorText = "";
			}
			// Show the error message in a message box
			sap.ca.ui.message.showMessageBox({
				type : sap.ca.ui.message.Type.ERROR,
				message : oBundle.getText("MRP_RUN_ERRORS"),
				details : sErrorText
			});
		},

		false);
	}

});

}; // end of i2d/pp/mrpcockpit/reuse/view/S3parent.js
if ( !jQuery.sap.isDeclared('i2d.pp.mrpcockpit.reuse.view.S4parent') ) {
  jQuery.sap.declare('i2d.pp.mrpcockpit.reuse.view.S4parent');
jQuery.sap.require('sap.ca.scfld.md.controller.BaseDetailController'); // unlisted dependency retained



jQuery.sap.require('sap.ca.ui.message.message'); // unlisted dependency retained

jQuery.sap.require('sap.ca.ui.model.type.Date'); // unlisted dependency retained








sap.ca.scfld.md.controller.BaseDetailController
		.extend(
				"i2d.pp.mrpcockpit.reuse.view.S4parent",
				{

					constructor : function() {

						sap.ca.scfld.md.controller.BaseDetailController.apply(this, arguments);

						// remember the base class onInit implementation to execute it later
						var onInit = this.onInit;

						this.onInit = function() {
							// Initialize the i18n model before the oData model is initialized by the base controller onInit
							// this is important to avoid "i18n model not initialized" errors in the formatters
							var oBundle = new sap.ui.model.resource.ResourceModel({
								bundleName : "i2d.pp.mrpcockpit.reuse.i18n.i18n"
							});
							this.getView().setModel(oBundle, "Common_i18n");

							// get the versions model (that was initialized in s2.parent controller) and bind it to the view
							var oVersion = this.oApplicationImplementation.getApplicationModel("ServiceVersions");
							this.getView().setModel(oVersion, "ServiceVersions");

							onInit.apply(this, arguments);
						};

					},

					/**
					 * Initialization of the controller
					 * 
					 * @memberOf i2d.pp.mrpcockpit.reuse.view.S4parent
					 */
					onInit : function() {

						sap.ca.scfld.md.controller.BaseDetailController.prototype.onInit.call(this);

						// Show the navigation button
						var oPage = this.getView().getContent()[0];
						oPage.setShowNavButton(true);
						// Initialize the chart control
						this.initChart();
						this.resizeHandler = null;
						this.resizeTimer = null;
						// info which element (Chart or Table) is visible
						this.isChartVisible = false;

						// not all UI Elements are rendered on the time when the chart is rendered. 67px are missing
						// after the first rendering the initialOffset needs to be set to 0 for correct sizing
						this._initialOffset = 67;

						// Store the view and the model as member variables
						this.view = this.getView();
						this.oModel = this.view.getModel();

						// store the CollaborationDialog as member variable to be able to close it
						this.oCollaborationDialog = null;

						// Deactivate the automatic binding refresh after data change, because the dialog
						// leads to data changes and it seems like the model automatically sends several
						// further OData calls after the batch call has been sent.
						this.oModel.setRefreshAfterChange(false);

						// Pass the global model to the collaboration helper in order to use the same
						// model for the OData batch calls
						var backendVersion = i2d.pp.mrpcockpit.reuse.util.InteroperabilityHelper
								.getServiceSchemaVersion(this.oApplicationFacade);
						i2d.pp.mrpcockpit.reuse.util.CollaborationHelper.setODataModel(this.oModel, backendVersion);
						i2d.pp.mrpcockpit.reuse.util.Wave3CollaborationHelper.setODataModel(this.oModel, backendVersion);

						// Shortcut to the MRP constants
						this.Constants = i2d.pp.mrpcockpit.reuse.util.CommonConstants;

						// --------------------------------------------
						// Do the list binding with CSS for shortages
						// --------------------------------------------
						this._setCrIconClickStatus();
						var ctrlShort = this.getView().byId("shortages");
						var oBindingInfo = new Object();
						oBindingInfo.path = "SupDemItem";

						if (backendVersion === 1) {
							// Wave 3
							oBindingInfo.factory = i2d.pp.mrpcockpit.reuse.util.Wave3Helper._getListTemplate;
						} else {
							oBindingInfo.factory = this._getListTemplate;
						}
						ctrlShort.bindAggregation("items", oBindingInfo);

						// Set the (empty) JSON as model for the table control.
						this.oTableModel = new sap.ui.model.json.JSONModel();
						ctrlShort.setModel(this.oTableModel);

						// --------------------------------------------
						// Routing - Attach the handler for routing events
						// --------------------------------------------
						this.oRouter.attachRoutePatternMatched(this._onRoutePatternMatched, this);

						// The oDataBindingServant is used to trigger an Aggregation Call (ODATA:
						// getEntitySet) to the Backend
						// As result we get one entity, which is bound to the view.
						// This mechanism allows us to use filter within the call and to add
						// the result directly into the application oData model
						// It is not supposed to display the oDataBindingServant to the user
						var oListItem = this.getView().byId("oDataBindingServantItem");
						this.oTemplate = jQuery.extend({}, oListItem);

						this.oApplicationFacade.registerOnMasterListRefresh(this.onMasterRefresh, this);

						this.oNullModel = null;
					},

					/**
					 * This method sets the default for the change request icon behavior. It is intended to be overwritten by
					 * subclasses, if the icon shall not be clickable. In S4 the trigger is onInit(), since the fragment
					 * SupDemItem is built via factory method
					 * 
					 * @memberOf i2d.pp.mrpcockpit.reuse.view.S4parent
					 */
					_setCrIconClickStatus : function() {
						this._bCrIconClickable = false;
					},

					/**
					 * Handles the event Model Loaded
					 * 
					 * @param oEvent
					 * @memberOf i2d.pp.mrpcockpit.reuse.view.S4parent
					 */
					_onModelLoaded : function(oEvent) {
						// only do something for solution call
						if (oEvent.getParameter("url").indexOf("PPMRPSolHeaders") === 0) {
							jQuery.sap.log.info("S4: Model loaded");
							var oView = this.getView();

							// bind the result of the oDataCall to the view
							// use the Binding Context of the aggregation Container
							// The aggregation container is an invisible ui element that we use to call oData as aggregation
							// (getEntitySet) in order to pass our own filter
							// We use the result (which is always one entity) and bind it against our view
							var oBindingContext = null;
							var oItem = oView.byId("oDataBindingServant").getItems()[0];
							if (oItem) {
								oBindingContext = oItem.getBindingContext();
							}
							if (oBindingContext) {
								oView.setBindingContext(oBindingContext);
								// save the startdate and enddate of the currently shown shortage
								// this will be used, when the supdemitems are re-read after solution execution
								// in order to show the same shortage again
								// remove the last 5 characters from the converted ISO string (2014-04-11T12:00:00.000Z)
								// we need to get rid of the Z as OData cannot handle that. Furthermore the milliseconds cannot
								// be handled by the Internet Explorer and are not necessary
								var boundObj = oBindingContext.getObject();
								this.dateStart = boundObj.MaterialShortageStartDate.toISOString().slice(0, -5);
								this.dateEnd = boundObj.MaterialShortageEndDate.toISOString().slice(0, -5);
							}

							// Update the control 'supply demand items' table only if table is visible
							if (this.isChartVisible) {
								this.switchToChart(false);
							} else {
								this.switchToTable(false);
							}
							
							// Display warning if change request exists
							this._displayChangeRequestWarning(boundObj.ChangeRequestExists);
							
							// Update the control 'solution cards'
							this._updateSolutionCards(oView);
						}
					},

					/**
					 * Subscribe events that are used for the communication between this controller (S4) and the custom controls
					 * (Solution Cards) and the solution dialogs.
					 * 
					 * @memberOf i2d.pp.mrpcockpit.reuse.view.S4parent
					 */
					_subscribeEvents : function() {
						var bus = sap.ui.getCore().getEventBus();
						// --------------------------------------
						// Subscribe events for the current view
						// --------------------------------------
						bus.subscribe(this.Constants.EVENT_CHANNELID_CARD_DIALOG_DATACHANGED, this.Constants.EVENT_EVENTID_OK,
								this.onDialogOk, this);

						// Cards (Preview)
						bus.subscribe(this.Constants.EVENT_CHANNELID_CARD_PREVIEW, this.Constants.EVENT_EVENTID_RUN,
								this._previewRun, this);
						bus.subscribe(this.Constants.EVENT_CHANNELID_CARD_PREVIEW, this.Constants.EVENT_EVENTID_CANCEL,
								this._previewCancel, this);
						bus.subscribe(this.Constants.EVENT_CHANNELID_SOLCARD, this.Constants.EVENT_EVENTID_EXECUTE,
								this.onSolutionCardExecute, this);
					},

					/**
					 * Unsubscribe events that have been registered before. Info: Required in context of Fiori Launchpad when
					 * single apps can be run several times. We run into major problems if events haven't been removed correctly!
					 * 
					 * @memberOf i2d.pp.mrpcockpit.reuse.view.S4parent
					 */
					_unsubscribeEvents : function() {
						var bus = sap.ui.getCore().getEventBus();
						// De-Register first
						bus.unsubscribe(this.Constants.EVENT_CHANNELID_CARD_DIALOG_DATACHANGED, this.Constants.EVENT_EVENTID_OK,
								this.onDialogOk, this);

						// Cards (Preview)
						bus.unsubscribe(this.Constants.EVENT_CHANNELID_CARD_PREVIEW, this.Constants.EVENT_EVENTID_RUN,
								this._previewRun, this);
						bus.unsubscribe(this.Constants.EVENT_CHANNELID_CARD_PREVIEW, this.Constants.EVENT_EVENTID_CANCEL,
								this._previewCancel, this);
						bus.unsubscribe(this.Constants.EVENT_CHANNELID_SOLCARD, this.Constants.EVENT_EVENTID_EXECUTE,
								this.onSolutionCardExecute, this);

					},

					/**
					 * S4 Handler for routing events Attention: This handler is called for ANY routing event that takes place as
					 * soon as S4 has been once initialized. So we have to extract the event parameter in order to check if S3->S4
					 * happened.
					 * 
					 * @memberOf i2d.pp.mrpcockpit.reuse.view.S4parent
					 */
					_onRoutePatternMatched : function(oEvent) {
						// Check if navigation from S3-S4 was triggered

						if (oEvent.getParameter("name") === this.Constants.ROUTING.SUB_DETAIL
								|| oEvent.getParameter("name") === this.Constants.ROUTING.SUB_DETAIL_WAVE3) {

							// --------------------------------------------
							// Add a handler to react on ODATA Changes
							this.oModel.attachRequestCompleted(this._onModelLoaded, this);
							// De-Register first (just for safety reasons)
							this._unsubscribeEvents();
							// Register events
							this._subscribeEvents();

							// remove old supply demand items and solution cards
							var ctrlCards = this.getView().byId("cards");
							ctrlCards.setMaterialShortageHasNoSolution(false);
							ctrlCards.removeCards();
							var ctrlTable = this.getView().byId("shortages");
							var m = ctrlTable.getModel();
							m.setData(null);
							// Reset the current solution card
							this._oCard = null;

							// --------------------------------------------
							// Prepare the "Detail-Call"
							// --------------------------------------------
							// Read from configured "pattern" :
							// "subDetail/MaterialID/{materialid}/MRPPlant/{plant}/MRPArea/{area}/MRPPlanningSegmentType/{type}/MRPPlanningSegmentNumber/{number}/MaterialShortageDefinitionID/{definition}/MaterialShortageStartDate{date}"
							this.navParameter = oEvent.getParameter("arguments");
							// decode attributes of navParameter
							for ( var index in this.navParameter) {
								this.navParameter[index] = decodeURIComponent(this.navParameter[index]);
							}

							if (oEvent.getParameter("name") === this.Constants.ROUTING.SUB_DETAIL_WAVE3) {
								// we are in "Wave 3" mode
								this.dateStart = this.navParameter.MaterialShortageStartDate;
								this.dateEnd = this.navParameter.MaterialShortageEndDate;
							} else {
								// when we initially navigate into the s4, we only use the AvailyOrReqmDat of the
								// supply demand item that was selected in order to navigate to the solution view.
								// the backend will determine the shortage period
								this.dateStart = this.navParameter.SelectedSupDemItemDate;
								this.dateEnd = null;
							}

							// set scroll position for the chart
							this.chartScrollPos = parseInt(this.navParameter.ChartScrollPos);
							// read SolutionHeader SupplyDemandItems and SolutionCards
							this._readSolutionViewData(false, null);

							// --------------------------------------------
							// Run the "Solution-Call"
							// --------------------------------------------
							this.requestChartData();

							// Initialize the screen either with the table or with the chart dependent on the selection within S3
							// and also adjust the initial selection of the segmented button (Icon indicating table/chart)
							// Determine whether table or chart shall be displayed out of the navigation parameter
							var oSegmentedButton = this.getView().byId("sapMrpS4ToolbarIcons");
							var sDisplayInChart = this.navParameter.DisplayInChart;
							if (sDisplayInChart === "true") {
								this.isChartVisible = true;
								oSegmentedButton.setSelectedButton(this.getView().byId("btnChart"));
							} else {
								this.isChartVisible = false;
								oSegmentedButton.setSelectedButton(this.getView().byId("btnTable"));
							}

						} else {
							// DE-Register the event handlers because we are leaving S4 now
							this._unsubscribeEvents();
							// DE-Register the onModelLoaded() as soon as we are
							// not on S4 any more
							this.oModel.detachRequestCompleted(this._onModelLoaded, this);

							this._hideChartContainer();

							var oView = this.getView();
							oView.setBindingContext(this.oNullModel);
							var oInfoToolBarCR = this.getView().byId("infoToolBarCR");
							if (oInfoToolBarCR){
								oInfoToolBarCR.setVisible(false);				
							}
						}
					},

					/**
					 * Create path for detail view call The path of the detail view call (s3 call) is generically determined.
					 * Please make sure that: 1.All master key attributes have to be maintained in method getMasterKeyAttributes
					 * of Configuration.js in each app. 2.All master key attributes have to be part of the navigation path
					 * "subDetail" of "Component.js".
					 * 
					 * @memberOf i2d.pp.mrpcockpit.reuse.view.S4parent
					 */
					_getPathDetailView : function() {

						// find entity which is shown in Masterlist
						var masterListEntity = "";
						var serviceUrl = "";
						var serviceList = this.oApplicationFacade.oApplicationImplementation.oConfiguration.getServiceList();
						for ( var index in serviceList) {
							if (serviceList[index].isDefault === true) {
								masterListEntity = serviceList[index].masterCollection;
								serviceUrl = serviceList[index].serviceUrl;
							}
						}

						// read masterList Key attributes
						var masterListKeys = this.oApplicationFacade.oApplicationImplementation.aMasterKeys;

						// find the right order of the attributes
						var schema = this.getView().getModel().getServiceMetadata().dataServices.schema;
						var sortedMasterEntityAttributes = new Array();
						// loop over all schemas
						for ( var schemaCount in schema) {
							// find the right service: Check if the namespace is part of the service URL
							// We cannot compare the namespace with the name of the service in erviceList[index].name
							// because when customers redefine the service only the URL changes, the service name remains the
							// original name.
							if (serviceUrl.indexOf(schema[schemaCount].namespace) >= 0) {
								var service = schema[schemaCount].entityType;
								for ( var serviceCount in service) {
									// find the masterlist entity (defined according to namingconvention "Materials"->"Material"
									if (service[serviceCount].name === masterListEntity.substring(0, masterListEntity.length - 1)) {
										// save the master list keys with the right order
										for ( var keyCount in service[serviceCount].property) {
											sortedMasterEntityAttributes.push(service[serviceCount].property[keyCount].name);
										}
									}
								}
							}
						}

						// use only those attributes in the masterlist but with the order of the entity set definition
						masterListKeys = sortedMasterEntityAttributes.filter(function(element) {
							var sortCount = 0;
							for (sortCount in masterListKeys) {
								var text = masterListKeys[sortCount];
								if (text === element) {
									return true;
								}
							}
							return false;
						});

						// build navigation string
						var path = "/" + masterListEntity + "(";
						for ( var index2 in masterListKeys) {
							if (this.navParameter[masterListKeys[index2]] !== " ") {
								// check for date format
								// all date attributes need a leading "datetime" for the OData call,
								// therefore we need to check every attribute via regEx

								// regexDate searches for dates like '2014-04-09T12:00:00'
								var regexDate = /^[0-9][0-9][0-9][0-9]-[0-1][0-9]-[0-3][0-9]T[0-2][0-9]:[0-5][0-9]:[0-5][0-9]/;

								if (regexDate.test(this.navParameter[masterListKeys[index2]])) {
									path += masterListKeys[index2] + "=datetime'"
											+ encodeURIComponent(this.navParameter[masterListKeys[index2]]) + "',";
								} else {
									path += masterListKeys[index2] + "='" + encodeURIComponent(this.navParameter[masterListKeys[index2]])
											+ "',";
								}
							} else {
								path += masterListKeys[index2] + "='" + "" + "',";
							}
						}
						// cut the last "," and add a ")"
						path = path.substring(0, path.length - 1);
						path += ")";
						return path;
					},
					
					/**
					 * Display warning if change request exists
					 * 
					 * @memberOf i2d.pp.mrpcockpit.reuse.view.S4parent
					 */
					 _displayChangeRequestWarning : function(changeRequestExists) {					 						 
						 if (changeRequestExists){
							 this.getView().byId("infoToolBarCR").setVisible(true);
						 }
						 else {
							 this.getView().byId("infoToolBarCR").setVisible(false);
						 }
					 },	
					 
					/**
					 * Display change requests
					 * 
					 * @memberOf i2d.pp.mrpcockpit.reuse.view.S4parent
					 */
					 onDisplayChangeRequests : function(oEvent) {
						 
						 	//create change request fragment with list
						 	if (!this._oChangeRequestList){					 	
						 		this._oChangeRequestList = sap.ui.xmlfragment("i2d.pp.mrpcockpit.reuse.fragments.ChangeRequestList", this); 
						 		this.getView().addDependent(this._oChangeRequestList);
						 	}
							
							//get old material
							var oldMaterialId = this.dMaterialID;
							
						  //get current material
							var oContext = this.getView().getBindingContext();
							var oObject = oContext.getObject();
							this.dMaterialID = oObject.MaterialID;
							
							// if current material is a new one -> do aggregation binding for this material
							if (oldMaterialId !== this.dMaterialID){
							
								//add Filters
								var aORFilter = new Array();
								aORFilter.push(new sap.ui.model.Filter("SolutionRequestStatus", "EQ", this.Constants.REQUEST_STATUS_REQUESTED));
								aORFilter.push(new sap.ui.model.Filter("SolutionRequestStatus", "EQ", this.Constants.REQUEST_STATUS_ANSWERED));							
								aORFilter.push(new sap.ui.model.Filter("SolutionRequestStatus", "EQ", this.Constants.REQUEST_STATUS_COLLECTED));
								aORFilter.push(new sap.ui.model.Filter("SolutionRequestStatus", "NE", null));
								var oORFilter1 = new sap.ui.model.Filter(aORFilter, false); 
								
								var oORFilter2 = new sap.ui.model.Filter("MaterialID", "EQ", this.dMaterialID);
								
								var aANDFilters = new Array();
								aANDFilters.push(oORFilter1);
								aANDFilters.push(oORFilter2);
								
								var aFilter = new Array();
								aFilter.push(new sap.ui.model.Filter(aANDFilters, true));							
	
								
								// create list item template
								var oList = sap.ui.getCore().byId("idChangeRequestTable");
								var oListItemTemplate = oList.getItems()[0];
								oList.removeItem(oListItemTemplate);
								
								// set model
							 	this._oChangeRequestModel = this.oApplicationFacade.getODataModel();			      	
								oList.setModel(this._oChangeRequestModel, "ChangeRequests"); 	
								
								// bind aggregation
								var url = '/ChangeRequests';	
								oList.bindAggregation("items", {
									path : url,
								  filters: aFilter,
									template : oListItemTemplate														
								});
								
							}	
					    
							// open popover			      
					    var oInfoToolbar = oEvent.getSource();
					    jQuery.sap.delayedCall(0, this, function () {
					      this._oChangeRequestList.openBy(oInfoToolbar);
					    });

					 },				 
					 
					/**
					 * Update the data for the solution cards and rerender the control
					 * 
					 * @memberOf i2d.pp.mrpcockpit.reuse.view.S4parent
					 */
					_updateSolutionCards : function(oView) {

						// Initialize/Rebuild the solution cards
						var ctrlCards = oView.byId("cards");
						var oContext = oView.getBindingContext();
						if (!oContext) {
							return;
						}
						var oSupDemHeader = oContext.getObject();
						var oSolCards = oSupDemHeader.SolCard;
						var oModel = oView.getModel();
						var aCards = new Array();
						for ( var i = 0; i < oSolCards.__list.length; i++) {
							var key = oSolCards.__list[i];
							var object = oModel.oData[key];
							aCards.push(object);
						}
						// Pass the data to the control
						var oModelI18N = oView.getModel("Common_i18n");
						ctrlCards.setModel(oModelI18N, "Common_i18n");
						ctrlCards.addSolutionCards(aCards, oSupDemHeader.MaterialShortageHasNoSolution);
						// Re-Render the control
						ctrlCards.rerender();

					},

					/**
					 * Update the control for the Supply Demand Items
					 * 
					 * @param bFade
					 *          boolean that indicates whether to use fade in the items or show them directly
					 * @param aItems
					 *          array of supply demand items that shall be shown in the table. They are provided in case of a
					 *          preview. if empty, the originals are shown
					 * @memberOf i2d.pp.mrpcockpit.reuse.view.S4parent
					 */
					_updateTableSupplyDemandItems : function(bFade, aItems) {
						var ctrlTable = this.getView().byId("shortages");
						var oContext = this.getView().getBindingContext();
						if (!oContext) {
							return;
						}
						// Get the supply demand header and the solution cards
						// of the current context
						var oSupDemHeader = oContext.getObject();

						if (!aItems) {
							// if this method is not called with items (in case of preview), we
							// have to use the original items
							aItems = this._readOriginSupDemItems();
						}

						// Get start and end date of the current shortage period via the header data
						var dShortageStartDate = oSupDemHeader.MaterialShortageStartDate;
						var dShortageEndDate = oSupDemHeader.MaterialShortageEndDate;

						// Add an additional attribute that indicates if the stock quantity shall be visible in the supply demand
						// items list or not. This additional attribute can be bound in the supply demand items list where we
						// don't have access to the header data which contains the shortage start and end date.
						// The stock quantity shall only be displayed if the date of the MRP element is within the shortage
						// period (shortage start and end date). Reason is, that outside the shortage period not all MRP elements
						// are shown and therefore the user would not understand the quantity.
						for ( var i = 0; i < aItems.length; i++) {
							if ((aItems[i].MRPElementAvailyOrRqmtDate >= dShortageStartDate)
									&& (aItems[i].MRPElementAvailyOrRqmtDate <= dShortageEndDate)) {
								aItems[i].StockQuantityVisible = true;
							} else {
								aItems[i].StockQuantityVisible = false;
							}
						}

						var sPath = oContext.getPath().substring(1);

						var oData = {};
						oData["" + sPath] = {
							SupDemItem : aItems
						};

						if (bFade) {
							$(ctrlTable.getDomRef()).fadeOut(
									function() {
										// exchange the data in the table model

										var m = ctrlTable.getModel();
										m.setData(oData);
										ctrlTable.bindElement(oContext.getPath());
										// re-rendering of the table to set the StyleClasses for coloring
										ctrlTable.updateAggregation("items");
										$(ctrlTable.getDomRef()).fadeIn();

										// we have to update the "no data" text for supDemItem table manually, since the
										// updateFinished event and its event handler of the table control can't be used
										// due to the way we initialize the table
										ctrlTable.setNoDataText(ctrlTable.getModel('Common_i18n').getResourceBundle().getText(
												"tableUpdateFinished"));

									});
						} else {
							var m = ctrlTable.getModel();
							m.setData(oData);
							ctrlTable.bindElement(oContext.getPath());
							// re-rendering of the table to set the StyleClasses for coloring
							ctrlTable.updateAggregation("items");

							// we have to update the "no data" text for supDemItem table manually, since the
							// updateFinished event and its event handler of the table control can't be used
							// due to the way we initialize the table
							ctrlTable.setNoDataText(ctrlTable.getModel('Common_i18n').getResourceBundle().getText(
									"tableUpdateFinished"));
						}
					},

					/**
					 * Reads those Supply Demand Items from the view that were transfered from Backend
					 * 
					 * @memberOf i2d.pp.mrpcockpit.reuse.view.S4parent
					 */
					_readOriginSupDemItems : function() {
						// the Binding Context of the view contains a reference for currently shown Sup Dem Items
						var oContext = this.getView().getBindingContext();
						if (!oContext) {
							return;
						}

						// Get the reference for the Supply Demand Items
						// of the current context
						var oSupDemHeader = oContext.getObject();
						var oSupDemItems = oSupDemHeader.SupDemItem;

						// The application model contains all Supply Demand Items
						var oModel = this.getView().getModel();

						// Read all Supply Demand Items of the current context out of the application model
						var aItems = new Array();
						for ( var i = 0; i < oSupDemItems.__list.length; i++) {
							var key = oSupDemItems.__list[i];
							var object = oModel.oData[key];
							aItems.push(object);
						}

						return aItems;
					},

					/**
					 * Navigate back to S3
					 * 
					 * @memberOf i2d.pp.mrpcockpit.reuse.view.S4parent
					 */
					_navBack : function(oEvent) {
						if (this._getPathDetailView !== undefined) {
							var sPath = this._getPathDetailView().substring(1);

							var bReplace = !jQuery.device.is.phone;
							this.oRouter.navTo(i2d.pp.mrpcockpit.reuse.util.CommonConstants.ROUTING.DETAIL, {
								contextPath : sPath,
								stateID : this.navParameter.stateID
							}, bReplace);
						}
					},

					/**
					 * Handles the OK-Event of the closing dialog Exchange the data of the global model by the changed data in the
					 * UI.
					 * 
					 * @memberOf i2d.pp.mrpcockpit.reuse.view.S4parent
					 */
					onDialogOk : function(channelId, eventId, data) {

						if (data && data.model && data.model.cardModel) {
							// Reset the selected solution card (for preview)
							this._oCard = null;

							// Extract the message defined by the solution dialog and show it in the message toast
							var msg = "";
							if (data.model.cardModel.oData.msg) {
								// Standard behavior
								msg = data.model.cardModel.oData.msg;
							} else {
								// Fallback if the solution dialog has not provided any message
								var oModelI18N = this.getView().getModel("Common_i18n");
								var oBundle = oModelI18N.getResourceBundle();
								msg = oBundle.getText("SOLUTION_DIALOG_OK");
							}
							sap.ca.ui.message.showMessageToast(msg);

							// Trigger a new "Detail Call" required by the Chart Control
							this.requestChartData();

							// Trigger a new "Solution Call"
							// Read the newly created data
							var oCreatedSupDemItem = null;
							if (data.model.responseModel) {
								oCreatedSupDemItem = this._readCreatedSupDemItemKey(data.model.responseModel,
										data.model.cardModel.oData.MaterialShortageSolutionType);
							}
							// Read SolutionHeader SupplyDemandItems and SolutionCards
							this._readSolutionViewData(true, oCreatedSupDemItem);
						}

					},

					/**
					 * Determines the Key for the Supply Demand Item that have been created using a solution card ("Procure" ||
					 * "Transfer")
					 * 
					 * @memberOf i2d.pp.mrpcockpit.reuse.view.S4parent
					 */
					_readCreatedSupDemItemKey : function(oData, solutionType) {

						var oDataResponse = null;
						var requisition = null;
						var order = null;

						try {
							oDataResponse = oData.__batchResponses[0].__changeResponses[0].data;
						} catch (e) {
							return null;
						}

						switch (solutionType) {

							// Category - Purchase Requisition
							case this.Constants.SOLUTIONTYPE_PR_CREATE :
								requisition = oDataResponse.MMPurchaseRequisitionItems.results[0];

								return {
									MRPElementCategory : this.Constants.MRP_ELEMENT_CATEGORY_PURRQS,
									MRPElement_Int : requisition.PurchaseRequisitionID,
									MRPElementItem_Int : requisition.ItemID,
									MRPElementScheduleLine_Int : ""
								};

								// Category - Release Order for a Stock Transfer Requisition
							case this.Constants.SOLUTIONTYPE_TOR_CREATE :
								requisition = oDataResponse.MMPurchaseRequisitionItems.results[0];

								return {
									MRPElementCategory : this.Constants.MRP_ELEMENT_CATEGORY_PRQREL,
									MRPElement_Int : requisition.PurchaseRequisitionID,
									MRPElementItem_Int : requisition.ItemID,
									MRPElementScheduleLine_Int : ""
								};

								// Category - Purchase Order Item
							case this.Constants.SOLUTIONTYPE_PO_CREATE :
								order = oDataResponse.MMPurchaseOrderItems.results[0].MMPurchaseOrderScheduleLines.results[0];
								return {
									MRPElementCategory : this.Constants.MRP_ELEMENT_CATEGORY_POITEM,
									MRPElement_Int : order.PurchaseOrderID,
									MRPElementItem_Int : order.ItemID,
									MRPElementScheduleLine_Int : order.ScheduleLineID
								};

								// Category - Stock Transfer Order
							case this.Constants.SOLUTIONTYPE_TO_CREATE :
								order = oDataResponse.MMPurchaseOrderItems.results[0].MMPurchaseOrderScheduleLines.results[0];
								return {
									MRPElementCategory : this.Constants.MRP_ELEMENT_CATEGORY_RELORD,
									MRPElement_Int : order.PurchaseOrderID,
									MRPElementItem_Int : order.ItemID,
									MRPElementScheduleLine_Int : order.ScheduleLineID
								};
							default :
								return null;
						}
					},

					/**
					 * Reads the Solution Header in Batch mode and passes all currently shown Supply Demand Items *
					 * 
					 * @param bWithSupDemItems
					 *          All Supply Demand Items which are currently shown are passed to the backend and will be shown
					 *          again
					 * @memberOf i2d.pp.mrpcockpit.reuse.view.S4parent
					 */
					_readSolutionViewData : function(bWithSupDemItems, newSupDemItem) {

						// --------------------------------------------
						// Prepare and run the "Solution-Call"
						// --------------------------------------------

						var backendVersion = i2d.pp.mrpcockpit.reuse.util.InteroperabilityHelper
								.getServiceSchemaVersion(this.oApplicationFacade);

						if (backendVersion === 1) {

							// Wave 3
							this.path = i2d.pp.mrpcockpit.reuse.util.Wave3Helper.getPathSolutionView.call(this);
							this.view.bindElement(this.path, {
								"expand" : 'SolCard,SupDemItem'
							});

						} else {

							// Wave 5 ...
							this.view.byId("oDataBindingServant").bindAggregation(
									"items",
									{
										path : "/PPMRPSolHeaders",
										filters : this._createSolHeaderFilter(bWithSupDemItems, newSupDemItem, this.navParameter,
												this.dateStart, this.dateEnd),
										parameters : {
											expand : 'SolCard,SupDemItem'
										},
										template : this.oTemplate
									});
						}
					},

					/**
					 * Creates the Soltuion Header Filters
					 * 
					 * @param bWithSupDemItems
					 *          The Filter also contains all Supply Demand Items of the list
					 * @memberOf i2d.pp.mrpcockpit.reuse.view.S4parent
					 */
					_createSolHeaderFilter : function(bWithSupDemItems, newSupDemItem, oNavParameter, dateStart, dateEnd) {
						// there are two parts of the filter, the solution header and the supply demand item keys

						var aFilter = new Array();
						// part 1: the key attributes of the solution header
						aFilter
								.push(new sap.ui.model.Filter('MaterialID', sap.ui.model.FilterOperator.EQ, oNavParameter.MaterialID));
						aFilter.push(new sap.ui.model.Filter('MRPPlant', sap.ui.model.FilterOperator.EQ, oNavParameter.MRPPlant));
						aFilter.push(new sap.ui.model.Filter('MRPArea', sap.ui.model.FilterOperator.EQ, oNavParameter.MRPArea));
						aFilter.push(new sap.ui.model.Filter('MRPPlanningSegmentType', sap.ui.model.FilterOperator.EQ,
								oNavParameter.MRPPlanningSegmentType));
						aFilter.push(new sap.ui.model.Filter('MRPPlanningSegmentNumber', sap.ui.model.FilterOperator.EQ,
								oNavParameter.MRPPlanningSegmentNumber));
						aFilter.push(new sap.ui.model.Filter('MaterialShortageDefinitionID', sap.ui.model.FilterOperator.EQ,
								oNavParameter.MaterialShortageDefinitionID));
						aFilter
								.push(new sap.ui.model.Filter('MaterialShortageStartDate', sap.ui.model.FilterOperator.EQ, dateStart));

						// if there is no end date maintained we are on the first call
						if (dateEnd !== null) {
							aFilter.push(new sap.ui.model.Filter('MaterialShortageEndDate', sap.ui.model.FilterOperator.EQ, dateEnd));
						} else {
							// because oData does not allow an empty date for a key attribute
							// we have to set 01.01.1753
							aFilter.push(new sap.ui.model.Filter('MaterialShortageEndDate', sap.ui.model.FilterOperator.EQ,
									"1753-01-01T12:00:00"));
						}

						// part 2: the key attributes of the currently shown Supply Demand Items

						if (bWithSupDemItems) {

							var aSupDemItems = this._readOriginSupDemItems();

							// add also the Supply Deman Item the user created via Solution Card
							if (newSupDemItem) {
								aSupDemItems.push(newSupDemItem);
							}

							var aFilterCategory = new Array();
							var aFilterElement = new Array();
							var aFilterElementItem = new Array();
							var aFilterScheduleLine = new Array();

							for ( var i in aSupDemItems) {
								aFilterCategory.push(aSupDemItems[i].MRPElementCategory);// MRPElementCategory
								aFilterElement.push(aSupDemItems[i].MRPElement_Int);// MRPElement
								aFilterElementItem.push(aSupDemItems[i].MRPElementItem_Int);// MRPElementItem
								aFilterScheduleLine.push(aSupDemItems[i].MRPElementScheduleLine_Int);// MRPElementScheduleLine
							}
							var aANDFilters = new Array();
							aANDFilters.push(i2d.pp.mrpcockpit.reuse.util.Helper.getORMultiFilter('MRPElementCategory',
									aFilterCategory));
							aANDFilters.push(i2d.pp.mrpcockpit.reuse.util.Helper.getORMultiFilter('MRPElement', aFilterElement));
							aANDFilters.push(i2d.pp.mrpcockpit.reuse.util.Helper.getORMultiFilter('MRPElementItem',
									aFilterElementItem));
							aANDFilters.push(i2d.pp.mrpcockpit.reuse.util.Helper.getORMultiFilter('MRPElementScheduleLine',
									aFilterScheduleLine));

							aFilter.push(new sap.ui.model.Filter(aANDFilters, true));
						}

						return aFilter;
					},

					/**
					 * Handles the "run preview" event. This method creates a preview for the selected solution card for the table
					 * control and the chart control. Both previews are created in order to keep them in sync and allow switching
					 * the view.
					 * 
					 * @memberOf i2d.pp.mrpcockpit.reuse.view.S4parent
					 */
					_previewRun : function(channelId, eventId, data, bFade) {

						// If the 'client' doesn't provide fading information,
						// we use true as default
						if (bFade === null || bFade === undefined) {
							bFade = true;
						}
						// ---------------------------------------------
						// Extract the data from the selected solution card
						// ---------------------------------------------
						if (data && data.model) {
							// Save the reference of the currently selected
							// solution card at the S4 controller
							this._oCard = data.model;
						}

						// ---------------------------------------------
						// Check preconditions for the preview
						// ---------------------------------------------
						// A solution card has to be selected
						if (!this._oCard) {
							return;
						}

						var oView = this.getView();
						var oModel = oView.getModel();
						var context = oView.getBindingContext();
						if (!context) {
							// If there is no context - there are no cards...
							return;
						}
						// Get the supply demand header and the solution cards
						// of the current context
						var oSupDemHeader = context.getObject();
						var oSupDemItems = oSupDemHeader.SupDemItem;
						if (oSupDemItems.__list.length === 0) {
							// If there are no supply demand items, there's no preview
							return;
						}

						// ---------------------------------------------
						// The preview must run on a copy of the supply demand items
						// that are stored in the OData model. Therefore do
						// a clone.
						// ---------------------------------------------
						var aModelClone = [];
						for ( var i = 0; i < oSupDemItems.__list.length; i++) {
							var key = oSupDemItems.__list[i];
							var oClone = jQuery.extend({}, oModel.oData[key]);
							aModelClone.push(oClone);
						}

						// ---------------------------------------------
						// Run the preview using the 'CalulationEngine'.
						// The engine works on the cloned data.
						// ---------------------------------------------
						var aCalcEngineResult = [];
						var aSupDemItems = [];
						var sErrorText = "";
						var oModelI18N = this.getView().getModel("Common_i18n");
						var oBundle = oModelI18N.getResourceBundle();
						var oCalculationEngine = new i2d.pp.mrpcockpit.reuse.util.CalculationEngine(oModelI18N);

						// check which calculation must be done (chart or table)
						if (!this.isChartVisible) {
							// Run the preview for the TABLE
							aCalcEngineResult = oCalculationEngine.previewTable(aModelClone, this._oCard,
									oSupDemHeader.MaterialShortageStartDate, oSupDemHeader.MaterialShortageEndDate, new Date());
							// Update table with results of preview
							switch (aCalcEngineResult[0]) {
								case 0 :
									// Preview was ok; Update the supply demand items
									aSupDemItems = aCalcEngineResult[1];
									sErrorText = "";
									break;
								case -1 :
									// Preview returned an error - no solution card provided
									aSupDemItems = [];
									sErrorText = oBundle.getText("PREVIEW_ERROR_NO_CARD");
									break;
								case -2 :
									// Preview returned an error - target date is in the past
									aSupDemItems = [];
									sErrorText = oBundle.getText("PREVIEW_ERROR_DATE_INVALID");
									break;
								default :
									aSupDemItems = [];
									sErrorText = oBundle.getText("PREVIEW_ERROR_UNKNOWN");
							}
							// Update the supply demand items table
							this._updateTableSupplyDemandItems(bFade, aSupDemItems);
							if (sErrorText) {
								// Show the error message in a message box
								sap.ca.ui.message.showMessageBox({
									type : sap.ca.ui.message.Type.ERROR,
									message : oBundle.getText("PREVIEW_ERROR_SHORT"),
									details : sErrorText
								});
							}

						} else {
							// Run the preview for the CHART
							if (this._oCard.MaterialShortageSolutionType !== this.Constants.SOLUTIONTYPE_ACCEPT) {
								this.addChartDelta(this._oCard);
							}
							var aResult = oCalculationEngine.previewChart(this._oCard);
						}
					},

					/**
					 * Handles the "cancel preview" event. It uses the objects within the oData models to create a local array of
					 * objects (SupDemItems). This data is directly set to the model of the table control.
					 * 
					 * @memberOf i2d.pp.mrpcockpit.reuse.view.S4parent
					 */
					_previewCancel : function(channelId, eventId, data) {

						// Remove the active card from the controller
						// that represents the current preview.
						if (!this._oCard) {
							return;
						}
						this._oCard = null;

						// Reset the supply demand items to the original state
						if (!this.isChartVisible) {
							// Update Table
							this._updateTableSupplyDemandItems(true);
						}
						// Update chart
						this.removeChartDelta();
					},

					/**
					 * Handles the "exit" event.
					 * 
					 * @memberOf i2d.pp.mrpcockpit.reuse.view.S4parent
					 */
					onExit : function() {

						// Check if the Collaboration Dialog is still open and close it
						if (this.oCollaborationDialog && this.oCollaborationDialog.isOpen()) {
							this.oCollaborationDialog.close();
							this.oCollaborationDialog.destroy();
						}

						this._oCard = null;
						// Unsubscribe all events
						this._unsubscribeEvents();
						// remove resize handler
						this.removeHandler();

						this.oApplicationFacade.deRegisterOnMasterListRefresh(this.onMasterRefresh, this);
						// Detach the eventhandler for routing
						this.oRouter.detachRoutePatternMatched(this._onRoutePatternMatched, this);
						
						// destroy change request fragment
						if (this._oChangeRequestList){	
							
							var oListItem = sap.ui.getCore().byId("idChangeRequestlistItem");
							if (oListItem) { oListItem.destroy(); }
							
							var oList = sap.ui.getCore().byId("idChangeRequestTable");
							if (oList) { oList.destroy(); }
							
							var oPopover = sap.ui.getCore().byId("idChangeRequestPopover");
							if (oPopover) { oPopover.destroy(); }
							
							this._oChangeRequestList.removeAllContent();
							this._oChangeRequestList.destroy();

						}
					},

					/**
					 * Returns the template for the list (Supply Demand Items)
					 * 
					 * @memberOf i2d.pp.mrpcockpit.reuse.view.S4parent
					 */
					_getListTemplate : function(sId, oContext) {

						// The sId contains the view name. We use this name to get the
						// reference to that view and therefore its controller.
						// We need the controller because there's defined whether to make the change request icon clickable or not
						var bClickable = true; // Default
						var oCore = sap.ui.getCore();
						var id = sId.split("--")[0];
						var oView = oCore.getElementById(id);
						if (oView) {
							bClickable = oView.getController()._bCrIconClickable;
						}

						// Prepare the icon for the change request
						var oIconCr = new sap.ui.core.Icon(
								{
									visible : "{parts: [{path:'SolutionRequestStatus'}, {path:'MRPElementCategory'}, {path:'MRPElementOpenQuantity'}], formatter:'i2d.pp.mrpcockpit.reuse.util.CommonFormatter.getChangeRequestVisibility'}",
									src : "sap-icon://BusinessSuiteInAppSymbols/icon-change-request",
									tooltip : "{parts: [{path:'SolutionRequestStatus'}, {path:'VendorResponse'}], formatter:'i2d.pp.mrpcockpit.reuse.util.CommonFormatter.getChangeRequestTooltip'}"
								});

						// Decide whether to make the change request icon clickable
						if (bClickable === true) {
							// Attach the press event handler to the icon
							oIconCr.attachPress(function(evt) {
								// Navigate to the Change Request App
								var sError = i2d.pp.mrpcockpit.reuse.util.CollaborationHelper.onCRPressed(evt);
								// Error handling for the navigation
								if (sError) {
									sap.ca.ui.message.showMessageBox({
										type : sap.ca.ui.message.Type.ERROR,
										message : sError
									});
								}
							});
						}

						// Prepare the icons for the indicator
						var oIconIndicator = new sap.ui.core.Icon(
								{
									visible : "{parts: [{path:'MRPElementQuantityIsFirm'}, {path:'MRPElementIsReleased'}, {path:'MRPElementIsPartiallyDelivered'}, {path:'MRPElementCategory'}, {path:'MRPElementOpenQuantity'}], formatter:'i2d.pp.mrpcockpit.reuse.util.CommonFormatter.flagIconSolViewVisible'}",
									tooltip : "{parts: [{path:'MRPElementQuantityIsFirm'}, {path:'MRPElementIsReleased'}, {path:'MRPElementIsPartiallyDelivered'}, {path:'MRPElementCategory'}, {path:'MRPElementOpenQuantity'}], formatter:'i2d.pp.mrpcockpit.reuse.util.CommonFormatter.flagIconSolViewTooltip'}",
									src : "{parts: [{path:'MRPElementQuantityIsFirm'}, {path:'MRPElementIsReleased'}, {path:'MRPElementIsPartiallyDelivered'}, {path:'MRPElementCategory'}, {path:'MRPElementOpenQuantity'}], formatter:'i2d.pp.mrpcockpit.reuse.util.CommonFormatter.flagIconSolView'}"
								});

						// Build the main ColumnListItem for the supply demand items
						var oTemplate = new sap.m.ColumnListItem(
								{
									unread : false,
									cells : [
											// Date
											new sap.m.Label(
													{
														text : "{path: 'MRPElementAvailyOrRqmtDate', type:'sap.ca.ui.model.type.Date', formatOptions: {style:'short'}}",
														visible : "{path:'MRPElementCategory', formatter:'i2d.pp.mrpcockpit.reuse.util.CommonFormatter.isSupplyDemandItem'}",
														customData : [new sap.ui.core.CustomData(
																{
																	key : "hideStockDate",
																	value : "{parts: [{path:'MRPElementCategory'},{path:'MRPElementAvailyOrRqmtDate'}], formatter:'i2d.pp.mrpcockpit.reuse.util.CommonFormatter.hideStockDate'}"
																})]
													}),
											// Indicators
											new sap.ui.layout.HorizontalLayout({
												content : [oIconIndicator, oIconCr]
											}),
											// MRP Element
											new sap.m.ObjectIdentifier(
													{
														title : "{parts:[{path: 'NumberOfRequirements'}, {path: 'MRPElementCategory'}, {path: 'MRPElementCategoryShortName'}, {path: 'MRPElement'}, {path: 'MRPElementItem'}, {path: 'MRPElementDocumentType'}, {path: 'SourceMRPElementCategory'}, {path: 'SourceMRPElement'}, {path: 'SourceMRPElementItem'}], formatter:'i2d.pp.mrpcockpit.reuse.util.CommonFormatter.getRequirements'}",
														text : "{parts:[{path: 'NumberOfRequirements'}, {path: 'MRPElementCategory'}, {path: 'MRPElementBusinessPartnerName'}, {path: 'MRPElementBusinessPartnerType'}, {path: 'MRPElementBusinessPartnerID'}, {path: 'MRPElementDocumentType'}, {path: 'Assembly'}, {path: 'MaterialSafetyStockQty'}, {path: 'TargetQuantityUnitDcmls'}, {path: 'UnitOfMeasureTechnicalName'}], formatter:'i2d.pp.mrpcockpit.reuse.util.CommonFormatter.vendorOrReq'}"
													}),
											// Quantity
											new sap.ui.layout.HorizontalLayout(
													{
														content : [

																// Status Error
																new sap.m.ObjectStatus(
																		{
																			icon : "{parts:[{path: 'MRPElementOpenQuantity'}, {path: 'MRPElementCategory'}], formatter:'i2d.pp.mrpcockpit.reuse.util.CommonFormatter.sditemicon'}",
																			state : "{parts:[{path: 'MRPElementOpenQuantity'}, {path: 'MRPElementCategory'}], formatter:'i2d.pp.mrpcockpit.reuse.util.CommonFormatter.sdIconState'}",
																			tooltip : "{parts:[{path: 'MRPElementOpenQuantity'}, {path: 'MRPElementCategory'}], formatter:'i2d.pp.mrpcockpit.reuse.util.CommonFormatter.sditemtooltip'}"
																		}),
																new sap.m.Text({
																	width : "0.5rem"
																}),

																// Quantity
																new sap.m.ObjectNumber(
																		{
																			number : "{parts:[ {path: 'MRPElementOpenQuantity'}, {path: 'TargetQuantityUnitDcmls'}], formatter:'i2d.pp.mrpcockpit.reuse.util.CommonFormatter.quantity'}",
																			numberUnit : "{UnitOfMeasureTechnicalName}",
																			emphasized : false
																		})]
													}).addStyleClass("sapMRPStockQty"),

											// Available
											new sap.m.ObjectNumber(
													{
														number : "{parts:[{path: 'MRPAvailableQuantity'}, {path: 'TargetQuantityUnitDcmls'}], formatter:'i2d.pp.mrpcockpit.reuse.util.CommonFormatter.numberFormat'}",
														numberUnit : "{UnitOfMeasureTechnicalName}",
														visible : "{path: 'StockQuantityVisible'}",
														customData : {
															Type : "sap.ui.core.CustomData",
															key : "getMergingKey",
															value : "{parts:[{path:'MRPElementCategory'}, {path: 'MRPElementAvailyOrRqmtDate'}, {path: 'MRPAvailableQuantity'}], formatter: 'i2d.pp.mrpcockpit.reuse.util.CommonFormatter.availableQuantityMergingKey'}"
														}
													}).addStyleClass("sapMRPAvailableQuantity")]
								});

						var value = parseFloat(oContext.getProperty("MRPAvailableQuantity"));
						// below critical quantity, the material is below safety stock
						var valueCritical = parseFloat(oContext.getProperty("MaterialShortageCriticalQty"));
						// below threshold, the material is short
						var valueThreshold = parseFloat(oContext.getProperty("MaterialShortageThresholdQty"));
						// Get the current object that is used
						var oObject = oContext.getObject();

						// *******************************************************
						// Do the coloring of the supply demand items
						// *******************************************************
						// remove all style classes
						oTemplate.removeStyleClass("sapMRPShortage");
						oTemplate.removeStyleClass("sapMRPShortageSolved");
						oTemplate.removeStyleClass("sapMRPElementChanged");
						oTemplate.removeStyleClass("sapMRPShortageAccepted");
						oTemplate.removeStyleClass("sapMRPShortageSafetyStock");

						if (oObject.MRPAvailability === i2d.pp.mrpcockpit.reuse.util.CommonConstants.MRP_AVAILABILITY_ACCEPTED) {
							// Shortage was accepted.
							oTemplate.addStyleClass("sapMRPShortageAccepted");

						} else {
							// Standard behavior we are either in the initial call or in the preview.
							if (oObject.ChangedMrpElement && oObject.ChangedMrpElement === true) {
								// This is the changed element in the preview. It will be highlighted separately.
								oTemplate.addStyleClass("sapMRPElementChanged");
							} else if ((value < valueThreshold)
									&& (i2d.pp.mrpcockpit.reuse.util.CommonFormatter.isStockItem(oObject.MRPElementCategory) || (Number(oObject.MRPElementOpenQuantity) < 0))) {
								// material is short, below the threshold AND (is the stock item or item is a requirement)
								oTemplate.addStyleClass("sapMRPShortage");
							} else if ((value < valueCritical)
									&& (i2d.pp.mrpcockpit.reuse.util.CommonFormatter.isStockItem(oObject.MRPElementCategory) || (Number(oObject.MRPElementOpenQuantity) < 0))) {
								// Value is below safety stock AND (is the stock item or item is a requirement)
								oTemplate.addStyleClass("sapMRPShortageSafetyStock");
							} else if ((value >= valueCritical) && (oObject.InitialShortage && oObject.InitialShortage === true)) {
								// This element was initially below safety stock but has been increased in the preview.
								oTemplate.addStyleClass("sapMRPShortageSolved");
							}
						}

						return oTemplate;

					},

					/**
					 * Switches between the Chart view and the Table view and vice versa.
					 * 
					 * @memberOf i2d.pp.mrpcockpit.reuse.view.S4parent
					 */
					switchView : function() {
						// Trigger the preview
						this._previewRun(null, null, null, false);
					},

					/**
					 * switches to Chart view
					 * 
					 * @param bFade
					 *          boolean that indicates whether to use fade in the items or show them directly
					 * @memberOf i2d.pp.mrpcockpit.reuse.view.S4parent
					 */
					switchToChart : function(bFade) {
						this.isChartVisible = true;
						var ctrlTable = this.getView().byId("shortages");
						var that = this;
						if (bFade) {
							// we do use fadeOut and not addContent or removing the visibility so we can
							// calculate the height of the chart
							$(ctrlTable.getDomRef()).fadeOut(function() {
								// exchange the data in the table model
								// ---------------------------------------------
								// Do Fade in only if no Solution Card is played
								// otherwise fade in will be done by previewRun
								// ---------------------------------------------
								var ctrlChart = that.getView().byId("solChartContainer");
								// get rid of initial flickering of the chart. We need it in the dom tree, however
								// it should not be displayed. So we set the witdth and the height to 0 px and
								// set it afterwards to 100%
								that._showChartContainer();

								$(ctrlChart.getDomRef()).fadeIn(function() {
									if (that._oCard) {
										// Update chart
										that._previewRun(null, null, null, bFade);
									} else {
										// Update chart
										that.removeChartDelta();
									}
								});
							});
						} else {

							// get rid of initial flickering of the chart. We need it in the dom tree, however
							// it should not be displayed. So we set the witdth and the height to 0 px and
							// set it afterwards to 100%
							that._showChartContainer();
							// Hide the table
							that._hideTable();
							// Set the chart to basic view to suppress the animation
							// when the chart becomes visible.
							this.removeChartDelta();
							// Update the chart without fading
							if (that._oCard) {
								// Update chart
								that._previewRun(null, null, null, bFade);
							}
						}
					},

					/**
					 * switches to Table view
					 * 
					 * @param bFade
					 *          boolean that indicates whether to use fade in the items or show them directly
					 * @memberOf i2d.pp.mrpcockpit.reuse.view.S4parent
					 */
					switchToTable : function(bFade) {
						this.isChartVisible = false;
						var ctrlChart = this.getView().byId("solChartContainer");
						var that = this;
						if (bFade) {
							// we do use fadeOut and not addContent or removing the visibility so we can
							// calculate the height of the chart
							$(ctrlChart.getDomRef()).fadeOut(function() {
								// exchange the data in the table model
								if (that._oCard) {
									// Trigger the preview in case a solution card is played
									that._previewRun(null, null, null, bFade);
								} else {
									// if no solution card is played, we need to update the supply
									// demand items in order to receive the correct data
									that._updateTableSupplyDemandItems(bFade);
								}
							});
						} else {
							// Don't use any 'fading'. Just exchange the data
							// Hide the chart container
							this._hideChartContainer();
							// Ensure that the table is visible
							this._showTable();
							// Check if a card ('preview') is active
							if (that._oCard) {
								// Trigger the preview in case a solution card is played
								that._previewRun(null, null, null, bFade);
							} else {
								// if no solution card is played, we need to update the supply
								// demand items in order to receive the correct data
								that._updateTableSupplyDemandItems(bFade);
							}
						}
					},

					/**
					 * This method shows the table with supply demand items
					 * 
					 * @memberOf i2d.pp.mrpcockpit.reuse.view.S4parent
					 */
					_showTable : function() {
						// Unhide the table control
						var oCtrlTable = this.byId('shortages');
						oCtrlTable.setVisible(true);
					},

					/**
					 * This method hides the table with supply demand items
					 * 
					 * @memberOf i2d.pp.mrpcockpit.reuse.view.S4parent
					 */
					_hideTable : function() {
						// Hide the table control
						var oCtrlTable = this.byId('shortages');
						oCtrlTable.setVisible(false);
					},

					/**
					 * This method is the handler for the segmented button within the table toolbar that allows the user to switch
					 * between the table and the chart view
					 * 
					 * @memberOf i2d.pp.mrpcockpit.reuse.view.S4parent
					 */
					onToolbarIconSelect : function(oEvent) {
						var oSource = oEvent.getSource();
						var sButtonId = oSource.getSelectedButton();
						if (sButtonId.match("btnChart")) {
							// The chart button/icon has been pressed
							this.switchToChart(false);
						} else {
							// The table button/icon has been pressed
							this.switchToTable(false);
						}
					},

					/**
					 * Initialize the chart
					 * 
					 * @memberOf i2d.pp.mrpcockpit.reuse.view.S4parent
					 */
					initChart : function() {
						var oChart = this.getView().byId("chart");
						this.oChartModel = new sap.ui.model.json.JSONModel();
						// the model doesn't support passing the size limit directly with the constructor
						// (whyever), so we have to set it afterwards with a separate call
						this.oChartModel.setSizeLimit(10000);

						oChart.setModel(this.oChartModel);

						var oChartValueTemplate = new i2d.pp.mrpcockpit.reuse.controls.ChartValue({
							date : "{date}",
							demand : "{demand}",
							supply : "{supply}",
							shortageAccepted : "{shortageAccepted}"
						});
						// var oChartDeltaTemplate = new i2d.pp.mrpcockpit.reuse.controls.ChartValue({
						// date : "{date}",
						// demand : "{demand}",
						// supply : "{supply}"
						// });

						var balanceDotTooltip = this.getView().getModel("Common_i18n").getResourceBundle().getText("XTOL_BAL_DOT");

						oChart.setProperty("showOverview", true, true);
						oChart.setProperty("fixOverviewHeight", 16, true);
						oChart.setProperty("minOverviewBarSize", 0, true);
						oChart.setProperty("shiftLeft", -10, true);
						oChart.setProperty("height", "300px", true);
						oChart.setProperty("width", "100%", true);
						oChart.setProperty("minChartHeight", "180px", true);
						oChart.setProperty("allowNavigation", false, true);
						oChart.setProperty("balanceDotTooltip", balanceDotTooltip);
						// oChart.setProperty("sizeDOMNodeId", this.getView().byId("pageChart").getId(), true);
						oChart.bindProperty("shiftLeft", "/shiftLeft");
						oChart.bindProperty("unitDecimals", "/decimals");
						oChart.bindProperty("startBalance", "/startBalance");
						oChart.bindProperty("minStock", "/minStock");
						oChart.bindProperty("safetyStock", "/safetyStock");
						oChart.bindValues("/chartData", oChartValueTemplate);
					},

					/**
					 * Execute the detail call to retrieve the required data for the chart
					 * 
					 * @memberOf i2d.pp.mrpcockpit.reuse.view.S4parent
					 */
					requestChartData : function() {
						var path = this._getPathDetailView() + "/" + this.navParameter.DetailListNavProperty;
						// Detail Call
						this.getView().getModel().read(path, null, null, true, jQuery.proxy(this.processChartData, this),
								function(oError) {
									sap.ca.ui.message.showMessageBox({
										type : sap.ca.ui.message.Type.ERROR,
										// TODO: IMPROVEMENT replace by a translatable text
										message : "Chart cannot be displayed because the required data could not be retrieved",
										details : "Chart cannot be displayed because the required data could not be retrieved"
									});
								});
					},

					/**
					 * Gets the result of the detail call, converts them to the JSON model, and displays the data in the chart
					 * 
					 * @memberOf i2d.pp.mrpcockpit.reuse.view.S4parent
					 */
					processChartData : function(oData, oResponse) {
						var view = this.getView();
						var oCalculationEngine = new i2d.pp.mrpcockpit.reuse.util.CalculationEngine(view.getModel("Common_i18n"));
						// var oModelData = oCalculationEngine.initialChartData(oResponse.data.results, this.dateStart,
						// this.dateEnd,
						// this.chartScrollPos);
						var oModelData = oCalculationEngine.initialChartData(oResponse.data.__batchResponses[0].data.results,
								this.dateStart, this.dateEnd, this.chartScrollPos);
						// oModelData.shiftLeft = -30;
						this.oChartModel.setData(oModelData);
						// cleanup deltas from previus charts
						this.removeChartDelta(true);
					},

					/**
					 * Update the chart preview?
					 * 
					 * @memberOf i2d.pp.mrpcockpit.reuse.view.S4parent
					 */
					addChartDelta : function(oCard) {
						var oCalculationEngine = new i2d.pp.mrpcockpit.reuse.util.CalculationEngine(this.getView().getModel(
								"Common_i18n"));
						var oPreviewData = oCalculationEngine.previewChartData(oCard);
						var oChart = this.getView().byId("chart");
						oChart.setDeltas(oPreviewData.deltas);
					},

					/**
					 * Reset the chart, i.e. remove all deltas. This also triggers the redering of the chart.
					 * 
					 * @memberOf i2d.pp.mrpcockpit.reuse.view.S4parent
					 */
					removeChartDelta : function(bNoAnimation) {

						var oChart = this.getView().byId("chart");
						oChart.setDeltas([], bNoAnimation);
					},

					/**
					 * This method revokes the acceptance of a former accepted shortage. It is called out of
					 * 'onSolutionCardExecute'.
					 * 
					 * @param oModelCard
					 *          The model of the selected solution card
					 * @memberOf i2d.pp.mrpcockpit.reuse.view.S4parent
					 */
					_revokeAcceptedShortage : function(oModelCard) {
						var oModelI18N = this.getView().getModel("Common_i18n");
						var oBundle = oModelI18N.getResourceBundle();
						// Define the handles for the asynchronous call
						var oHandlerOrder = {};
						oHandlerOrder.fnSuccess = function(oData, oResponse, aErrorResponses) {
							// We have to track the error responses!
							sap.ca.ui.utils.busydialog.releaseBusyDialog();
							// Check if errors have occurred within the batch update
							if (aErrorResponses.length > 0) {
								// Extract the error message out of the response object
								var sErrorText = i2d.pp.mrpcockpit.reuse.util.Helper.extractErrorMsgFromBatchResponse(oBundle,
										aErrorResponses);
								// Show the error message in a message box
								sap.ca.ui.message.showMessageBox({
									type : sap.ca.ui.message.Type.ERROR,
									message : oBundle.getText("CARD_CANCEL_ACCEPTED_FAIL"),
									details : sErrorText
								});
								var bus = sap.ui.getCore().getEventBus();
								bus.publish(this.Constants.EVENT_CHANNELID_CARD_DIALOG_DATACHANGED, this.Constants.EVENT_EVENTID_ERROR,
										null);
							} else {
								// Do the solution call
								this._readSolutionViewData(true, null);
								// Show the message toast
								var sMsg = oBundle.getText("CARD_CANCEL_ACCEPTED");
								sap.ca.ui.message.showMessageToast(sMsg);

								// Trigger a refresh of the master list, so the 'processed' state of the shortage
								// will get reset.
								var bus = sap.ui.getCore().getEventBus();
								bus.publish(this.Constants.EVENT_CHANNELID_CARD_DIALOG_DATACHANGED, this.Constants.EVENT_EVENTID_OK,
										null);
							}
						}.bind(this);
						oHandlerOrder.fnError = function(oError) {
							sap.ca.ui.utils.busydialog.releaseBusyDialog();
							var sErrorText = "";
							// Check if/Ensure the response object contains a body
							if (oError && oError.response && oError.response.body) {
								// Extract the error message out of the response object
								sErrorText = i2d.pp.mrpcockpit.reuse.util.Helper.extractErrorMsgFromStream(oBundle,
										oError.response.body);
							} else {
								// Use a default for an unknown error
								sErrorText = oBundle.getText("SOLUTION_DIALOG_ERROR_UNKNOWN");
							}
							// Show the error message in a message box
							sap.ca.ui.message.showMessageBox({
								type : sap.ca.ui.message.Type.ERROR,
								message : oBundle.getText("CARD_CANCEL_ACCEPTED_FAIL"),
								details : sErrorText
							});
							var bus = sap.ui.getCore().getEventBus();
							bus.publish(this.Constants.EVENT_CHANNELID_CARD_DIALOG_DATACHANGED, this.Constants.EVENT_EVENTID_ERROR,
									null);
						}.bind(this);

						// Show the busy dialog
						sap.ca.ui.utils.busydialog.requireBusyDialog({
							text : oBundle.getText("SOLUTION_DIALOG_MSG_SAVE_WAITING")
						});

						// Remove the Acceptance of the Shortage
						var sErrorText = i2d.pp.mrpcockpit.reuse.util.CollaborationHelper.deleteShortageAcceptBatch(oModelCard,
								oHandlerOrder);
						if (sErrorText) {
							sap.ca.ui.utils.busydialog.releaseBusyDialog();
							sap.ca.ui.message.showMessageBox({
								type : sap.ca.ui.message.Type.ERROR,
								message : oBundle.getText(sErrorText)
							});
						} else {
							var bus = sap.ui.getCore().getEventBus();
							bus.publish(this.Constants.EVENT_CHANNELID_CARD_DIALOG_DATACHANGED, this.Constants.EVENT_EVENTID_EXECUTE,
									null);
						}
					},

					/**
					 * This method opens the solution dialogs based on the selected solution card.
					 * 
					 * @memberOf i2d.pp.mrpcockpit.reuse.view.S4parent
					 */
					onSolutionCardExecute : function(channelId, eventId, data) {
						// Init the sViewName with an invalid value.
						var sViewName = "";
						var oOrgModel = data.model;
						// We have to work on a clone of the original model within the dialog
						var oModelCard = jQuery.extend({}, oOrgModel);

						var backendVersion = i2d.pp.mrpcockpit.reuse.util.InteroperabilityHelper
								.getServiceSchemaVersion(this.oApplicationFacade);
						if (backendVersion === 1) {
							// convert oData of Wave 3 to Wave 5 Interface
							i2d.pp.mrpcockpit.reuse.util.Wave3CollaborationHelper._mapOData3ToOdata5(oModelCard);
						}

						// The required view/fragment is related to the given solution type
						switch (oModelCard.MaterialShortageSolutionType) {

							case this.Constants.SOLUTIONTYPE_ACCEPT :
								// If the shortage has no realistic end date ("infinity" in year 9999)
								// we show an error message and don't show any dialog
								if (oModelCard.MaterialShortageEndDate.getTime() === new Date(9999, 11, 31, 13).getTime()) {
									var oModelI18N = this.getView().getModel("Common_i18n");
									var oBundle = oModelI18N.getResourceBundle();
									sap.ca.ui.message.showMessageBox({
										type : sap.ca.ui.message.Type.ERROR,
										message : oBundle.getText("CARD_ACCEPT_INFINITY")
									});
								} else {
									sViewName = "i2d.pp.mrpcockpit.reuse.fragments.DialogShortageAccept";
								}
								break;
							case this.Constants.SOLUTIONTYPE_ACCEPT_REMOVE :
								// Revoke the accepted shortage
								this._revokeAcceptedShortage(oModelCard);
								break;
							case this.Constants.SOLUTIONTYPE_PO_RESCHEDULE :
							case this.Constants.SOLUTIONTYPE_PO_INCREASE :
							case this.Constants.SOLUTIONTYPE_TO_RESCHEDULE :
							case this.Constants.SOLUTIONTYPE_TO_INCREASE :
							case this.Constants.SOLUTIONTYPE_PO_CHANGE :
							case this.Constants.SOLUTIONTYPE_TO_CHANGE :
								sViewName = "i2d.pp.mrpcockpit.reuse.fragments.DialogOrderChange";
								// reset Material ID so that CR list is updated
								this.dMaterialID = null;
								break;
							case this.Constants.SOLUTIONTYPE_PO_CREATE :
							case this.Constants.SOLUTIONTYPE_TO_CREATE :
							case this.Constants.SOLUTIONTYPE_PR_CREATE :
							case this.Constants.SOLUTIONTYPE_TOR_CREATE :
								sViewName = "i2d.pp.mrpcockpit.reuse.fragments.DialogOrderCreate";
								break;
							case this.Constants.SOLUTIONTYPE_PR_RESCHEDULE :
							case this.Constants.SOLUTIONTYPE_PR_INCREASE :
							case this.Constants.SOLUTIONTYPE_TOR_RESCHEDULE :
							case this.Constants.SOLUTIONTYPE_TOR_INCREASE :
							case this.Constants.SOLUTIONTYPE_PR_CHANGE :
							case this.Constants.SOLUTIONTYPE_TOR_CHANGE :
								sViewName = "i2d.pp.mrpcockpit.reuse.fragments.DialogOrderReqChange";
								break;
							case this.Constants.SOLUTIONTYPE_PA_STOCK_CHANGE :	
							case this.Constants.SOLUTIONTYPE_PA_VENDOR_CHANGE :
							case this.Constants.SOLUTIONTYPE_PA_UNSRC_CHANGE :
							case this.Constants.SOLUTIONTYPE_PA_PLANT_CHANGE :
							case this.Constants.SOLUTIONTYPE_PA_PROD_CHANGE :
							case this.Constants.SOLUTIONTYPE_PA_REPLANT_CHANGE :
								sViewName = "i2d.pp.mrpcockpit.reuse.fragments.DialogPlanOrderChange";
								break;								
						}

						if (sViewName) {
							// Create the dialog controller, its fragment, pass the model and open the dialog
							var ctrl = sap.ui.controller(sViewName);
							this.oCollaborationDialog = sap.ui.xmlfragment(sViewName, ctrl);
							this.oCollaborationDialog.setModel(this.oApplicationImplementation.getApplicationModel("ServiceVersions"),"ServiceVersions");
							this.oCollaborationDialog.setModel(this.getView().getModel("Common_i18n"), "Common_i18n");
							this.oCollaborationDialog.setModel(new sap.ui.model.json.JSONModel(oModelCard));
							this.oCollaborationDialog.open();
						}

					},

					/**
					 * remove all existing handler for size calculation
					 * 
					 * @memberOf i2d.pp.mrpcockpit.reuse.view.S4parent
					 */
					removeHandler : function() {
						// clear handler for size changes
						if (jQuery.device.is.desktop) {
							if (this.resizeHandler) {
								sap.ui.core.ResizeHandler.deregister(this.resizeHandler);
								this.resizeHandler = null;
							}
						} else {
							sap.ui.Device.orientation.detachHandler(this.onResize, this);
							sap.ui.Device.resize.detachHandler(this.onResize, this);
						}

						// clear delayed calls for resizing
						if (this.resizeTimer) {
							jQuery.sap.clearDelayedCall(this.resizeTimer);
							this.resizeTimer = null;
						}

						// clear also any delayed call for size calculation fixing
						if (this.resizeFixHandler) {
							jQuery.sap.clearDelayedCall(this.resizeFixHandler);
							this.resizeFixHandler = null;
						}
					},

					/**
					 * calculate the size for the controls of the page like the scrollcontainer, the chart, ...
					 * 
					 * @memberOf i2d.pp.mrpcockpit.reuse.view.S4parent
					 */
					resize : function(initialOffset) {
						// Recalculate the sizes
						i2d.pp.mrpcockpit.reuse.util.Helper.resizeUiControls(this,
								i2d.pp.mrpcockpit.reuse.util.CommonConstants.VIEW_S4, initialOffset);
					},

					/**
					 * If the size calculation failed, this handler is called to recalculate the size again
					 * 
					 * @memberOf i2d.pp.mrpcockpit.reuse.view.S4parent
					 */
					resizeFix : function() {
						jQuery.sap.log.debug("resize chart to ensure proper sizing");
						this.resize();
						// remove the handler id only after the resize call to avoid a recursive call
						this.resizeFixHandler = null;
					},

					/**
					 * Handle the resize event and trigger a delayed call to calculate the proper sizes
					 * 
					 * @param oEvent
					 *          object containing the event data (e.g. the old and new size of the screen). Important: It's not
					 *          the size of the whole page but for the section where the header, supdemlist and the solution cards
					 *          are placed. It doesn't contain the size of the header bar at the top!
					 * @memberOf i2d.pp.mrpcockpit.reuse.view.S4parent
					 */
					onResize : function(oEvent) {
						// don't trigger a resize calculation immediately (for performance reasons) but
						// create a delayed call instead
						// if there is already a delayed call, remove it and create a new one instead
						if (this.resizeTimer) {
							jQuery.sap.clearDelayedCall(this.resizeTimer);
						}

						// so now create the delayed call to handle the resize
						this.resizeTimer = jQuery.sap.delayedCall(200, this, jQuery.proxy(this.resize, this));

						// Width of solution card container has to be set/adapted
						var ctrlCards = this.getView().byId("cards");
						ctrlCards.updateSolutionCardContainerSize();

					},

					/**
					 * Handle
					 * 
					 * @memberOf i2d.pp.mrpcockpit.reuse.view.S4parent
					 */
					onBeforeRendering : function() {
						// as DOM nodes will change, remove the resize handler
						this.removeHandler();
					},

					/**
					 * onAfterRendering is called after all controls of the page have been rendered. We use that to manually
					 * resize the controls on S4. After 500ms the handler functions for 'resizing' events are registered. The
					 * delay is required because the manual resizing already triggers new resize events that MUST NOT be handled!
					 * Therefore we register with a delay...
					 * 
					 * @memberOf i2d.pp.mrpcockpit.reuse.view.S4parent
					 */
					onAfterRendering : function() {
						// as the Nav Container has a fixed height, we have to calculate the correct size now
						this.resize(this._initialOffset);

						// not all UI Elements are rendered on the time when the chart is rendered. 67px are missing
						// after the first rendering the initialOffset needs to be set to 0 for correct sizing
						this._initialOffset = 0;

						// to ensure proper resizing we have to get informed when the size of the
						// "relevant" DOM nodes changes. So we register for resize of the content-node
						// of the Page (if the page becomes scrollable it has to be at least the parent
						// node of the current used DOM node)
						jQuery.sap.delayedCall(500, this, jQuery.proxy(this._registerOnResize, this));

					},

					/**
					 * This method registers the 'resize' events. It is called onAfterRendering with a delay of 500ms
					 * 
					 * @memberOf i2d.pp.mrpcockpit.reuse.view.S4parent
					 */
					_registerOnResize : function() {
						var page = null;
						if (jQuery.device.is.desktop) {
							var $NavContent = jQuery("#" + this.getView().getId() + "--" + "mainPage-cont");
							if ($NavContent && $NavContent.length) {
								// determine relevant page node
								page = $NavContent;
								if (page) {
									this.resizeHandler = sap.ui.core.ResizeHandler.register(page[0], jQuery.proxy(this.onResize, this));
								}
							}
						} else {
							// in case of a mobile device we just register on a change of the orientation
							// or a size change of the device
							sap.ui.Device.orientation.attachHandler(this.onResize, this);
							sap.ui.Device.resize.attachHandler(this.onResize, this);
						}
					},

					/**
					 * Updates the noDataText to "Loading..." <br>
					 * Method is called when data in table refreshed
					 * 
					 * @memberOf i2d.pp.mrpcockpit.reuse.view.S4parent
					 */
					onItemsUpdateStarted : function(oEvent) {
						var shortagesTable = this.getView().byId("shortages");
						shortagesTable.setNoDataText(this.getView().getModel("Common_i18n").getResourceBundle().getText(
								"tableUpdateStarted"));
					},

					/**
					 * hide the chart container
					 * 
					 * @memberOf i2d.pp.mrpcockpit.reuse.view.S4parent
					 */
					_hideChartContainer : function() {
						// reset size of solChartContainer in order to suppress
						// the container net time when entering the view in table mode
						var oCtrlChart = this.byId('solChartContainer');
						oCtrlChart.setVisible(false);
					},

					/**
					 * show all content of the chart container
					 * 
					 * @memberOf i2d.pp.mrpcockpit.reuse.view.S4parent
					 */
					_showChartContainer : function() {
						// reset size of solChartContainer in order to suppress
						// the container net time when entering the view in table mode
						var oCtrlChart = this.byId('solChartContainer');
						oCtrlChart.setVisible(true);
					},

					/**
					 * Handles the event MasterRefresh; This allows us to reload the master list only when the user has explicitly
					 * refreshed it or for a navigation
					 * 
					 * @memberOf i2d.pp.mrpcockpit.reuse.view.S3parent
					 * @param oEvent
					 */
					onMasterRefresh : function(oEvt) {
						if (oEvt.getParameter("bManualRefresh") === true) {
							// a master List refresh was triggered by clicking the refresh button or doing a "pull to refresh"
							// navigate to solutiuon view in case the user pressed by purpose on the master refresh button
							this._navBack(oEvt);
						}

					}

				});

}; // end of i2d/pp/mrpcockpit/reuse/view/S4parent.js
if ( !jQuery.sap.isDeclared('i2d.pp.mrpcockpit.reuse.view.VariantHandler') ) {
jQuery.sap.declare("i2d.pp.mrpcockpit.reuse.view.VariantHandler");




i2d.pp.mrpcockpit.reuse.view.VariantHandler = {

		i18NCommonReuseModel : new sap.ui.model.resource.ResourceModel({
			bundleUrl : jQuery.sap.getModulePath("i2d.pp.mrpcockpit.reuse") + "/" + "i18n/i18n.properties"
		}),	

		openVariantDialog : function(fCallbackFunction, sContainerPrefix, oVariantData, aVariantNames,  sServiceUrl, sAppURL, sNumberUnit, sLPIconMonitor, sLPIconManage, sOldVariantName, b2MonitorTile, b2ManageTile, bChangeVariant, oController) {

			
			this.sContainerPrefix = sContainerPrefix;
			this.oVariantData = oVariantData;
			this.sServiceUrl = sServiceUrl;
			this.sAppURL = sAppURL;
			this.fCallbackFunction = fCallbackFunction;
			this.aVariantNames = aVariantNames;
			this.sNumberUnit = sNumberUnit;
			this.sLPIconMonitor = sLPIconMonitor;
			this.sLPIconManage = sLPIconManage;
			this.sOldVariantName = sOldVariantName;
			this.b2MonitorTile = b2MonitorTile;
			this.b2ManageTile = b2ManageTile;
			this.bChangeVariant = bChangeVariant;
			var sDefaultLayoutName = oController.getView().getModel("Common_i18n").getResourceBundle().getText("DefaultLayout");
			var sListName = oController.getObjectHeaderTitle();
			
			if(this.b2MonitorTile === undefined) {
				this.b2MonitorTile = false;
			}

			if(this.b2ManageTile === undefined) {
				this.b2ManageTile = false;
			}
			if(this.bChangeVariant === undefined){
				this.bChangeVariant = false;
			}

			// the dialog close callback function, send the dialog
			// results for further process
			var fnClose = function(oResult) {

			};

			// save function called when press save on the VariantSaveDialog
			var save = function(sVariantName, bAddBookmarkMonitor, bAddBookmarkManage) {
				this.onVariantSave(this.fCallbackFunction, this.sContainerPrefix, sVariantName, this.oVariantData, bAddBookmarkMonitor, bAddBookmarkManage, this.sAppURL, this.sServiceUrl, this.sNumberUnit, this.sLPIconMonitor, this.sLPIconManage, this.sOldVariantName, bChangeVariant, oController);
			}.bind(this);

			// changeVariant function called when press save on the VariantSaveDialog and the name already exists
			var changeVariant = function(sVariantName, bAddBookmarkMonitor, bAddBookmarkManage) {
				this.openVariantChangeConfirmationDialog(this.fCallbackFunction, this.sContainerPrefix, sVariantName, this.oVariantData, bAddBookmarkMonitor, bAddBookmarkManage, this.sAppURL, this.sServiceUrl, this.sNumberUnit, this.sLPIconMonitor, this.sLPIconManage, oController);
			}.bind(this);

			//Create the VariantSaveDialog
	
				this.oMRPDialogView = new sap.ui.view({
					viewName : "i2d.pp.mrpcockpit.reuse.view.VariantSaveDialog",
					type : sap.ui.core.mvc.ViewType.XML
				});
				
			// get the dialog instance from the view
			var oDialog = this.oMRPDialogView.byId("DLG_VARIANT_SAVE");

			//Set Title for Create new variant and change variant
			var sTitle = i2d.pp.mrpcockpit.reuse.view.VariantHandler.i18NCommonReuseModel.getResourceBundle().getText("CreateVariant");
			if(bChangeVariant) {
				sTitle = i2d.pp.mrpcockpit.reuse.view.VariantHandler.i18NCommonReuseModel.getResourceBundle().getText("ChangeVariant");
			} 
			// set model to dialog/view
			var oDialogModel = {
					title : sTitle,
					closeFunction : fnClose,
					saveFunction : save,
					variantList : this.aVariantNames,
					changeVariantFunction : changeVariant,
					oldVariantName : this.sOldVariantName,
					b2MonitorTile : b2MonitorTile,
					b2ManageTile  :b2ManageTile,
					sDefaultLayoutName : sDefaultLayoutName,
					sListName : sListName,
					forcasteDemandApp : oController.ForecastDemandManageApp
					
			};
			var oModel = new sap.ui.model.json.JSONModel(oDialogModel);
			oDialog.setModel(oModel);
			oController.getView().addDependent(oDialog);

			oDialog.open();

		},
		
		openVariantSaveDialog : function(fCallbackFunction, sContainerPrefix, oVariantData, aVariantNames,  sServiceUrl, sAppURL, sNumberUnit, sLPIconMonitor, sLPIconManage, sOldVariantName, b2MonitorTile, b2ManageTile, bChangeVariant, oController) {


			var b2MonitorTile = false;
			var b2ManageTile = false;
			this.oPersonalizationService = {};
			var oPersonalizationContainerPromise = {};
			this.oPersonalizationContainer = {};
			this.oPersonalizationVariantSet = {};
			this.sVARIANTSET = "Variants";
			var sContainerName = "MRPCockpit." + sContainerPrefix;

			//Get the Personalization Service
			this.oPersonalizationService = sap.ushell.Container.getService("Personalization");
			// Get the specific Container for the App-Pairs x10 and x30
			oPersonalizationContainerPromise = this.oPersonalizationService.getPersonalizationContainer(sContainerName);
			oPersonalizationContainerPromise.fail(function() {
				if (fCallbackFunction) {
					//If an error occurs call the callback function with parameter false 
					fCallbackFunction(false);
				}
			});

			oPersonalizationContainerPromise.done(function(oContainer) {
				this.oPersonalizationContainer = oContainer;
				//Get the Variant Set from the Container
				if (!(this.oPersonalizationContainer.containsVariantSet(this.sVARIANTSET))) {
					//Create VariantSet when it doesn't exists
					this.oPersonalizationContainer.addVariantSet(this.sVARIANTSET);
				};
				this.oPersonalizationVariantSet = this.oPersonalizationContainer.getVariantSet(this.sVARIANTSET);

				var oVariant = {};

				//Get the Variant Key for the Variant Name
				this.sVariantKey = this.oPersonalizationVariantSet.getVariantKeyByName(sOldVariantName);


				//Get the Bookmark Service
				var oService = sap.ushell.Container.getService("Bookmark");


				//Create the complete App URL which is saved in the Tile
				//var sComplteAppUrlMonitor = sAppURL + "-monitor" +  "?VariantID=" + this.sVariantKey;
				// TODO Test6
				// Currently two apps require this: Monitor Production Orders and Monitor Process Orders.
				if (oController.sOrderCategory === undefined){
					var sComplteAppUrlMonitor = sAppURL + "-monitor" +  "?VariantID=" + this.sVariantKey;
				} else {
					var sComplteAppUrlMonitor = sAppURL + "-monitor" +  "?VariantID=" + this.sVariantKey + "&OrderCategory=" + oController.sOrderCategory;
				}

				//Count Tiles with the same AppURL (need to check if the bookmark is new or exists and will be overwritten)
				oService.countBookmarks(sComplteAppUrlMonitor)
				.fail(function(){
					//Need for test in the sandbox
					this.openVariantDialog(fCallbackFunction, sContainerPrefix, oVariantData, aVariantNames,  sServiceUrl, sAppURL, sNumberUnit, sLPIconMonitor, sLPIconManage, sOldVariantName, b2MonitorTile, b2ManageTile, false, oController);
				}.bind(this))
				.done(function (iCount) {
					if (iCount > 0) {
						b2MonitorTile = true;
					}
					//Create the complete App URL which is saved in the Tile
					//var sComplteAppUrlManage = sAppURL + "-manage" + "?VariantID=" + this.sVariantKey;
					// TODO Test1
					// Currently two apps require this: Monitor Production Orders and Monitor Process Orders.
					if (oController.sOrderCategory === undefined){
						var sComplteAppUrlManage = sAppURL + "-manage" + "?VariantID=" + this.sVariantKey;
					} else {
						var sComplteAppUrlManage = sAppURL + "-manage" +  "?VariantID=" + this.sVariantKey + "&OrderCategory=" + oController.sOrderCategory;
					}

					//Count Tiles with the same AppURL (need to check if the bookmark is new or exists and will be overwritten)
					oService.countBookmarks(sComplteAppUrlManage)
					.fail()
					.done(function (iCount) {
						if (iCount > 0) {
							b2ManageTile = true;
						}
						this.openVariantDialog(fCallbackFunction, sContainerPrefix, oVariantData, aVariantNames,  sServiceUrl, sAppURL, sNumberUnit, sLPIconMonitor, sLPIconManage, sOldVariantName, b2MonitorTile, b2ManageTile, false, oController);

					}.bind(this));
				}.bind(this));

			}.bind(this));
			

		},

		openVariantChangeConfirmationDialog : function(fCallbackFunction, sContainerPrefix, sVariantName, oVariantData, bAddBookmarkMonitor, bAddBookmarkManage, sAppURL, sServiceUrl, sNumberUnit, sLPIconMonitor, sLPIconManage, oController) {

			this.sContainerPrefix = sContainerPrefix;
			this.oVariantData = oVariantData;
			this.sServiceUrl = sServiceUrl;
			this.sAppURL = sAppURL;
			this.fCallbackFunction = fCallbackFunction;
			this.sNumberUnit = sNumberUnit;
			this.sLPIconMonitor = sLPIconMonitor;
			this.sLPIconManage = sLPIconManage;
			this.sVariantName = sVariantName;
			this.bAddBookmarkMonitor = bAddBookmarkMonitor;
			this.bAddBookmarkManage = bAddBookmarkManage;

			// the dialog close callback function, send the dialog
			// results for further process
			var fnClose = function(oResult) {

			};

			// save function called when press save on the VariantChangeConfirmationDialog
			var save = function() {
				this.onVariantSave(this.fCallbackFunction, this.sContainerPrefix, this.sVariantName, this.oVariantData, this.bAddBookmarkMonitor, this.bAddBookmarkManage, this.sAppURL, this.sServiceUrl, this.sNumberUnit, this.sLPIconMonitor, this.sLPIconManage, this.sVariantName, true, oController);
			}.bind(this);

			//Create the VariantChangeConfirmationDialog

				this.oMRPChangeVariantDialogView = new sap.ui.view({
					viewName : "i2d.pp.mrpcockpit.reuse.view.VariantChangeConfirmationDialog",
					type : sap.ui.core.mvc.ViewType.XML
				});
			
			// get the dialog instance from the view
			var oDialog = this.oMRPChangeVariantDialogView.byId("DLG_CHANGE_VARIANT_CONFIRMATION");

			// set model to dialog/view
			var oDialogModel = {
					title : "{i18n>DIALOG_CHANGE_VARIANT_TITLE}",
					closeFunction : fnClose,
					saveFunction : save,
					text : i2d.pp.mrpcockpit.reuse.view.VariantHandler.i18NCommonReuseModel.getResourceBundle().getText("ChangeVariantConfirmationText", this.sVariantName),
			};
			var oModel = new sap.ui.model.json.JSONModel(oDialogModel);
			oDialog.setModel(oModel);
			oController.getView().addDependent(oDialog);
			
			oDialog.open();

		},

		// VariantDeleteDialog
		openVariantDeleteDialog : function(fCallBackFunction, sContainerPrefix, sVariantName, sAppURL, oController) {

			this.sContainerPrefix = sContainerPrefix;
			this.sVariantName = sVariantName;
			this.fCallbackFunction = fCallBackFunction;

			// Close function
			var fnClose = function(oResult) {

			};

			// Confirm function called when press ok on the VariantDeleteDialog
			var fnConfirm = function(oResult) {
				this.onVariantDelete(this.fCallbackFunction, this.sContainerPrefix, this.sVariantName, sAppURL, i2d.pp.mrpcockpit.reuse.view.VariantHandler.i18NCommonReuseModel.getResourceBundle().getText(("DeleteVariantConfirmation", sVariantName)), oController);
			}.bind(this);

			// Create Dialog

				this.oMRPDELDialogView = new sap.ui.view({
					viewName : "i2d.pp.mrpcockpit.reuse.view.VariantDeleteDialog",
					type : sap.ui.core.mvc.ViewType.XML
				});
			
			// get the dialog instance from the view
			var oDialog = this.oMRPDELDialogView.byId("DLG_VARIANT_DELETE");
			oDialog.getBeginButton().setType(sap.m.ButtonType.Reject);

			// set model to dialog/view

			var oDialogModel = {
					title : i2d.pp.mrpcockpit.reuse.view.VariantHandler.i18NCommonReuseModel.getResourceBundle().getText("DeleteVariantTitle"),
					text : i2d.pp.mrpcockpit.reuse.view.VariantHandler.i18NCommonReuseModel.getResourceBundle().getText("DeleteVariant", sVariantName),
					closeFunction : fnClose,
					confirmFunction : fnConfirm
			};

			var oModel = new sap.ui.model.json.JSONModel(oDialogModel);
			oDialog.setModel(oModel);
			oController.getView().addDependent(oDialog);
			
			oDialog.open();

		},

		openVariantPropertiesDialog : function(fCallbackFunction, sContainerPrefix,  sServiceUrl, sAppURL, sNumberUnit, sLPIconMonitor, sLPIconManage, sOldVariantName, oController) {

			var b2MonitorTile = false;
			var b2ManageTile = false;
			this.oPersonalizationService = {};
			var oPersonalizationContainerPromise = {};
			this.oPersonalizationContainer = {};
			this.oPersonalizationVariantSet = {};
			this.sVARIANTSET = "Variants";
			var sContainerName = "MRPCockpit." + sContainerPrefix;

			//Get the Personalization Service
			this.oPersonalizationService = sap.ushell.Container.getService("Personalization");
			// Get the specific Container for the App-Pairs x10 and x30
			oPersonalizationContainerPromise = this.oPersonalizationService.getPersonalizationContainer(sContainerName);
			oPersonalizationContainerPromise.fail(function() {
				if (fCallbackFunction) {
					//If an error occurs call the callback function with parameter false 
					fCallbackFunction(false);
				}
			});

			oPersonalizationContainerPromise.done(function(oContainer) {
				this.oPersonalizationContainer = oContainer;
				//Get the Variant Set from the Container
				if (!(this.oPersonalizationContainer.containsVariantSet(this.sVARIANTSET))) {
					//Create VariantSet when it doesn't exists
					this.oPersonalizationContainer.addVariantSet(this.sVARIANTSET);
				};
				this.oPersonalizationVariantSet = this.oPersonalizationContainer.getVariantSet(this.sVARIANTSET);

				var oVariant = {};

				//Get the Variant Key for the Variant Name
				this.sVariantKey = this.oPersonalizationVariantSet.getVariantKeyByName(sOldVariantName);


				//Get the Bookmark Service
				var oService = sap.ushell.Container.getService("Bookmark");


				//Create the complete App URL which is saved in the Tile
				//var sComplteAppUrlMonitor = sAppURL + "-monitor" +  "?VariantID=" + this.sVariantKey;
				// TODO Test7
				// Currently two apps require this: Monitor Production Orders and Monitor Process Orders.
				if (oController.sOrderCategory === undefined){
					var sComplteAppUrlMonitor = sAppURL + "-monitor" +  "?VariantID=" + this.sVariantKey;
				} else {
					var sComplteAppUrlMonitor = sAppURL + "-monitor" +  "?VariantID=" + this.sVariantKey + "&OrderCategory=" + oController.sOrderCategory;
				}

				//Count Tiles with the same AppURL (need to check if the bookmark is new or exists and will be overwritten)
				oService.countBookmarks(sComplteAppUrlMonitor)
				.fail(function(){
				}.bind(this))
				.done(function (iCount) {
					if (iCount > 0) {
						b2MonitorTile = true;
					}
					//Create the complete App URL which is saved in the Tile
					//var sComplteAppUrlManage = sAppURL + "-manage" + "?VariantID=" + this.sVariantKey;
					// TODO Test2
					// Currently two apps require this: Monitor Production Orders and Monitor Process Orders.
					if (oController.sOrderCategory === undefined){
						var sComplteAppUrlManage = sAppURL + "-manage" + "?VariantID=" + this.sVariantKey;
					} else {
						var sComplteAppUrlManage = sAppURL + "-manage" +  "?VariantID=" + this.sVariantKey + "&OrderCategory=" + oController.sOrderCategory;
					}

					//Count Tiles with the same AppURL (need to check if the bookmark is new or exists and will be overwritten)
					oService.countBookmarks(sComplteAppUrlManage)
					.fail()
					.done(function (iCount) {
						if (iCount > 0) {
							b2ManageTile = true;
						}
						this.openVariantDialog(fCallbackFunction, sContainerPrefix, null, null,  sServiceUrl, sAppURL, sNumberUnit, sLPIconMonitor, sLPIconManage, sOldVariantName, b2MonitorTile, b2ManageTile, true, oController);

					}.bind(this));
				}.bind(this));

			}.bind(this));


		},



//		Save function for the VariantSaveDialog
		onVariantSave : function(fCallbackFunction, sContainerPrefix, sVariantName, oVariantData, bAddBookmarkMonitor, bAddBookmarkManage, sAppURL, sServiceURL, sNumberUnit, sLPIconMonitor, sLPIconManage, sOldVariantName, bChangeVariant, oController) {

			this.oPersonalizationService = {};
			var oPersonalizationContainerPromise = {};
			this.oPersonalizationContainer = {};
			this.oPersonalizationVariantSet = {};
			this.sVARIANTSET = "Variants";
			var sContainerName = "MRPCockpit." + sContainerPrefix;
			var oNewVariantData = JSON.parse(JSON.stringify(oVariantData));


			//Get the Personalization Service
			this.oPersonalizationService = sap.ushell.Container.getService("Personalization");
			// Get the specific Container for the App-Pairs x10 and x30
			oPersonalizationContainerPromise = this.oPersonalizationService.getPersonalizationContainer(sContainerName);
			oPersonalizationContainerPromise.fail(function() {
				if (fCallbackFunction) {
					//If an error occurs call the callback function with parameter false 
					fCallbackFunction(false);
				}
			});

			oPersonalizationContainerPromise.done(function(oContainer) {
				this.oPersonalizationContainer = oContainer;
				//Get the Variant Set from the Container
				if (!(this.oPersonalizationContainer.containsVariantSet(this.sVARIANTSET))) {
					//Create VariantSet when it doesn't exists
					this.oPersonalizationContainer.addVariantSet(this.sVARIANTSET);
				};
				this.oPersonalizationVariantSet = this.oPersonalizationContainer.getVariantSet(this.sVARIANTSET);

				var oVariant = {};
				var sVariantKeyOld = this.oPersonalizationVariantSet.getVariantKeyByName(sOldVariantName);
				
				//If the name of a variant is change or variant settings, then the old variant must be deleted
				if(((sOldVariantName !== sVariantName && sOldVariantName !== "") && bChangeVariant)){

					if(sVariantKeyOld) {
						oNewVariantData = JSON.parse(JSON.stringify(this.oPersonalizationVariantSet.getVariant(sVariantKeyOld).getItemValue("Filter")));
						//Delete the Variant from the Variant Set
						this.oPersonalizationVariantSet.delVariant(sVariantKeyOld);
					
					}
				}
				
				//Get the Variant Key for the Variant Name
				this.sVariantKey = this.oPersonalizationVariantSet.getVariantKeyByName(sVariantName);
				//If the Variant Key already exists get the Variant by key otherwise create a new Variant and add the Variant to the Variant Set
				if(this.sVariantKey){
					oVariant = this.oPersonalizationVariantSet.getVariant(this.sVariantKey);
				} else {
					oVariant = this.oPersonalizationVariantSet.addVariant(sVariantName);
				}

				if(oNewVariantData){
					//Save all Variant Data in the Item "Filter"
					oVariant.setItemValue("Filter", oNewVariantData);
					if(oNewVariantData.ViewChanged){
						//Remove the ViewChanged flag
						oNewVariantData.ViewChanged = false;
					}
				}

				//Save all changes in the PersonalizationContainer
				this.oPersonalizationContainer.save().fail(function() {
					if (fCallbackFunction) {
						fCallbackFunction(false);
					}
				}).done(function() {
					
					this.sVariantKey = this.oPersonalizationVariantSet.getVariantKeyByName(sVariantName);
					
				//Delete old bookmarks when a variant change
					if(bChangeVariant){
					//Get the Bookmark Service
						var oBookmarkService = sap.ushell.Container.getService("Bookmark");
						if(sVariantKeyOld) {
						if(oBookmarkService){
							//Create the App URL 
							//this.sTargetUrlMonitor = sAppURL + "-monitor" + "?VariantID=" + sVariantKeyOld;
							// TODO Test8
							// Currently two apps require this: Monitor Production Orders and Monitor Process Orders.
							if (oController.sOrderCategory === undefined){
							this.sTargetUrlMonitor = sAppURL + "-monitor" +  "?VariantID=" + sVariantKeyOld;
							} else {
								this.sTargetUrlMonitor = sAppURL + "-monitor" +  "?VariantID=" + sVariantKeyOld + "&OrderCategory=" + oController.sOrderCategory;
							}

							//Check if a Tile with the same App URL Exits - Monitor
							oBookmarkService.countBookmarks(this.sTargetUrlMonitor)
							.fail()
							.done(function (iCount) {
								//Delete Tile when it exists
								if (iCount > 0) {
									oBookmarkService.deleteBookmarks(this.sTargetUrlMonitor)
									.fail()
									.done(function(){
										//Create the App URL 
										//this.sTargetUrlManage = sAppURL + "-manage" + "?VariantID=" + sVariantKeyOld;
										// TODO Test3
										// Currently two apps require this: Monitor Production Orders and Monitor Process Orders.
										if (oController.sOrderCategory === undefined){
											this.sTargetUrlManage = sAppURL + "-manage" + "?VariantID=" + sVariantKeyOld;
										} else {
											this.sTargetUrlManage = sAppURL + "-manage" +  "?VariantID=" + sVariantKeyOld + "&OrderCategory=" + oController.sOrderCategory;
										}

										//Check if a Tile with the same App URL Exits - Manage
										oBookmarkService.countBookmarks(this.sTargetUrlManage)
										.fail()
										.done(function (iCount) {
											//Delete Tile when it exists
											if (iCount > 0) {
												oBookmarkService.deleteBookmarks(this.sTargetUrlManage)
												.fail()
												.done(function(){
													this.createBookmarks(sVariantName, this.sVariantKey, sAppURL, bAddBookmarkMonitor, bAddBookmarkManage, sLPIconMonitor, sLPIconManage, sNumberUnit, sServiceURL, fCallbackFunction, oController);
												}.bind(this)); 
											} else {
												this.createBookmarks(sVariantName, this.sVariantKey, sAppURL, bAddBookmarkMonitor, bAddBookmarkManage, sLPIconMonitor, sLPIconManage, sNumberUnit, sServiceURL, fCallbackFunction, oController);
											}
										}.bind(this));

									}.bind(this)); 
								} else {
									//Create the App URL 
									//this.sTargetUrlManage = sAppURL + "-manage" + "?VariantID=" + sVariantKeyOld;
									// TODO Test4
									// Currently two apps require this: Monitor Production Orders and Monitor Process Orders.
									if (oController.sOrderCategory === undefined){
										this.sTargetUrlManage = sAppURL + "-manage" + "?VariantID=" + sVariantKeyOld;
									} else {
										this.sTargetUrlManage = sAppURL + "-manage" +  "?VariantID=" + sVariantKeyOld + "&OrderCategory=" + oController.sOrderCategory;
									}
									//Check if a Tile with the same App URL Exits - Manage
									oBookmarkService.countBookmarks(this.sTargetUrlManage)
									.fail()
									.done(function (iCount) {
										//Delete Tile when it exists
								
										if (iCount > 0) {
											oBookmarkService.deleteBookmarks(this.sTargetUrlManage)
											.fail()
											.done(function(){
												this.createBookmarks(sVariantName, this.sVariantKey, sAppURL, bAddBookmarkMonitor, bAddBookmarkManage, sLPIconMonitor, sLPIconManage, sNumberUnit, sServiceURL, fCallbackFunction, oController);
											}.bind(this)); 
										} else {
											this.createBookmarks(sVariantName, this.sVariantKey, sAppURL, bAddBookmarkMonitor, bAddBookmarkManage, sLPIconMonitor, sLPIconManage, sNumberUnit, sServiceURL, fCallbackFunction, oController);
										}
									}.bind(this));

								}
							}.bind(this));

						}
						}
					} else {
						this.createBookmarks(sVariantName, this.sVariantKey, sAppURL, bAddBookmarkMonitor, bAddBookmarkManage, sLPIconMonitor, sLPIconManage, sNumberUnit, sServiceURL, fCallbackFunction, oController);
					}
					
				}.bind(this));

			}.bind(this));

		},
		
		createBookmarks : function(sVariantName, sVariantKey, sAppURL, bAddBookmarkMonitor, bAddBookmarkManage, sLPIconMonitor, sLPIconManage, sNumberUnit, sServiceURL, fCallbackFunction, oController){
			
			this.sVariantKey = sVariantKey;
			var bBookmarkSaved = false;

			this.sVariantKey = this.oPersonalizationVariantSet.getVariantKeyByName(sVariantName);
			//Get the Bookmark Service
			var oService = sap.ushell.Container.getService("Bookmark");

			// Append a filter for the order category, if the app requires the order category.
			//this.sComplteAppUrlMonitor = sAppURL + "-monitor" +  "?VariantID=" + this.sVariantKey;
			// Currently two apps require this: Monitor Production Orders and Monitor Process Orders.
			if (oController.sOrderCategory === undefined){
			this.sComplteAppUrlMonitor = sAppURL + "-monitor" +  "?VariantID=" + this.sVariantKey;
			} else {
				this.sComplteAppUrlMonitor = sAppURL + "-monitor" +  "?VariantID=" + this.sVariantKey + "&OrderCategory=" + oController.sOrderCategory;
			}

			//Count Tiles with the same AppURL (need to check if the bookmark is new or exists and will be overwritten)
			oService.countBookmarks(this.sComplteAppUrlMonitor)
			.fail()
			.done(function (iCount) {
				if(bAddBookmarkMonitor){
					if (iCount === 0) {
						bBookmarkSaved = true;
						// no bookmark present, add a new one
						oService.addBookmark({
							title : sVariantName,
							subtitle : i2d.pp.mrpcockpit.reuse.view.VariantHandler.i18NCommonReuseModel.getResourceBundle().getText("MONITOR"),
							url : this.sComplteAppUrlMonitor,
							icon : sLPIconMonitor,
							numberUnit : sNumberUnit,
							serviceRefreshInterval : 10,
							serviceUrl : sServiceURL
						})
						.fail()
						.done(function () {
							sap.m.MessageToast.show(i2d.pp.mrpcockpit.reuse.view.VariantHandler.i18NCommonReuseModel.getResourceBundle().getText("VariantMessageBookmark", sVariantName));
						});
					}} else {
						//Delete Tile when it exists
						if (iCount > 0) {
							oService.deleteBookmarks(this.sComplteAppUrlMonitor)
							.fail()
							.done(function () {
								sap.m.MessageToast.show(i2d.pp.mrpcockpit.reuse.view.VariantHandler.i18NCommonReuseModel.getResourceBundle().getText(("DeleteVariantConfirmation", sVariantName)));
							}); 
						}
					}
			}.bind(this));

			//Create the complete App URL which is saved in the Tile
			// Append a filter for the order category, if the app requires the order category.
			//this.sComplteAppUrlManage = sAppURL + "-manage" + "?VariantID=" + this.sVariantKey;
			// Currently two apps require this: Monitor Production Orders and Monitor Process Orders.
			if (oController.sOrderCategory === undefined){
				this.sComplteAppUrlManage = sAppURL + "-manage" + "?VariantID=" + this.sVariantKey;
			} else {
				this.sComplteAppUrlManage = sAppURL + "-manage" +  "?VariantID=" + this.sVariantKey + "&OrderCategory=" + oController.sOrderCategory;
			}

			//Count Tiles with the same AppURL (need to check if the bookmark is new or exists and will be overwritten)
			oService.countBookmarks(this.sComplteAppUrlManage)
			.fail()
			.done(function (iCount) {
				if(bAddBookmarkManage){
					if (iCount === 0) {
						bBookmarkSaved = true;
						var subtitle = i2d.pp.mrpcockpit.reuse.view.VariantHandler.i18NCommonReuseModel.getResourceBundle().getText("MANAGE");
							if(oController.ForecastDemandManageApp){
								subtitle = oController.ForecastDemandManageAppSubtitle;
							}
						// no bookmark present, add a new one
						oService.addBookmark({
							title : sVariantName,
							subtitle : subtitle,
							url : this.sComplteAppUrlManage,
							icon : sLPIconManage,
							numberUnit : sNumberUnit,
							serviceRefreshInterval : 10,
							serviceUrl : sServiceURL
						})
						.fail()
						.done(function () {
							sap.m.MessageToast.show(i2d.pp.mrpcockpit.reuse.view.VariantHandler.i18NCommonReuseModel.getResourceBundle().getText("VariantMessageBookmark", sVariantName));
						});
					}} else {
						//Delete Tile when it exists
						if (iCount > 0) {
							oService.deleteBookmarks(this.sComplteAppUrlManage)
							.fail()
							.done(function () {
								sap.m.MessageToast.show(i2d.pp.mrpcockpit.reuse.view.VariantHandler.i18NCommonReuseModel.getResourceBundle().getText("DeleteTeilConfirmation", sVariantName));
							}); 
						}
					}
			}.bind(this));
			
			if(!bBookmarkSaved){
				// Success Message for Save Variants
				sap.m.MessageToast.show(i2d.pp.mrpcockpit.reuse.view.VariantHandler.i18NCommonReuseModel.getResourceBundle().getText("VariantMessage", sVariantName));	
			}

			//Call the callback function
			if (fCallbackFunction) {
				fCallbackFunction(true, sVariantName);
			}
			
		},


		getVariantByName : function(fCallbackFunction, sContainerPrefix, sVariantName) {

			this.oPersonalizationService = {};
			var oPersonalizationContainerPromise = {};
			this.oPersonalizationContainer = {};
			this.oPersonalizationVariantSet = {};
			this.sVARIANTSET = "Variants";
			var sVariantSetDefaultVariant = "DefaultVariant";
			var sContainerName = "MRPCockpit." + sContainerPrefix;

			//Get the Personalization Service
			this.oPersonalizationService = sap.ushell.Container.getService("Personalization");

			// Get the specific Container for the App-Pairs x10 and x30
			oPersonalizationContainerPromise = this.oPersonalizationService.getPersonalizationContainer(sContainerName);
			oPersonalizationContainerPromise.fail(function() {
				//If an error occurs call the callback function with parameter false
				if (fCallbackFunction) {
					fCallbackFunction(false);
				}
			});

			oPersonalizationContainerPromise.done(function(oContainer) {
				this.oPersonalizationContainer = oContainer;
				//Get the Variant Set from the Container
				if (!(this.oPersonalizationContainer.containsVariantSet(this.sVARIANTSET))) {
					//Create VariantSet when it doesn't exists
					this.oPersonalizationContainer.addVariantSet(this.sVARIANTSET);
				};

				this.oPersonalizationVariantSet = this.oPersonalizationContainer.getVariantSet(this.sVARIANTSET);

				var oVariant = {};

				//Get the Variant Key for the Variant Name
				var sVariantKey = this.oPersonalizationVariantSet.getVariantKeyByName(sVariantName);
				if(sVariantKey){
					//Get the Variant Data from the Variant Set
					oVariant = this.oPersonalizationVariantSet.getVariant(sVariantKey);
					if (fCallbackFunction && oVariant) {
						//Get the saved VariantData for the item "Filter" (we saved all our Variant Data in this item)
						if(oVariant.getItemValue("Filter")){
							fCallbackFunction(true, JSON.parse(JSON.stringify(oVariant.getItemValue("Filter"))), oVariant.getVariantName(), sVariantName);
						} else {
							fCallbackFunction(false);
						}
						
					}
				} else {
					
					if(this.oPersonalizationContainer.containsVariantSet(sVariantSetDefaultVariant)){
						var oPersonalizationDefaultVariantSet = this.oPersonalizationContainer.getVariantSet(sVariantSetDefaultVariant);
						sVariantKey = oPersonalizationDefaultVariantSet.getVariantKeyByName(sVariantName);
						oVariant = oPersonalizationDefaultVariantSet.getVariant(sVariantKey);
						if (fCallbackFunction && oVariant) {
							//Get the saved VariantData for the item "Filter" (we saved all our Variant Data in this item)
							if(oVariant.getItemValue("Filter")){
								fCallbackFunction(true, JSON.parse(JSON.stringify(oVariant.getItemValue("Filter"))), oVariant.getVariantName(), sVariantName);
							} else {
								fCallbackFunction(false);
							}
							
					}else {
					
					if (fCallbackFunction) {
						fCallbackFunction(false);
					}
					}
				}
				}
			}.bind(this));
		},

		getVariantByID : function(fCallbackFunction, sContainerPrefix, sVariantID) {

			this.oPersonalizationService = {};
			var oPersonalizationContainerPromise = {};
			this.oPersonalizationContainer = {};
			this.oPersonalizationVariantSet = {};
			this.sVARIANTSET = "Variants";
			var sContainerName = "MRPCockpit." + sContainerPrefix;

			//Get the Personalization Service
			this.oPersonalizationService = sap.ushell.Container.getService("Personalization");
			// Get the specific Container for the App-Pairs x10 and x30
			oPersonalizationContainerPromise = this.oPersonalizationService.getPersonalizationContainer(sContainerName);
			oPersonalizationContainerPromise.fail(function() {
				if (fCallbackFunction) {
					//If an error occurs call the callback function with parameter false
					fCallbackFunction(false);
				}
			});
			oPersonalizationContainerPromise.done(function(oContainer) {
				this.oPersonalizationContainer = oContainer;
				//Get the Variant Set from the Container
				if (!(this.oPersonalizationContainer.containsVariantSet(this.sVARIANTSET))) {
					//Create VariantSet when it doesn't exists
					this.oPersonalizationContainer.addVariantSet(this.sVARIANTSET);
				};
				this.oPersonalizationVariantSet = this.oPersonalizationContainer.getVariantSet(this.sVARIANTSET);
				// fill select control for variants

				var oVariant = {};


				var sVariantKey = sVariantID.toString();
				if(sVariantKey){
					//Get the Variant Data from the Variant Set
					oVariant = this.oPersonalizationVariantSet.getVariant(sVariantKey);
					if (fCallbackFunction && oVariant) {
						if(oVariant.getItemValue("Filter")){
							//Get the saved VariantData for the item "Filter" (we saved all our Variant Data in this item)
							fCallbackFunction(true, JSON.parse(JSON.stringify(oVariant.getItemValue("Filter"))), oVariant.getVariantName());
						}else {
							fCallbackFunction(false);
						}
					} else {
						fCallbackFunction(false);
					}
				} else {
					if (fCallbackFunction) {
						fCallbackFunction(false);
					}
				}
			}.bind(this));
		},


		getAllVariants : function(fCallbackFunction, sContainerPrefix) {

			this.oPersonalizationService = {};
			var oPersonalizationContainerPromise = {};
			this.oPersonalizationContainer = {};
			this.oPersonalizationVariantSet = {};
			this.sVARIANTSET = "Variants";
			var sVariantSetDefaultVariant = "DefaultVariant";
			var sContainerName = "MRPCockpit." + sContainerPrefix;

			//Get the Personalization Service
			this.oPersonalizationService = sap.ushell.Container.getService("Personalization");
			// Get the specific Container for the App-Pairs x10 and x30
			oPersonalizationContainerPromise = this.oPersonalizationService.getPersonalizationContainer(sContainerName);
			oPersonalizationContainerPromise.fail(function() {
				if (fCallbackFunction) {
					//If an error occurs call the callback function with parameter false 
					fCallbackFunction(false);
				}
			});
			oPersonalizationContainerPromise.done(function(oContainer) {
				this.oPersonalizationContainer = oContainer;
				//Get the Variant Set from the Container
				if (!(this.oPersonalizationContainer.containsVariantSet(this.sVARIANTSET))) {
					//Create VariantSet when it doesn't exists
					this.oPersonalizationContainer.addVariantSet(this.sVARIANTSET);
				};
				this.oPersonalizationVariantSet = this.oPersonalizationContainer.getVariantSet(this.sVARIANTSET);

				//Get all Variant Names and Keys
				var sVariantNamesAndKey = this.oPersonalizationVariantSet.getVariantNamesAndKeys();
				if(sVariantNamesAndKey){

					//Store all Variant Names in an array
					var aVariantNames = [];
					for (var key in sVariantNamesAndKey) {
						if (sVariantNamesAndKey.hasOwnProperty(key)) {
							aVariantNames.push(key);
						}
					}
					if (fCallbackFunction) {
						
						var oPersonalizationDefaultVariantSet = this.oPersonalizationContainer.getVariantSet(sVariantSetDefaultVariant);

						//Get all Variant Names and Keys
						var sDefaultVariantNamesAndKey = oPersonalizationDefaultVariantSet.getVariantNamesAndKeys();
						if(sDefaultVariantNamesAndKey){

							//Call the callback function with the array of Variant Names
							var aSortedVariantNames = aVariantNames.sort(function(a,b) {
						    a = a.toLowerCase();
						    b = b.toLowerCase();
						    if( a == b) return 0;
						    if( a > b) return 1;
						    return -1;
						});
							for (var key in sDefaultVariantNamesAndKey) {
								if (sDefaultVariantNamesAndKey.hasOwnProperty(key)) {
									aSortedVariantNames.push(key);
								}
							}
							fCallbackFunction(true, aSortedVariantNames);
						}
						
					
					}
				} else {
					if (fCallbackFunction) {
						fCallbackFunction(false);
					}
				}

			}.bind(this));

		},

		onVariantDelete : function(fCallbackFunction, sContainerPrefix, sVariantName, sAppURL, sSuccessMessage, oController) {
			this.oPersonalizationService = {};
			var oPersonalizationContainerPromise = {};
			this.oPersonalizationContainer = {};
			this.oPersonalizationVariantSet = {};
			this.sVARIANTSET = "Variants";
			var sContainerName = "MRPCockpit." + sContainerPrefix;

			//Get the Personalization Service
			this.oPersonalizationService = sap.ushell.Container.getService("Personalization");
			// Get the specific Container for the App-Pairs x10 and x30
			oPersonalizationContainerPromise = this.oPersonalizationService.getPersonalizationContainer(sContainerName);
			oPersonalizationContainerPromise.fail(function() {
				if (fCallbackFunction) {
					//If an error occurs call the callback function with parameter false 
					fCallbackFunction(false);
				}
			});
			oPersonalizationContainerPromise.done(function(oContainer) {
				this.oPersonalizationContainer = oContainer;

				if (!(this.oPersonalizationContainer.containsVariantSet(this.sVARIANTSET))) {
					//Create VariantSet when it doesn't exists
					this.oPersonalizationContainer.addVariantSet(this.sVARIANTSET);
				};
				//Get the Variant Set from the Container
				this.oPersonalizationVariantSet = this.oPersonalizationContainer.getVariantSet(this.sVARIANTSET);

				//Get the Variant Key for the Variant Name
				var sVariantKey = this.oPersonalizationVariantSet.getVariantKeyByName(sVariantName);
				if(sVariantKey) {
					//Delete the Variant from the Variant Set
					this.oPersonalizationVariantSet.delVariant(sVariantKey);

					//Save all changes in the PersonalizationContainer
					this.oPersonalizationContainer.save().fail(function() {
						if (fCallbackFunction) {
							fCallbackFunction(false);
						}
					}).done(function() {
						var bBookmarkDeleted = false;
						jQuery.sap.require("sap.m.MessageToast");

						//Get the Bookmark Service
						var oBookmarkService = sap.ushell.Container.getService("Bookmark");



						if(oBookmarkService){
							//Create the App URL 
							// TODO Test9
							//this.sTargetUrlMonitor = sAppURL + "-monitor" + "?VariantID=" + sVariantKey;
							// Currently two apps require this: Monitor Production Orders and Monitor Process Orders.
							if (oController.sOrderCategory === undefined){
							this.sTargetUrlMonitor = sAppURL + "-monitor" +  "?VariantID=" + sVariantKey;
							} else {
								this.sTargetUrlMonitor = sAppURL + "-monitor" +  "?VariantID=" + sVariantKey + "&OrderCategory=" + oController.sOrderCategory;
							}

							//Check if a Tile with the same App URL Exits - Monitor
							oBookmarkService.countBookmarks(this.sTargetUrlMonitor)
							.fail()
							.done(function (iCount) {
								//Delete Tile when it exists
								if (iCount > 0) {
									bBookmarkDeleted = true;
									oBookmarkService.deleteBookmarks(this.sTargetUrlMonitor)
									.fail()
									.done(function () {
										sap.m.MessageToast.show(i2d.pp.mrpcockpit.reuse.view.VariantHandler.i18NCommonReuseModel.getResourceBundle().getText("DeleteTeilConfirmation", sSuccessMessage));
									}); 
								}
							}.bind(this));

							//Create the App URL 
							//this.sTargetUrlManage = sAppURL + "-manage" + "?VariantID=" + sVariantKey;
							// TODO Test5
							// Currently two apps require this: Monitor Production Orders and Monitor Process Orders.
							if (oController.sOrderCategory === undefined){
								this.sTargetUrlManage = sAppURL + "-manage" + "?VariantID=" + sVariantKey;
							} else {
								this.sTargetUrlManage = sAppURL + "-manage" +  "?VariantID=" + sVariantKey + "&OrderCategory=" + oController.sOrderCategory;
							}

							//Check if a Tile with the same App URL Exits - Manage
							oBookmarkService.countBookmarks(this.sTargetUrlManage)
							.fail()
							.done(function (iCount) {
								//Delete Tile when it exists
								if (iCount > 0) {
									bBookmarkDeleted = true;
									oBookmarkService.deleteBookmarks(this.sTargetUrlManage)
									.fail()
									.done(function () {
										sap.m.MessageToast.show(i2d.pp.mrpcockpit.reuse.view.VariantHandler.i18NCommonReuseModel.getResourceBundle().getText("DeleteTeilConfirmation", sSuccessMessage));
									}); 
								}
							}.bind(this));

						}

						if(!bBookmarkDeleted){
							sap.m.MessageToast.show(i2d.pp.mrpcockpit.reuse.view.VariantHandler.i18NCommonReuseModel.getResourceBundle().getText("DeleteVariantConfirmation", sSuccessMessage));
						}

						if (fCallbackFunction) {
							fCallbackFunction(true);
						}

					}.bind(this));
				} else {
					if (fCallbackFunction) {
						fCallbackFunction(false);
					}
				}
			}.bind(this));
		},
		
		saveDefaultVariant : function(fCallbackFunction, sContainerPrefix, sVariantName, oVariantData) {

			this.oPersonalizationService = {};
			var oPersonalizationContainerPromise = {};
			this.oPersonalizationContainer = {};
			var oPersonalizationDefaultVariantSet = {};
			var sDefaultVariantSet = "DefaultVariant";
			var sContainerName = "MRPCockpit." + sContainerPrefix;
			var oNewVariantData = JSON.parse(JSON.stringify(oVariantData));

			//Get the Personalization Service
			this.oPersonalizationService = sap.ushell.Container.getService("Personalization");
			// Get the specific Container for the App-Pairs x10 and x30
			oPersonalizationContainerPromise = this.oPersonalizationService.getPersonalizationContainer(sContainerName);
			oPersonalizationContainerPromise.fail(function() {
				if (fCallbackFunction) {
					//If an error occurs call the callback function with parameter false 
					fCallbackFunction(false);
				}
			});

			oPersonalizationContainerPromise.done(function(oContainer) {
				this.oPersonalizationContainer = oContainer;
				//Get the Variant Set from the Container
				if (this.oPersonalizationContainer.containsVariantSet(sDefaultVariantSet)) {
					//Delete VariantSet when it exists
					this.oPersonalizationContainer.delVariantSet(sDefaultVariantSet);
				};
				
				this.oPersonalizationContainer.addVariantSet(sDefaultVariantSet);
				
				oPersonalizationDefaultVariantSet = this.oPersonalizationContainer.getVariantSet(sDefaultVariantSet);
				var oVariant = {};
				
				//Get the Variant Key for the Variant Name
				var sDefaultVariantKey = oPersonalizationDefaultVariantSet.getVariantKeyByName(sVariantName);
				//If the Variant Key already exists get the Variant by key otherwise create a new Variant and add the Variant to the Variant Set
				if(sDefaultVariantKey){
					oVariant = oPersonalizationDefaultVariantSet.getVariant(sDefaultVariantKey);
				} else {
					oVariant = oPersonalizationDefaultVariantSet.addVariant(sVariantName);
				}

				if(oNewVariantData){
					//Save all Variant Data in the Item "Filter"
					oVariant.setItemValue("Filter", oNewVariantData);
				}

				//Save all changes in the PersonalizationContainer
				this.oPersonalizationContainer.save().fail(function() {
					if (fCallbackFunction) {
						fCallbackFunction(false);
					}
				}).done(function() {
					if (fCallbackFunction) {
					fCallbackFunction(true, sVariantName);
					}
					
				}.bind(this));

			}.bind(this));

		},

};
}; // end of i2d/pp/mrpcockpit/reuse/view/VariantHandler.js
if ( !jQuery.sap.isDeclared('i2d.pp.mrpcockpit.reuse.fragments.DialogOrderChange.controller') ) {
  jQuery.sap.declare('i2d.pp.mrpcockpit.reuse.fragments.DialogOrderChange.controller');



jQuery.sap.require('sap.ca.ui.utils.busydialog'); // unlisted dependency retained

jQuery.sap.require('sap.ca.ui.message.message'); // unlisted dependency retained

jQuery.sap.require('sap.ca.ui.model.type.Number'); // unlisted dependency retained

jQuery.sap.require('sap.ca.ui.model.format.QuantityFormat'); // unlisted dependency retained


i2d.pp.mrpcockpit.reuse.fragments.DialogRoot.extend("i2d.pp.mrpcockpit.reuse.fragments.DialogOrderChange", {

	/**
	 * This method overwrites the base class implementation. It initializes the texts and labels for the dialog. At the
	 * end the binding is updated.
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.fragments.DialogOrderChange
	 */
	_initializeDialog : function() {
		// Initialize the Radio buttons with "Pending"
		var oModel = this.oDialog.getModel();
		oModel.setProperty("/DialogActivity", this.Constants.SolutionDialogActivity_EXECUTE);
		oModel.setProperty("/DialogRequestActive", this.Constants.REQUEST_ACTIVE);
		if (this.oDialog.getModel('ServiceVersions').getData().iServiceSchemaVersion < 3) {
			oModel.setProperty("/DialogRequestActive", this.Constants.REQUEST_INACTIVE);
		}

		// Set the title based on the given 'Solution Type'
		switch (oModel.getProperty("/MaterialShortageSolutionType")) {
			case this.Constants.SOLUTIONTYPE_PO_RESCHEDULE :
				this.oDialog.setTitle(this.Common_i18n.getText("SOLUTION_DIALOG_PO_RESCHEDULE_TITLE", [
						oModel.getProperty("/MRPElementExternalID"), oModel.getProperty("/MRPElementItemExternalID")]));
				this.dialogAction = this.Constants.SolutionDialogAction_PO_CHANGE;
				break;
			case this.Constants.SOLUTIONTYPE_PO_INCREASE :
				this.oDialog.setTitle(this.Common_i18n.getText("SOLUTION_DIALOG_PO_INCREASE_TITLE", [
						oModel.getProperty("/MRPElementExternalID"), oModel.getProperty("/MRPElementItemExternalID")]));
				this.dialogAction = this.Constants.SolutionDialogAction_PO_CHANGE;
				break;
			case this.Constants.SOLUTIONTYPE_PO_CHANGE :
				this.oDialog.setTitle(this.Common_i18n.getText("SOLUTION_DIALOG_PO_CHANGE_TITLE", [
						oModel.getProperty("/MRPElementExternalID"), oModel.getProperty("/MRPElementItemExternalID")]));
				this.dialogAction = this.Constants.SolutionDialogAction_PO_CHANGE;
				break;
			case this.Constants.SOLUTIONTYPE_TO_RESCHEDULE :
				this.oDialog.setTitle(this.Common_i18n.getText("SOLUTION_DIALOG_TO_RESCHEDULE_TITLE", [
						oModel.getProperty("/MRPElementExternalID"), oModel.getProperty("/MRPElementItemExternalID")]));
				this.dialogAction = this.Constants.SolutionDialogAction_TO_CHANGE;
				break;
			case this.Constants.SOLUTIONTYPE_TO_INCREASE :
				this.oDialog.setTitle(this.Common_i18n.getText("SOLUTION_DIALOG_TO_INCREASE_TITLE", [
						oModel.getProperty("/MRPElementExternalID"), oModel.getProperty("/MRPElementItemExternalID")]));
				this.dialogAction = this.Constants.SolutionDialogAction_TO_CHANGE;
				break;
			case this.Constants.SOLUTIONTYPE_TO_CHANGE :
				this.oDialog.setTitle(this.Common_i18n.getText("SOLUTION_DIALOG_TO_CHANGE_TITLE", [
						oModel.getProperty("/MRPElementExternalID"), oModel.getProperty("/MRPElementItemExternalID")]));
				this.dialogAction = this.Constants.SolutionDialogAction_TO_CHANGE;
				break;
		}
	},

	/**
	 * This method overwrites the base class implementation. This method is the handler for the button "OK"
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.fragments.DialogOrderChange
	 */
	onOk : function(evt) {
		var oData = this.oDialog.getModel().getData();
		// Check if the screen data is valid (may be changed by the user)
		if (!this._isScreenDataValid()) {
			if (!this.bDateValid) {
				// if date format is not valid
				if(this.bInvalidDateFormat){
					return;
				}
				sap.ca.ui.message.showMessageBox({
					type : sap.ca.ui.message.Type.ERROR,
					message : this.Common_i18n.getText("SOLUTION_DIALOG_MSG_WRONG_DATE")
				});
			} else {
				sap.ca.ui.message.showMessageBox({
					type : sap.ca.ui.message.Type.ERROR,
					message : this.Common_i18n.getText("SOLUTION_DIALOG_MSG_WRONG_QUANTITY_NUMBER")
				});
			}
			// Stay on the dialog and abort processing
			return;
		}
		// Close the dialog
		this.oDialog.close();
		// Show the busy dialog
		sap.ca.ui.utils.busydialog.requireBusyDialog({
			text : this.Common_i18n.getText("SOLUTION_DIALOG_MSG_SAVE_WAITING")
		});

		// Check if the given PO already has an active, existing CR
		var bChangeRequestExists = false;
		switch (oData.SolutionRequestStatus) {
			case this.Constants.REQUEST_STATUS_REQUESTED :
			case this.Constants.REQUEST_STATUS_ANSWERED :
				bChangeRequestExists = true; // Don't create but update the existing request
				break;
			default :
				bChangeRequestExists = false; // Create a change request
		}

		// The user has selected an 'activity' using the radio buttons.
		// Based on this selection we trigger the change of the PO/TO and/or the
		// creation of the change request
		var sErrorDetails = "";
		switch (oData.DialogActivity) {
			case this.Constants.SolutionDialogActivity_EXECUTE :
				// Change the PO/TO directly. Don't create any CR.
				// Decide whether to update a (possibly existing) Change Request or not.
				oData.SolutionRequestStatus = this.Constants.REQUEST_STATUS_APPLIED;
				sErrorDetails = i2d.pp.mrpcockpit.reuse.util.CollaborationHelper.updatePurchaseOrderBatch(oData,
						this._oHandlerOrder, bChangeRequestExists, "x30");
				break;
			case this.Constants.SolutionDialogActivity_CR_REQUEST :
				// Create/Update a CR in status 'Requested'
				oData.SolutionRequestStatus = this.Constants.REQUEST_STATUS_REQUESTED;
				if (bChangeRequestExists === false) {
					sErrorDetails = i2d.pp.mrpcockpit.reuse.util.CollaborationHelper.createRequestBatch(oData, this._oHandlerCR);
				} else {
					sErrorDetails = i2d.pp.mrpcockpit.reuse.util.CollaborationHelper.updateRequestBatch(oData, this._oHandlerCR,
							"x30");
				}
				break;
			case this.Constants.SolutionDialogActivity_CR_COLLECT :
				// Create/Update a CR in status 'Collected'
				oData.SolutionRequestStatus = this.Constants.REQUEST_STATUS_COLLECTED;
				if (bChangeRequestExists === false) {
					sErrorDetails = i2d.pp.mrpcockpit.reuse.util.CollaborationHelper.createRequestBatch(oData, this._oHandlerCR);
				} else {
					sErrorDetails = i2d.pp.mrpcockpit.reuse.util.CollaborationHelper.updateRequestBatch(oData, this._oHandlerCR,
							"x30");
				}
				break;
			default :
				jQuery.sap.log.error("Dialog activity " + oData.DialogActivity + " is unknown.");
		}

		// Error handling in case the batch has not been submitted at all.
		// Could happen if a precondition was not fulfilled.
		if (sErrorDetails) {
			var sMsg = "";
			sap.ca.ui.utils.busydialog.releaseBusyDialog();
			if (oData.DialogActivity === this.Constants.SolutionDialogActivity_EXECUTE) {
				// Direct update/execution has failed
				sMsg = this.Common_i18n.getText("SOLUTION_DIALOG_" + this.dialogAction + "_MSG_ERROR");
			} else {
				// Creation of change request has failed
				sMsg = this.Common_i18n.getText("SOLUTION_DIALOG_MSG_REQUEST_SAVE_FAILED", [oData.MRPElementExternalID,
						oData.MRPElementItemExternalID]);
			}
			sap.ca.ui.message.showMessageBox({
				type : sap.ca.ui.message.Type.ERROR,
				message : sMsg,
				details : this.Common_i18n.getText(sErrorDetails)
			});
		} else {
			// Inform the listeners that the OData Request has been sent successfully
			this._fireEventODataSent();
		}

		// Destroy the dialog
		this.oDialog.destroy();
	},

	/**
	 * Event handler is called if the user select the first radio button "Change Now". It sets the activity internally and
	 * updates the UI.
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.fragments.DialogOrderChange
	 */
	_onSelectRadioButton1 : function(oEvent) {
		var oModel = this.oDialog.getModel();
		oModel.setProperty("/DialogActivity", this.Constants.SolutionDialogActivity_EXECUTE);
	},

	/**
	 * Event handler is called if the user select the second radio button "Request Later". It sets the activity internally
	 * and updates the UI.
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.fragments.DialogOrderChange
	 */
	_onSelectRadioButton2 : function(oEvent) {
		var oModel = this.oDialog.getModel();
		oModel.setProperty("/DialogActivity", this.Constants.SolutionDialogActivity_CR_COLLECT);
	},

	/**
	 * Event handler is called if the user select the third radio button "Log Requested Change". It sets the activity
	 * internally and updates the UI.
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.fragments.DialogOrderChange
	 */
	_onSelectRadioButton3 : function(oEvent) {
		var oModel = this.oDialog.getModel();
		oModel.setProperty("/DialogActivity", this.Constants.SolutionDialogActivity_CR_REQUEST);
	}

});

}; // end of i2d/pp/mrpcockpit/reuse/fragments/DialogOrderChange.controller.js
if ( !jQuery.sap.isDeclared('i2d.pp.mrpcockpit.reuse.fragments.DialogOrderCreate.controller') ) {
  jQuery.sap.declare('i2d.pp.mrpcockpit.reuse.fragments.DialogOrderCreate.controller');



jQuery.sap.require('sap.ca.ui.utils.busydialog'); // unlisted dependency retained

jQuery.sap.require('sap.ca.ui.message.message'); // unlisted dependency retained

jQuery.sap.require('sap.ca.ui.model.type.Number'); // unlisted dependency retained

jQuery.sap.require('sap.ca.ui.model.format.QuantityFormat'); // unlisted dependency retained


i2d.pp.mrpcockpit.reuse.fragments.DialogRoot.extend("i2d.pp.mrpcockpit.reuse.fragments.DialogOrderCreate", {

	/**
	 * This method overwrites the base class implementation. It initializes the texts and labels for the dialog. At the
	 * end the binding is updated.
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.fragments.DialogOrderCreate
	 */
	_initializeDialog : function() {
		// The radio buttons are bound to following variables. Default is: Create order
		var oModel = this.oDialog.getModel();
		oModel.setProperty("/DialogConfigCtrlOptionCreateReq", false);
		oModel.setProperty("/DialogConfigCtrlOptionCreateOrd", true);

		// Set the title based on the given 'Solution Type'
		switch (oModel.getProperty("/MaterialShortageSolutionType")) {
			case this.Constants.SOLUTIONTYPE_PO_CREATE :
				this.oDialog.setTitle(this.Common_i18n.getText("SOLUTION_DIALOG_PO_CREATE_TITLE"));
				this.dialogAction = this.Constants.SolutionDialogAction_PO_CREATE;
				break;
			case this.Constants.SOLUTIONTYPE_TO_CREATE :
				this.oDialog.setTitle(this.Common_i18n.getText("SOLUTION_DIALOG_TO_CREATE_TITLE"));
				this.dialogAction = this.Constants.SolutionDialogAction_TO_CREATE;
				break;
		}
	},

	/**
	 * This method is the handler for the button "OK"
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.fragments.DialogOrderCreate
	 */
	onOk : function(evt) {
		var oData = this.oDialog.getModel().getData();
		// Check if the screen data is valid (may be changed by the user)
		if (!this._isScreenDataValid()) {
			if (!this.bDateValid) {
				// if date format is not valid
				if(this.bInvalidDateFormat){
					return;
				}
				sap.ca.ui.message.showMessageBox({
					type : sap.ca.ui.message.Type.ERROR,
					message : this.Common_i18n.getText("SOLUTION_DIALOG_MSG_WRONG_DATE")
				});
			} else {
				sap.ca.ui.message.showMessageBox({
					type : sap.ca.ui.message.Type.ERROR,
					message : this.Common_i18n.getText("SOLUTION_DIALOG_MSG_WRONG_QUANTITY_NUMBER")
				});
			}
			// Stay on the dialog and abort processing
			return;
		}
		// Close the dialog
		this.oDialog.close();
		// Show the busy dialog with 'saving...'
		sap.ca.ui.utils.busydialog.requireBusyDialog({
			text : this.Common_i18n.getText("SOLUTION_DIALOG_MSG_SAVE_WAITING")
		});

		// The user has selected an 'option' using the radio button.
		// Based on this selection we trigger the creation of either a requisition or an order.
		var sErrorDetails = "";
		switch (this.dialogAction) {
			case this.Constants.SolutionDialogAction_PO_CREATE :
			case this.Constants.SolutionDialogAction_TO_CREATE :
				// Create the PO/TO and the CR in batch processing
				sErrorDetails = i2d.pp.mrpcockpit.reuse.util.CollaborationHelper.createPurchaseOrderBatch(oData,
						this._oHandlerOrder);
				break;
			case this.Constants.SolutionDialogAction_PR_CREATE :
			case this.Constants.SolutionDialogAction_TOR_CREATE :
				// Create the Requisition and the CR in batch processing
				sErrorDetails = i2d.pp.mrpcockpit.reuse.util.CollaborationHelper.createPurchaseRequisitionBatch(oData,
						this._oHandlerOrder);
				break;
			default :
				jQuery.sap.log.error("Dialog action " + this.dialogAction + " is unknown.");
		}

		// Error handling in case the batch has not been submitted at all.
		// Could happen if a precondition was not fulfilled.
		if (sErrorDetails) {
			sap.ca.ui.utils.busydialog.releaseBusyDialog();
			sap.ca.ui.message.showMessageBox({
				type : sap.ca.ui.message.Type.ERROR,
				message : this.Common_i18n.getText("SOLUTION_DIALOG_" + this.dialogAction + "_MSG_ERROR"),
				details : this.Common_i18n.getText(sErrorDetails)
			});
		} else {
			// Inform the listeners that the OData Request has been sent successfully
			this._fireEventODataSent();
		}

		// Destroy the dialog
		this.oDialog.destroy();
	},

	/**
	 * This method is the handler for the radio button. It sets new dialogAction for the correct message text
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.fragments.DialogOrderCreate
	 */
	onSelectOptionCreateOrd : function(evt) {
		var oModel = evt.getSource().getParent().getModel();
		// Get the solution type
		var sMaterialShortageSolutionType = oModel.getProperty("/MaterialShortageSolutionType");
		// Set the dialog action based on the given solution type
		switch (sMaterialShortageSolutionType) {
			case this.Constants.SOLUTIONTYPE_PO_CREATE :
			case this.Constants.SOLUTIONTYPE_PR_CREATE :
				if (evt.getParameter("selected")) {
					sMaterialShortageSolutionType = this.Constants.SOLUTIONTYPE_PO_CREATE;
					this.dialogAction = this.Constants.SolutionDialogAction_PO_CREATE;
				} else {
					sMaterialShortageSolutionType = this.Constants.SOLUTIONTYPE_PR_CREATE;
					this.dialogAction = this.Constants.SolutionDialogAction_PR_CREATE;
				}
				break;
			case this.Constants.SOLUTIONTYPE_TO_CREATE :
			case this.Constants.SOLUTIONTYPE_TOR_CREATE :
				if (evt.getParameter("selected")) {
					sMaterialShortageSolutionType = this.Constants.SOLUTIONTYPE_TO_CREATE;
					this.dialogAction = this.Constants.SolutionDialogAction_TO_CREATE;
				} else {
					sMaterialShortageSolutionType = this.Constants.SOLUTIONTYPE_TOR_CREATE;
					this.dialogAction = this.Constants.SolutionDialogAction_TOR_CREATE;
				}
				break;
		}
		// Solution Type might have changed, therefore update the model
		oModel.setProperty("/MaterialShortageSolutionType", sMaterialShortageSolutionType);
	}

});

}; // end of i2d/pp/mrpcockpit/reuse/fragments/DialogOrderCreate.controller.js
if ( !jQuery.sap.isDeclared('i2d.pp.mrpcockpit.reuse.fragments.DialogOrderReqChange.controller') ) {
  jQuery.sap.declare('i2d.pp.mrpcockpit.reuse.fragments.DialogOrderReqChange.controller');



jQuery.sap.require('sap.ca.ui.utils.busydialog'); // unlisted dependency retained

jQuery.sap.require('sap.ca.ui.message.message'); // unlisted dependency retained

jQuery.sap.require('sap.ca.ui.model.type.Number'); // unlisted dependency retained

jQuery.sap.require('sap.ca.ui.model.format.QuantityFormat'); // unlisted dependency retained


i2d.pp.mrpcockpit.reuse.fragments.DialogRoot.extend("i2d.pp.mrpcockpit.reuse.fragments.DialogOrderReqChange", {

	/**
	 * This method overwrites the base class implementation. It initializes the texts and labels for the dialog. At the
	 * end the binding is updated.
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.fragments.DialogOrderReqChange
	 */
	_initializeDialog : function() {
		// The radio buttons are bound to following variables. Default is: Change Requisition
		var oModel = this.oDialog.getModel();
		oModel.setProperty("/DialogConfigSourceDefined", true);
		oModel.setProperty("/DialogConfigCtrlOptionConvToOrd", false);
		oModel.setProperty("/DialogConfigCtrlOptionChangeReq", true);

		// Set the title based on the given 'Solution Type'
		switch (oModel.getProperty("/MaterialShortageSolutionType")) {
			case this.Constants.SOLUTIONTYPE_PR_RESCHEDULE :
				this.oDialog.setTitle(this.Common_i18n.getText("SOLUTION_DIALOG_PR_RESCHEDULE_TITLE", [
						oModel.getProperty("/MRPElementExternalID"), oModel.getProperty("/MRPElementItemExternalID")]));
				this.dialogAction = this.Constants.SolutionDialogAction_PR_CHANGE;
				break;
			case this.Constants.SOLUTIONTYPE_PR_INCREASE :
				this.oDialog.setTitle(this.Common_i18n.getText("SOLUTION_DIALOG_PR_INCREASE_TITLE", [
						oModel.getProperty("/MRPElementExternalID"), oModel.getProperty("/MRPElementItemExternalID")]));
				this.dialogAction = this.Constants.SolutionDialogAction_PR_CHANGE;
				break;
			case this.Constants.SOLUTIONTYPE_PR_CHANGE :
				this.oDialog.setTitle(this.Common_i18n.getText("SOLUTION_DIALOG_PR_CHANGE_TITLE", [
						oModel.getProperty("/MRPElementExternalID"), oModel.getProperty("/MRPElementItemExternalID")]));
				this.dialogAction = this.Constants.SolutionDialogAction_PR_CHANGE;
				break;
			case this.Constants.SOLUTIONTYPE_TOR_RESCHEDULE :
				this.oDialog.setTitle(this.Common_i18n.getText("SOLUTION_DIALOG_TOR_RESCHEDULE_TITLE", [
						oModel.getProperty("/MRPElementExternalID"), oModel.getProperty("/MRPElementItemExternalID")]));
				this.dialogAction = this.Constants.SolutionDialogAction_TOR_CHANGE;
				break;
			case this.Constants.SOLUTIONTYPE_TOR_INCREASE :
				this.oDialog.setTitle(this.Common_i18n.getText("SOLUTION_DIALOG_TOR_INCREASE_TITLE", [
						oModel.getProperty("/MRPElementExternalID"), oModel.getProperty("/MRPElementItemExternalID")]));
				this.dialogAction = this.Constants.SolutionDialogAction_TOR_CHANGE;
				break;
			case this.Constants.SOLUTIONTYPE_TOR_CHANGE :
				this.oDialog.setTitle(this.Common_i18n.getText("SOLUTION_DIALOG_TOR_CHANGE_TITLE", [
						oModel.getProperty("/MRPElementExternalID"), oModel.getProperty("/MRPElementItemExternalID")]));
				this.dialogAction = this.Constants.SolutionDialogAction_TOR_CHANGE;
				break;
		}

		// Disable "convert to order" action if no source is defined
		if (this.dialogAction === this.Constants.SolutionDialogAction_PR_CHANGE && !oModel.getProperty("/Vendor")) {
			// Disable "convert to order"
			oModel.setProperty("/DialogConfigSourceDefined", false);

		} else if (this.dialogAction === this.Constants.SolutionDialogAction_TOR_CHANGE
				&& !oModel.getProperty("/SupplyingPlant")) {
			// Disable "convert to order"
			oModel.setProperty("/DialogConfigSourceDefined", false);
		}
	},

	/**
	 * This method overwrites the base class implementation. This method is the handler for the button "OK"
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.fragments.DialogOrderReqChange
	 */
	onOk : function(evt) {
		var oData = this.oDialog.getModel().getData();
		// Check if the screen data is valid (may be changed by the user)
		if (!this._isScreenDataValid()) {
			if (!this.bDateValid) {
				// if date format is not valid
				if(this.bInvalidDateFormat){
					return;
				}
				sap.ca.ui.message.showMessageBox({
					type : sap.ca.ui.message.Type.ERROR,
					message : this.Common_i18n.getText("SOLUTION_DIALOG_MSG_WRONG_DATE")
				});
			} else {
				sap.ca.ui.message.showMessageBox({
					type : sap.ca.ui.message.Type.ERROR,
					message : this.Common_i18n.getText("SOLUTION_DIALOG_MSG_WRONG_QUANTITY_NUMBER")
				});
			}
			// Stay on the dialog and abort processing
			return;
		}
		// Close the dialog
		this.oDialog.close();
		// Show the busy dialog with 'saving...'
		sap.ca.ui.utils.busydialog.requireBusyDialog({
			text : this.Common_i18n.getText("SOLUTION_DIALOG_MSG_SAVE_WAITING")
		});

		// The user has selected an 'option' using the radio button.
		// Based on this selection we either trigger the update of the element or trigger
		// its conversion from a requisition to an order.
		var sErrorDetails = "";
		switch (this.dialogAction) {
			case this.Constants.SolutionDialogAction_PR_CHANGE :
			case this.Constants.SolutionDialogAction_TOR_CHANGE :
				// Create the PO/TO and the CR in batch processing
				sErrorDetails = i2d.pp.mrpcockpit.reuse.util.CollaborationHelper.updatePurchaseRequisitionBatch(oData,
						this._oHandlerOrder);
				break;
			case this.Constants.SolutionDialogAction_PR_CONVERT :
				// Convert the Purchase Requisition and the CR in batch processing
				sErrorDetails = i2d.pp.mrpcockpit.reuse.util.CollaborationHelper.convertPurchaseRequisitionBatch(oData,
						this._oHandlerOrder);
				// new purchase order created due to change requisition to order
				oData.MaterialShortageSolutionType = this.Constants.SOLUTIONTYPE_PO_CREATE;
				break;
			case this.Constants.SolutionDialogAction_TOR_CONVERT :
				// Convert the Transfer Requisition and the CR in batch processing
				sErrorDetails = i2d.pp.mrpcockpit.reuse.util.CollaborationHelper.convertPurchaseRequisitionBatch(oData,
						this._oHandlerOrder);
				// new transfer order created due to change requisition to order
				oData.MaterialShortageSolutionType = this.Constants.SOLUTIONTYPE_TO_CREATE;
				break;
			default :
				jQuery.sap.log.error("Dialog action " + this.dialogAction + " is unknown.");
		}

		// Error handling in case the batch has not been submitted at all.
		// Could happen if a precondition was not fulfilled.
		if (sErrorDetails) {
			sap.ca.ui.utils.busydialog.releaseBusyDialog();
			sap.ca.ui.message.showMessageBox({
				type : sap.ca.ui.message.Type.ERROR,
				message : this.Common_i18n.getText("SOLUTION_DIALOG_" + this.dialogAction + "_MSG_ERROR"),
				details : this.Common_i18n.getText(sErrorDetails)
			});
		} else {
			// Inform the listeners that the OData Request has been sent successfully
			this._fireEventODataSent();
		}

		// Destroy the dialog
		this.oDialog.destroy();
	},

	/**
	 * This method is the handler for the radio button. It sets new dialogAction for the correct message text
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.fragments.DialogOrderReqChange
	 */
	onSelectOptionChangeReq : function(evt) {
		var oModel = evt.getSource().getParent().getModel();
		// Get the solution type
		var sMaterialShortageSolutionType = oModel.getProperty("/MaterialShortageSolutionType");
		// Set the dialog action based on the given solution type
		switch (sMaterialShortageSolutionType) {
			case this.Constants.SOLUTIONTYPE_PR_RESCHEDULE :
			case this.Constants.SOLUTIONTYPE_PR_INCREASE :
			case this.Constants.SOLUTIONTYPE_PR_CHANGE :
				if (evt.getParameter("selected")) {
					this.dialogAction = this.Constants.SolutionDialogAction_PR_CHANGE;
				} else {
					this.dialogAction = this.Constants.SolutionDialogAction_PR_CONVERT;
				}
				break;
			case this.Constants.SOLUTIONTYPE_TOR_RESCHEDULE :
			case this.Constants.SOLUTIONTYPE_TOR_INCREASE :
			case this.Constants.SOLUTIONTYPE_TOR_CHANGE :
				if (evt.getParameter("selected")) {
					this.dialogAction = this.Constants.SolutionDialogAction_TOR_CHANGE;
				} else {
					this.dialogAction = this.Constants.SolutionDialogAction_TOR_CONVERT;
				}
				break;
		}
	}

});

}; // end of i2d/pp/mrpcockpit/reuse/fragments/DialogOrderReqChange.controller.js
if ( !jQuery.sap.isDeclared('i2d.pp.mrpcockpit.reuse.fragments.DialogPlanOrderChange.controller') ) {
  jQuery.sap.declare('i2d.pp.mrpcockpit.reuse.fragments.DialogPlanOrderChange.controller');



jQuery.sap.require('sap.ca.ui.utils.busydialog'); // unlisted dependency retained

jQuery.sap.require('sap.ca.ui.message.message'); // unlisted dependency retained

jQuery.sap.require('sap.ca.ui.model.type.Number'); // unlisted dependency retained

jQuery.sap.require('sap.ca.ui.model.format.QuantityFormat'); // unlisted dependency retained


i2d.pp.mrpcockpit.reuse.fragments.DialogRoot.extend("i2d.pp.mrpcockpit.reuse.fragments.DialogPlanOrderChange", {

	/**
	 * This method overwrites the base class implementation. It initializes the texts and labels for the dialog. At the
	 * end the binding is updated.
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.fragments.DialogOrderReqChange
	 */
	_initializeDialog : function() {
		// The radio buttons are bound to following variables. Default is: Change Requisition
		var oModel = this.oDialog.getModel();
		oModel.setProperty("/DialogActivity", this.Constants.SolutionDialogActivity_EXECUTE);
		oModel.setProperty("/DialogConfigSourceDefined", true);
		oModel.setProperty("/DialogConfigCtrlOptionConvToProdOrd", true);
		oModel.setProperty("/DialogConfigCtrlOptionConvToProcOrd", true);	
		oModel.setProperty("/DialogConfigCtrlOptionConvToReq", true);	
		
		// Set the title based on the given 'Solution Type'
		switch (oModel.getProperty("/MaterialShortageSolutionType")) {
			case this.Constants.SOLUTIONTYPE_PA_STOCK_CHANGE :	
			case this.Constants.SOLUTIONTYPE_PA_VENDOR_CHANGE :
			case this.Constants.SOLUTIONTYPE_PA_UNSRC_CHANGE :
			case this.Constants.SOLUTIONTYPE_PA_PLANT_CHANGE :
			case this.Constants.SOLUTIONTYPE_PA_REPLANT_CHANGE :
				this.oDialog.setTitle(this.Common_i18n.getText("SOLUTION_DIALOG_PA_CHANGE_TITLE", [
						oModel.getProperty("/MRPElementExternalID"), oModel.getProperty("/MRPElementItemExternalID")]));
				this.dialogAction = this.Constants.SolutionDialogAction_PA_CHANGE;
				break;				
			case this.Constants.SOLUTIONTYPE_PA_PROD_CHANGE :
				this.oDialog.setTitle(this.Common_i18n.getText("SOLUTION_DIALOG_PA_CHANGE_TITLE", [			                                                                                   
				    oModel.getProperty("/PlannedOrder"), oModel.getProperty("/PlannedOrder")]));
				this.dialogAction = this.Constants.SolutionDialogAction_PA_CHANGE;
				break;						
		}
	},

	/**
	 * This method overwrites the base class implementation. This method is the handler for the button "OK"
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.fragments.DialogPlanOrderChange
	 */
	onOk : function(evt) {
		var oData = this.oDialog.getModel().getData();
		// Check if the screen data is valid (may be changed by the user)
		if (!this._isScreenDataValid()) {
			if (!this.bDateValid) {
				// if date format is not valid
				if(this.bInvalidDateFormat){
					return;
				}
				sap.ca.ui.message.showMessageBox({
					type : sap.ca.ui.message.Type.ERROR,
					message : this.Common_i18n.getText("SOLUTION_DIALOG_MSG_WRONG_DATE")
				});
			} else {
				sap.ca.ui.message.showMessageBox({
					type : sap.ca.ui.message.Type.ERROR,
					message : this.Common_i18n.getText("SOLUTION_DIALOG_MSG_WRONG_QUANTITY_NUMBER")
				});
			}
			// Stay on the dialog and abort processing
			return;
		}
		// Close the dialog
		this.oDialog.close();
		// Show the busy dialog with 'saving...'
		sap.ca.ui.utils.busydialog.requireBusyDialog({
			text : this.Common_i18n.getText("SOLUTION_DIALOG_MSG_SAVE_WAITING")
		});

				// The user has selected an 'activity' using the radio buttons.
				// Based on this selection we trigger the change of the PA and/or the
				// conversion to a different order type
				var sErrorDetails = "";
				switch (oData.DialogActivity) {
					case this.Constants.SolutionDialogActivity_EXECUTE :
						if ((oData.OrderFinishDate === oData.ChangedOrderFinishDate) && 
								(oData.MRPElementOriginalTotalQty === oData.MRPElementChangedTotalQuantity)) {
							// message "No changes made - no update"
							 sErrorDetails = this.Common_i18n.getText("SOLUTION_NO_CHANGES_MADE");
						} else {
							// Change the PA in batch processing and trigger the conversion if necessary
							sErrorDetails = i2d.pp.mrpcockpit.reuse.util.CollaborationHelper.updatePlannedOrderBatch(oData,
									this._oHandlerOrder);					
						}
						break;						
					case this.Constants.SolutionDialogActivity_PROC_CONVERT :
					case this.Constants.SolutionDialogActivity_PROD_CONVERT :
					case this.Constants.SolutionDialogActivity_REQ_CONVERT :
					// Change the PA in batch processing and trigger the conversion if necessary
						sErrorDetails = i2d.pp.mrpcockpit.reuse.util.CollaborationHelper.updatePlannedOrderBatch(oData,
								this._oHandlerOrder);					
						break;
			default :
				jQuery.sap.log.error("Dialog action " + this.dialogAction + " is unknown.");
		}

		// Error handling in case the batch has not been submitted at all.
		// Could happen if a precondition was not fulfilled.
		if (sErrorDetails) {
			sap.ca.ui.utils.busydialog.releaseBusyDialog();
			sap.ca.ui.message.showMessageBox({
				type : sap.ca.ui.message.Type.ERROR,
				message : this.Common_i18n.getText("SOLUTION_DIALOG_" + this.dialogAction + "_MSG_ERROR"),
				details : this.Common_i18n.getText(sErrorDetails)
			});
		} else {
			// Inform the listeners that the OData Request has been sent successfully
			this._fireEventODataSent();
		}

		// Destroy the dialog
		this.oDialog.destroy();
	},

	/**
	 * Event handler is called if the user select the first radio button "Change Order Now". It sets the activity internally and
	 * updates the UI.
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.fragments.DialogPlanOrderChange
	 */
	_onSelectRadioButton1 : function(oEvent) {
		var oModel = this.oDialog.getModel();
		oModel.setProperty("/DialogActivity", this.Constants.SolutionDialogActivity_EXECUTE);
	},

	/**
	 * Event handler is called if the user select the second radio button "Convert to Production Order". It sets the activity internally
	 * and updates the UI.
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.fragments.DialogPlanOrderChange
	 */
	_onSelectRadioButton2 : function(oEvent) {
		var oModel = this.oDialog.getModel();
		oModel.setProperty("/DialogActivity", this.Constants.SolutionDialogActivity_PROD_CONVERT);
	},

	/**
	 * Event handler is called if the user select the third radio button "Convert to Process Order". It sets the activity
	 * internally and updates the UI.
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.fragments.DialogPlanOrderChange
	 */
	_onSelectRadioButton3 : function(oEvent) {
		var oModel = this.oDialog.getModel();
		oModel.setProperty("/DialogActivity", this.Constants.SolutionDialogActivity_PROC_CONVERT);
	},

	/**
	 * Event handler is called if the user select the third radio button "Convert to Requisition". It sets the activity
	 * internally and updates the UI.
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.fragments.DialogPlanOrderChange
	 */
	_onSelectRadioButton4 : function(oEvent) {
		var oModel = this.oDialog.getModel();
		oModel.setProperty("/DialogActivity", this.Constants.SolutionDialogActivity_REQ_CONVERT);
	}

});

}; // end of i2d/pp/mrpcockpit/reuse/fragments/DialogPlanOrderChange.controller.js
if ( !jQuery.sap.isDeclared('i2d.pp.mrpcockpit.reuse.fragments.DialogShortageAccept.controller') ) {
  jQuery.sap.declare('i2d.pp.mrpcockpit.reuse.fragments.DialogShortageAccept.controller');



jQuery.sap.require('sap.ca.ui.utils.busydialog'); // unlisted dependency retained

jQuery.sap.require('sap.ca.ui.message.message'); // unlisted dependency retained

jQuery.sap.require('sap.ca.ui.model.format.QuantityFormat'); // unlisted dependency retained


i2d.pp.mrpcockpit.reuse.fragments.DialogRoot.extend("i2d.pp.mrpcockpit.reuse.fragments.DialogShortageAccept", {

	/**
	 * This method overwrites the base class implementation. It initializes the texts and labels for the dialog. At the
	 * end the binding is updated.
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.fragments.DialogOrderChange
	 */
	_initializeDialog : function() {
		// Set the dialog action for 'accept shortage'
		this.dialogAction = this.Constants.SolutionDialogAction_ACCEPT;
	},

	/**
	 * This method overwrites the base class implementation. This method is the handler for the button "OK"
	 * 
	 * @memberOf i2d.pp.mrpcockpit.reuse.fragments.DialogShortageAccept
	 */
	onOk : function(evt) {
		var oData = this.oDialog.getModel().getData();
		// Close the dialog
		this.oDialog.close();
		// Show the busy dialog with 'saving...'
		sap.ca.ui.utils.busydialog.requireBusyDialog({
			text : this.Common_i18n.getText("SOLUTION_DIALOG_MSG_SAVE_WAITING")
		});

		// Write Shortage Accept
		var sErrorDetails = "";
		sErrorDetails = i2d.pp.mrpcockpit.reuse.util.CollaborationHelper.createShortageAcceptBatch(oData,
				this._oHandlerOrder);

		// Error handling in case the batch has not been submitted at all.
		// Could happen if a precondition was not fulfilled.
		if (sErrorDetails) {
			sap.ca.ui.utils.busydialog.releaseBusyDialog();
			sap.ca.ui.message.showMessageBox({
				type : sap.ca.ui.message.Type.ERROR,
				message : this.Common_i18n.getText("SOLUTION_DIALOG_" + this.dialogAction + "_MSG_ERROR"),
				details : this.Common_i18n.getText(sErrorDetails)
			});
		} else {
			// Inform the listeners that the OData Request has been sent successfully
			this._fireEventODataSent();
		}

		// Destroy the dialog
		this.oDialog.destroy();
	}

});

}; // end of i2d/pp/mrpcockpit/reuse/fragments/DialogShortageAccept.controller.js
if ( !jQuery.sap.isDeclared('i2d.pp.mrpcockpit.reuse.view.S1parent') ) {
  jQuery.sap.declare('i2d.pp.mrpcockpit.reuse.view.S1parent');
jQuery.sap.require('sap.ca.scfld.md.controller.BaseFullscreenController'); // unlisted dependency retained

jQuery.sap.require('sap.m.TablePersoController'); // unlisted dependency retained

jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained











/***********************************************************************************************************************
 * NOTICE! <br>
 * i2d.pp.mrpcockpit.reuse.util.InteroperabilityHelper.getFilterFrontendVersion() and
 * i2d.pp.mrpcockpit.reuse.util.InteroperabilityHelper.getFrontendVersion() deliver the current Frontend Version <br>
 * The value in it has to be updated to the current Frontend Version manually!
 **********************************************************************************************************************/

/**
 * Basic Controller for all x10 MRP apps (Monitor ...)
 */
sap.ca.scfld.md.controller.BaseFullscreenController.extend("i2d.pp.mrpcockpit.reuse.view.S1parent",
		{
	
			constructor : function() {
		
				sap.ca.scfld.md.controller.BaseFullscreenController.apply(this, arguments);
		
				// remember the base class onInit implementation to execute it later
				var onInit = this.onInit;
				
				this.onInit = function() {
					// Initialize the service version and the service schema version (needed for interoperability)
					i2d.pp.mrpcockpit.reuse.util.InteroperabilityHelper.initialize(this.getView().getModel(), 
							this.getMasterServiceEntity(), this.oApplicationImplementation);
					// get the versions model and bind it to the view
					var oVersion = this.oApplicationImplementation.getApplicationModel("ServiceVersions");
					this.getView().setModel(oVersion, "ServiceVersions");

					// ONE CODE LINE >>>
					this.aDiffFieldText = [];
					if (i2d.pp.mrpcockpit.reuse.util.CommonConstants.ONE_CODELINE_TEXT) {
						// Differentiate field texts: SoH, ModelS / Pattern: [[<fieldname>, [<i18nIDSoH>, <i18nIDModS>]], ...]
						switch (oVersion) {
							case 1 : // Older Version: Not current Version.
								break;
								
							default : // For the current version. Add All Reuse Text that have differences between SoH and ModelS
								this.aDiffFieldText = [["xtolTimeHorizonSelect", ["xtolTimeHorizonSelectSoH", "xtolTimeHorizonSelectModS"]],
								                       ["xtolShortageDefinitionSelect", ["xtolShortageDefinitionSelectSoH", "xtolShortageDefinitionSelectModS"]]];
								break;
						}
					}
					// ONE CODE LINE <<<
					
					// Initialize the i18n model before the oData model is initialized by the base controller onInit
					// this is important to avoid "i18n model not initialized" errors in the formatters
					var oBundle = new sap.ui.model.resource.ResourceModel({
						bundleName : "i2d.pp.mrpcockpit.reuse.i18n.i18n"
					});
					this.getView().setModel(oBundle, "Common_i18n");
					
					onInit.apply(this, arguments);
				};
			},
	
			// -------------------------------------------------------
			// Table Personalization handler and configuration
			// Goal: The object stores the current state of the displayed table
			// Trigger: After the selection of a additional column or after the deletion of a column
			// Usage: Save Display Variant
			// -------------------------------------------------------
			oPersoService : {
				init : function(oPersId) {
					this._sPersistenceId = oPersId;
					this._oBundle = {};
				},

				getPersData : function() {
					var oDeferred = new jQuery.Deferred();
					var oBundle = this._oBundle;
					oDeferred.resolve(oBundle);
					return oDeferred.promise();
				},

				setPersData : function(oBundle) {
					var oDeferred = new jQuery.Deferred();
					this._oBundle = oBundle;
					oDeferred.resolve();
					return oDeferred.promise();
				},

				resetPersData : function(aColumnsInitial) {
					var oDeferred = new jQuery.Deferred();
					var oInitialData = {
						_persoSchemaVersion : "1.0",
						aColumns : aColumnsInitial
					};
					this._oBundle = oInitialData;
					oDeferred.resolve();
					return oDeferred.promise();
				}
			},

			/**
			 * @memberOf i2d.pp.mrpcockpit.reuse.view.S1parent
			 */

			// ---------------------------------------
			// Init function Start
			// ---------------------------------------
			onInit : function() {

				sap.ca.scfld.md.controller.BaseFullscreenController.prototype.onInit.call(this);

				//Set Header Footer Options
				
				this.oHeaderFooterOptions = {
						oEditBtn : {
							sId : "manageButton",
							sI18nBtnTxt : "btnManageShortages",
							bDisabled : false,
							onBtnPressed : jQuery.proxy(this.onNavigationButtonPressed, this)
						},
						bSuppressBookmarkButton : true,
						aAdditionalSettingButtons : [{
							sI18nBtnTxt : "AreaOfResponsibility",
							//sIcon : "sap-icon://BusinessSuiteInAppSymbols/icon-responsible-area",
							onBtnPressed : function(evt) {
								this.aStoredFacetFilterState = this.oViewState.FacetFilterState;
								this.runStateMachine(this, this.oEvent.aORButtonPressed);
							}.bind(this)
						}]
					};
				
				this.setHeaderFooterOptions(this.oHeaderFooterOptions);
				
				/*
				if (!sap.ui.core.routing.HashChanger.getInstance().getHash()) {
					that.oRouter.navTo("state", {
						"stateID" : that.sStateID
					}, true);
				}
				 */
				// onRouteMatched call back will be registered in onInit():
				this.oRouter.attachRoutePatternMatched(this.onRouteMatched, this);

				// Logger, to display comments in the browser console
				this.logger = jQuery.sap.log.getLogger(this.getVariantContainerPrefix());
				this.logger.setLevel(jQuery.sap.log.Level.INFO);

				// I18N Model block
				// get App specific texts
				this.oResourceBundle = this.oApplicationFacade.getResourceBundle();

				// Control Block
				this.oObjectHeader = this.getView().byId("ObjectHeader");

				this.oShortageSelect = this.oView.byId("ShortageSelect");
				// Simply tries to initialize the shortage definition filter to a defined state.
				var sSelectedShortageKey = this.oShortageSelect.getSelectedKey();

				this.filterMaterialShortage = new sap.ui.model.Filter("MaterialShortageDefinitionID",
						sap.ui.model.FilterOperator.EQ, sSelectedShortageKey);

				this.oTimeHorizonSelect = this.getView().byId("TimeHorizonSelect");
				this.oFacetFilter = this.getView().byId("FacetFilter");

				this.aShortageDefinitionKeys = []; // TODO new!

				this.aFacetFilterFilters = [];

				this.oTable = this.getView().byId(this.getTableId());
				this.oView = this.getView();
				this.oTable.setEnableBusyIndicator(false);

				// Paging 100 records are requested by default with each call
				this.oTable.setGrowingThreshold(100);
				this.oTable.setGrowing(true);

				// Get the items that are already defined in XML.
				this.oTableItemTemplate = this.oTable.getItems()[0].clone();
				// Workaround to see the noDataText (JCA)
				this.oTable.removeAllItems();

				// Odata Model Block
				this.oDataModel = this.oApplicationFacade.getODataModel();
				this.oDataModel.setSizeLimit(999);

				if (this.getMasterServiceEntity) {
					// get Service/Schema Version for Interoperability
					this._iServiceSchemaVersion = i2d.pp.mrpcockpit.reuse.util.InteroperabilityHelper._getServiceSchemaVersion(
							this.oDataModel, this.getMasterServiceEntity());
					this._iServiceVersion = i2d.pp.mrpcockpit.reuse.util.InteroperabilityHelper._getServiceVersion(
							this.oDataModel, this.getMasterServiceEntity());

					/**
					 * If backend version is lower than frontend version it could be that entity properties does not match with
					 * view fields, especially the backend call). This method compares metadata properties with existing table
					 * columns and removes needless columns.
					 */
					i2d.pp.mrpcockpit.reuse.util.InteroperabilityHelper.removeNeedlessColumnsFromTable(this.oDataModel, this
							.getMasterServiceEntity(), this.oTable, "mrpcoDataField");
				};

				// attach listeners to controls and calls
				this.oDataModel.attachRequestCompleted(this._onRequestComplete, this);

				this.oDataModel.attachRequestFailed(this.oDataModel, this._handleRequestFailed, this);

				// Initialize the local storage of the personalization data.
				this.oPersoService.init(this.getViewNumber() + "PersoService");

				// see comments on definition
				// those functions are part of the sequence diagram
				this._initShortageSelect();
				if (this.oTimeHorizonSelect) {
					this._initTimeHorizonSelect();
				}

				var sComponentId = sap.ui.core.Component.getOwnerIdFor(this.getView());
				this.myComponent = sap.ui.component(sComponentId);
				var oComponentData = this.myComponent.getComponentData();

				this.sVariantID = "";
				this.sStateID = this.myComponent.sStateID;
				if (oComponentData && oComponentData.startupParameters && oComponentData.startupParameters.VariantID) {
					if (oComponentData.startupParameters.VariantID[0] !== undefined) {
						this.sVariantID = oComponentData.startupParameters.VariantID[0];
					}
				}
				
				if (oComponentData && oComponentData.startupParameters && oComponentData.startupParameters.OrderCategory) {
					if (oComponentData.startupParameters.OrderCategory[0] !== undefined) {
						this.sOrderCategory = oComponentData.startupParameters.OrderCategory[0];
					// change the title of the app, only need for 312er app
						if(this._changeAppName){
							this._changeAppName(this.sOrderCategory);
						}			
					}
				}
				
				// -----------------------------------
				// State of the view ??necessary in a further development step
				// -----------------------------------
				if (this.getDemandType) {
					this.demandType = this.getDemandType();
					this.oViewState = {
						MaterialShortageDefinitionID : "",
						TimeHorizon : "7",
						FacetFilterState : [],
						TableState : {},
						SortKey : "",
						SortDescending : false,
						DemandType : this.demandType,
						DefaultVariant : false,
						VariantName : "",
						ViewChanged : false,
						OrderCategory : this.sOrderCategory
					};
				} else {
					this.oViewState = {
						MaterialShortageDefinitionID : "",
						TimeHorizon : "7",
						FacetFilterState : [],
						TableState : {},
						SortKey : "",
						SortDescending : false,
						DefaultVariant : false,
						VariantName : "",
						ViewChanged : false,
						OrderCategory : this.sOrderCategory
					};
				};

				// ---------------------------------------
				// Table Settings
				// ---------------------------------------
				this.oVSDialog = {}; // Will be created in _initResultTable.
				this.bNewVSDialogRequiredAfterTablePers = true; // Set to cause the initial creation.

				// ---------------------------------------
				// Table Personalization Start
				// ---------------------------------------
				this.newVSDialog = true;
				this.oSorter = [];
				this.bSortPath = null;
				this.bsortDescending = null;
				this.aTableStateColumnsInitial = this._getInitialTableColumnsState();
				this.oTPC = new sap.m.TablePersoController({
					table : this.oTable,
					persoService : this.oPersoService,
					componentName : this.getComponentName()
				}).activate();

				this.oTPC.attachPersonalizationsDone(function(oData) {
					this._personalizationsDone(oData);
				}.bind(this));

				this.oView.byId(this.getViewNumber() + "TablePersoButton").attachPress(function() {
					this.oTPC.openDialog();
				}.bind(this));
				// ---------------------------------------
				// Table Personalization End
				// ---------------------------------------
				this._initResultTable();

				// --------------------------------------------
				// Display Variant functionalities
				// --------------------------------------------

				this.sDefaultVariantName = "";
				if (!this.oDefaultVariantData) {
					this.oDefaultVariantData = {
						MaterialShortageDefinitionID : "",
						TimeHorizon : "7",
						FacetFilterState : [],
						TableState : {},
						SortKey : "",
						SortDescending : false,
						DefaultVariant : true,
						VariantName : "",
						ViewChanged : false,
						OrderCategory : this.sOrderCategory
					};
				}

				var sDefaultLayoutName = this.getView().getModel("Common_i18n").getResourceBundle().getText("DefaultLayout");
				i2d.pp.mrpcockpit.reuse.view.VariantHandler.saveDefaultVariant(null, this.getVariantContainerPrefix(),
						sDefaultLayoutName, this.oDefaultVariantData);

				this.oFacetFilter.attachReset(function() {
					i2d.pp.mrpcockpit.reuse.view.FacetFilter._handleFacetFilterReset(this,
							this.oDefaultVariantData.FacetFilterState);
				}.bind(this));

				this.oVariantData = this.oDefaultVariantData;
				this.oVariantData.DefaultVariant = false;
				this.sCurrentVariantName = "";
				this.sVariantContainerPrefix = this.getVariantContainerPrefix();

				this.bViewHasBeenChanged = false;

				this.oDisplayVariantPopover = i2d.pp.mrpcockpit.reuse.view.DisplayVariant.getDisplayVariantPopover(this);

				// DOM manipulation for exact placement of Variant List PoPover
				this.oObjectHeaderIconDomRef = {};

				// ---------------------------------------
				// Initialize State Machine Start
				// ---------------------------------------
				this.oState = i2d.pp.mrpcockpit.reuse.util.StateMachine.oState;
				this.oEvent = i2d.pp.mrpcockpit.reuse.util.StateMachine.oEvent;
				this.oAction = i2d.pp.mrpcockpit.reuse.util.StateMachine.oAction;
				this.runStateMachine = i2d.pp.mrpcockpit.reuse.util.StateMachine.runStateMachine;
				this.sState = this.oState.initial;

				this.runStateMachine(this, this.oEvent.start);

				// ---------------------------------------
				// Initialize State Machine End
				// ---------------------------------------

				//i2d.pp.mrpcockpit.reuse.view.ViewStateHandler.saveViewStateInContainer(null, this.oViewState, this.sStateID, 60);

			},

			// ---------------------------------------
			// Init function End
			// ---------------------------------------

			onRouteMatched : function(oEvent) {
				var sRouteName = oEvent.getParameter("name");
				if (sRouteName === "state") {
					var sArg = oEvent.getParameter("arguments");
					if ((sArg.stateID != "undefined") && (sArg.stateID != this.sStateID)) {
						var myPattern = /id-.*-.*/;
            var sStateID = myPattern.exec(sArg.stateID);
            if (sStateID) {
                  // restore the old stateID
                  this.sStateID = sStateID[0];
            }
						//i2d.pp.mrpcockpit.reuse.view.DisplayVariant.readTempViewSateFromContainer(sArg.stateID);
					}
				} else {
					return;
				}
			},

			// if one of the saved components of the variant is changed display an * next to the variant name
			registerViewChanged : function() {

				if (this.bViewHasBeenChanged == false) {
					this.bViewHasBeenChanged = true;
					if (this.sCurrentVariantName) {
						this.oObjectHeader.setTitle(this.sCurrentVariantName + " *");
						this.oViewState.VariantName = this.sCurrentVariantName;
					} else {
						this.oObjectHeader.setTitle(this.getObjectHeaderTitle() + " *");
					}
					this.oViewState.ViewChanged = true;
				}
				i2d.pp.mrpcockpit.reuse.view.ViewStateHandler.saveViewStateInContainer(null, this.oViewState,
						this.sStateID, i2d.pp.mrpcockpit.reuse.util.CommonConstants.VIEW_STATE_VALIDITY_TIME);
			},

			/**
			 * Method is called as soon as any oData request attached to our oData model has been completed (includes
			 * receiving a response), no matter whether the request succeeded or not.
			 */
			_onRequestComplete : function(oData) {

				// Check if it's a $batch = oData.oSource.bUseBatch
				var sURL = oData.getParameter("url");

				var sSortingEntitySetName = this.oDataModel.getServiceMetadata().dataServices.schema[0].namespace
						+ this.getMasterEntity();

				if (oData.getSource().bUseBatch) {
					// Do nothing because we don't use a $batch (Personalization use $batch)
				} else if (sURL.match(this.getShortageEntitySetName())) {
					this.filterMaterialShortage = new sap.ui.model.Filter("MaterialShortageDefinitionID",
							sap.ui.model.FilterOperator.EQ, this.oVariantData.MaterialShortageDefinitionID);

					// Save the received shortage definition ids so those in variants can be checked.
					var aItems = this.oShortageSelect.getItems();
					for ( var i = 0; i < aItems.length; i++) {
						var oItem = aItems[i];
						this.aShortageDefinitionKeys.push(oItem.getKey());
					};

					// If the desired shortage definition is not "" and shortage definitions have been received,
					// check if the desired one exists.
					if (this.oVariantData.MaterialShortageDefinitionID != "") {
						if (this.aShortageDefinitionKeys.length > 0) {
							var bShortageDefinitionIdExists = false;
							for ( var i = 0; i < this.aShortageDefinitionKeys.length; i++) {
								if (this.aShortageDefinitionKeys[i] == this.oVariantData.MaterialShortageDefinitionID) {
									bShortageDefinitionIdExists = true;
									this.oShortageSelect.setSelectedKey(this.oVariantData.MaterialShortageDefinitionID);
									break;
								};
							}
							if (bShortageDefinitionIdExists == false) {
								this.oShortageSelect.setSelectedItem(aItems[0]);
								var sSelectedShortageKey = this.oShortageSelect.getSelectedKey();
								this.filterMaterialShortage = new sap.ui.model.Filter("MaterialShortageDefinitionID",
										sap.ui.model.FilterOperator.EQ, sSelectedShortageKey);
								this.oViewState.MaterialShortageDefinitionID = sSelectedShortageKey;
								sap.m.MessageBox.alert(this.getView().getModel("Common_i18n").getResourceBundle().getText(
										"SHORTDEF_MISSING_MSG"));
							};
						} else {
							sap.m.MessageBox.alert(this.getView().getModel("Common_i18n").getResourceBundle().getText(
									"SHORTDEF_MISSING_MSG"));
						}
					} else {
						if (this.aShortageDefinitionKeys.length > 0) {
							this.oShortageSelect.setSelectedItem(aItems[0]);
							var sSelectedShortageKey = this.oShortageSelect.getSelectedKey();
							this.filterMaterialShortage = new sap.ui.model.Filter("MaterialShortageDefinitionID",
									sap.ui.model.FilterOperator.EQ, sSelectedShortageKey);
							this.oViewState.MaterialShortageDefinitionID = sSelectedShortageKey;
						}
					}
				}

				else if (sURL.match(sSortingEntitySetName)) {
					// Check if AoR errors was sent from back end. If not, consider the table
					// data have arrived - even if other errors have occurred.
					var oerrorobject = oData.getParameters("errorobject");
					var sresponseText = oerrorobject && oerrorobject.errorobject && oerrorobject.errorobject.responseText;
					if (sresponseText) {
						if (!sresponseText.match('@AOR@')) {
							this.oTable.setNoDataText(this.getView().getModel("Common_i18n").getResourceBundle().getText(
									"itemUpdateFinished"));
							this.runStateMachine(this, this.oEvent.tableDataReceived);
						}
					} else {
						this.runStateMachine(this, this.oEvent.tableDataReceived);
					}
				}
			},

			/**
			 * Handles the error event of a oData Call. First triggers a special coding for the AOR case (if the user does not
			 * have an AOR) For all further the error is transferred to the general error handling in the connectionManager
			 * (Scfld) This is necessary because we detach the general error handling in the configuration.js (Parameter:
			 * fRequestFailed of each Service in Service List) in Order not to trigger it twice
			 */

			_handleRequestFailed : function(oEvent) {
				// read error handling
				var sresponseText = oEvent.getParameter("responseText");
				if (sresponseText) {

					if (sresponseText.match('@AOR@')) {
						this.runStateMachine(this, this.oEvent.aORUndefined);
					}

					else if (sresponseText.match('@SHORTDEF@')) {
						sap.m.MessageBox.alert(this.getView().getModel("Common_i18n").getResourceBundle()
								.getText("NO_SHORTDEF_MSG"));
					}

					else {
						// triggering of general error handling
						this.oApplicationFacade.oApplicationImplementation.oConnectionManager.handleRequestFailed(oEvent);
					}

				} else {
					// triggering of general error handling
					this.oApplicationFacade.oApplicationImplementation.oConnectionManager.handleRequestFailed(oEvent);
				}
			},
			// End

			/*
			 * Retrieve the service version of the OData model/service. @return The service version as an integer or 1 as
			 * default for an initial version. @public
			 */
			getServiceVersion : function() {
				return this._iServiceVersion;
			},

			/*
			 * Retrieve the service schema version of the OData model/service. @return The service schema version as an
			 * integer or 1 as default for an initial version. @public
			 */
			getServiceSchemaVersion : function() {
				return this._iServiceSchemaVersion;
			},

			// necessary every time the user changed a filter the table has to be refreshed thus
			_rebindRefreshTable : function() {
				var aFilters = [];

				/**
				 * NOTICE! <br>
				 * i2d.pp.mrpcockpit.reuse.util.InteroperabilityHelper.getFilterFrontendVersion() delivers the current Frontend
				 * Version The value in it has to be updated to the current Frontend Version manually! aFilters hand over the
				 * value to backend
				 */
				if (this._iServiceSchemaVersion > 1) {
					// hand over Frontend Version into Backend
					aFilters.push(i2d.pp.mrpcockpit.reuse.util.InteroperabilityHelper.getFilterFrontendVersion());
				}
				
				if(this.sOrderCategory !== undefined){
					var sOrderCategoryFilter = new sap.ui.model.Filter("MRPElementCategory", sap.ui.model.FilterOperator.EQ, this.sOrderCategory);
					aFilters.push(sOrderCategoryFilter);
					
				}

				if (this.filterMaterialShortage.oValue1 != "") {
					aFilters.push(this.filterMaterialShortage);
				}

				if (this.oTimeHorizonSelect) {
				aFilters.push(this.filterTimeHorizon);
				}
				
				if (this.getSpecificAppFilter()) {
					aFilters.push(this.getSpecificAppFilter());
				}

				for ( var iFFFIndex = 0; iFFFIndex < this.aFacetFilterFilters.length; iFFFIndex++) {
					aFilters.push(this.aFacetFilterFilters[iFFFIndex]);
				}
				if (this.sDataFieldSelect) {
					this._setupMasterEntityCall(this.getMasterEntity(), this.oTableItemTemplate, this.oSorter,
							this.sDataFieldSelect, aFilters);
				} else {
					this._setupMasterEntityCall(this.getMasterEntity(), this.oTableItemTemplate, this.oSorter, this
							.getInitialSelectFields(), aFilters);
				}

				this.newVSDialog = true;
			},

			_handleShortageChange : function() {
				var sSelectedKey = this.oShortageSelect.getSelectedKey();
				this.oViewState.MaterialShortageDefinitionID = sSelectedKey;
				this.filterMaterialShortage = new sap.ui.model.Filter("MaterialShortageDefinitionID",
						sap.ui.model.FilterOperator.EQ, sSelectedKey);

				this.registerViewChanged(); // What if nothing was changed?
				this.runStateMachine(this, this.oEvent.filterChanged);

			},

			_handleTimeHorizonChange : function() {
				var sSelectedKey = this.oTimeHorizonSelect.getSelectedKey();
				this.oViewState.TimeHorizon = sSelectedKey;
				this.filterTimeHorizon = new sap.ui.model.Filter("DynamicHorizonCode", sap.ui.model.FilterOperator.EQ,
						sSelectedKey);

				this.registerViewChanged(); // What if nothing was changed?
				this.runStateMachine(this, this.oEvent.filterChanged);
			},

			_setFacetFilterState : function(aFacetFilterState) {
				i2d.pp.mrpcockpit.reuse.view.FacetFilter._setFacetFilterState(this, aFacetFilterState);
			},

			_recreateFacetFilterFiltersFromVariant : function(aFacetFilterState) {
				i2d.pp.mrpcockpit.reuse.view.FacetFilter._recreateFacetFilterFiltersFromVariant(this, aFacetFilterState);
			},

			_recreateFacetFilter : function(aFFItems) {
				i2d.pp.mrpcockpit.reuse.view.FacetFilter._recreateFacetFilter(this, aFFItems);
			},

			/**
			 * Inits the "Shortage Definition" Select control (the dropdown)
			 */
			_initShortageSelect : function() {

				var oShortageSelectItemTemplate = new sap.ui.core.Item({
					text : "{MaterialShortageDefinitionName}",
					key : "{MaterialShortageDefinitionID}"
				});

				var oShortageRequestFilters = [new sap.ui.model.Filter("MaterialShortageDefinitionType",
						sap.ui.model.FilterOperator.EQ, this.getShortageDefintionType())];

				this.oShortageSelect.bindItems({
					path : "/MaterialShortageDefinitions",
					template : oShortageSelectItemTemplate,
					filters : oShortageRequestFilters
				});

				this.oShortageSelect.attachChange(function() {
					this._handleShortageChange();
				}.bind(this));

			},

			/**
			 * Inits the "Time Horizon" Select control (the dropdown)
			 */
			_initTimeHorizonSelect : function() {

				this.oTimeHorizonSelect.setSelectedKey("7");

				var sSelectedTimeHorizonKey = this.oTimeHorizonSelect.getSelectedKey();
				this.filterTimeHorizon = new sap.ui.model.Filter("DynamicHorizonCode", sap.ui.model.FilterOperator.EQ,
						sSelectedTimeHorizonKey);
				this.oTimeHorizonSelect.attachChange(function() {
					this._handleTimeHorizonChange();
				}.bind(this));

			},

			/**
			 * Inits the Result Table
			 */
			_initResultTable : function() {

				// define the actions after table data has been updated
				this.oTable.attachUpdateFinished(function(oEvent) {
					// Recreate table sorting dialog if necessary.
					if (this.bNewVSDialogRequiredAfterTablePers == true) {
						this.bNewVSDialogRequiredAfterTablePers = false;
						this.newVSDialog = true;
						this.oVSDialog = i2d.pp.mrpcockpit.reuse.view.TableSorting._getVSDialogNEW(this);
						var aSortItems = this.oVSDialog.getSortItems();
						for ( var i = 0; i < aSortItems.length; i++) {
							var oSortItem = aSortItems[i];
							if (oSortItem.getKey() == this.oViewState.SortKey) {
								this.oVSDialog.setSelectedSortItem(oSortItem);
							}
						}
						this.oVSDialog.setSortDescending(this.oViewState.SortDescending);
					}

					// update the table's noDataText + result list counter
					this.oTable.setNoDataText(this.getView().getModel("Common_i18n").getResourceBundle().getText(
							"itemUpdateFinished"));
					var iNumber = oEvent.getParameter("total");
					jQuery.sap.delayedCall(0, this, function() {
						this.oObjectHeader.setNumber(iNumber);
					});
				}.bind(this));

				// initially set the table's noDataText to 'Loading'
				this.oTable.setNoDataText(this.getView().getModel("Common_i18n").getResourceBundle().getText(
						"itemUpdateStarted"));
			},

			/**
			 * Trigger Master Entity Call setup data binding of its result to the 'main table'
			 */

			// shall centralize the mastercall make interface shorter -long interface ??
			_setupMasterEntityCall : function(sMasterEntity, oTableItemTemplate, oSorter, aInitialSelectFields, aFilters) {

				this.oTable.bindItems({
					path : sMasterEntity,
					template : oTableItemTemplate,
					sorter : oSorter,
					parameters : {
						select : aInitialSelectFields
					},
					filters : aFilters
				});
			},

			/**
			 * Trigger Facet Filter oData Call
			 */
			_setupFacetFilterCall : function() {

				var aFacetFilterFields = this.getFacetFilterDefaults();

				if (this.getDemandType) {
					var sFilter = "$filter=((FacetFilterType eq '" + this.getFacetFilterType() + "')) and ((DemandType eq '"
							+ this.getDemandType() + "')) and (((FacetFilterField eq '" + aFacetFilterFields[0] + "'))";
				} else {
					var sFilter = "$filter=((FacetFilterType eq '" + this.getFacetFilterType()
							+ "')) and (((FacetFilterField eq '" + aFacetFilterFields[0] + "'))";
				}

				for ( var i = 1; i < aFacetFilterFields.length; i++) {
					sFilter = sFilter + " or ((FacetFilterField eq '" + aFacetFilterFields[i] + "'))";
				}
				sFilter = sFilter + ")";
				// Delivers Frontend Version into Backend
				if (this._iServiceSchemaVersion > 1) {
					sFilter = sFilter + " and ((Version eq '"
							+ i2d.pp.mrpcockpit.reuse.util.InteroperabilityHelper.getFrontendVersion() + "'))";
				}
				
				if(this.sOrderCategory !== undefined){
					sFilter = sFilter + " and ((MRPElementCategory eq '" + this.sOrderCategory + "'))";	
				}
				

				var sExpand = "$expand=To_FacetFilterValues";
				var sJSON = "$format=json";
				var aURLParams = [sFilter, sExpand, sJSON];
				this.oDataModel.read('/FacetFilters', null, aURLParams, true,
				// Success
				function(oData, oResponse) {
					this._recreateFacetFilter(oData.results);
					this.runStateMachine(this, this.oEvent.facetDataReceived);
				}.bind(this),
				// Failure
				function(oError) {
					// failure of facet call shall triger mastercall without filters??
					this.oFacetFilter.setShowPersonalization(false);
					var sBodyText = oError && oError.response && oError.response.body;
					if (sBodyText) {
						if (sBodyText.match('@AOR@')) {
							this.runStateMachine(this, this.oEvent.aORUndefined);
						} else {
							this.runStateMachine(this, this.oEvent.noFacetDataReceived);
						}
					} else {
						this.runStateMachine(this, this.oEvent.noFacetDataReceived);
					}
				}.bind(this));

			},

			/**
			 * React on Changed Area of Responsibility
			 */

			_firstAORDialogFinished : function() {
				this.runStateMachine(this, this.oEvent.firstAORDialogFinished);
			},

			_aORDialogFinished : function(bResult) {
				// AOR dialog was cancelled
				if (bResult == i2d.pp.mrpcockpit.reuse.util.CommonConstants.AOR_DEFINITION_CANCELED) {
					this.runStateMachine(this, this.oEvent.aORDialogCancelled);
				} else {
					// AOR dialog was saved
					this.runStateMachine(this, this.oEvent.aORDialogFinished);
				};
			},

			onItemsUpdateStarted : function(oEvent) {
				this.setBtnEnabled("manageButton", false);
				this.oTable.setNoDataText(this.getView().getModel("Common_i18n").getResourceBundle().getText(
						"itemUpdateStarted"));
			},

			onItemsUpdateFinished : function() {
				if (this.oTable.getSelectedItems().length > 0) { // upateStarted is fired if stock availability callout is
					// called, therefore we restore the manage button
					// status here
					this.setBtnEnabled("manageButton", true);
				}
				this.oTable.setNoDataText(this.getView().getModel("Common_i18n").getResourceBundle().getText(
						"itemUpdateFinished"));
			},

			/**
			 * Table Personalization Function: Initial Call
			 */
			_getInitialTableColumnsState : function() {
				var aColumnsNew = [];
				var aColumnsOld = this.oTable.getColumns();
				for ( var i = 0; i < aColumnsOld.length; i++) {
					var oColumnOld = aColumnsOld[i];
					var sId = oColumnOld.getId();
					var iOrder = i;
					var sText = oColumnOld.getHeader().getText();
					var bVisible = oColumnOld.getVisible();
					aColumnsNew.push({
						id : sId,
						order : iOrder,
						text : sText,
						visible : bVisible
					});
				}
				return aColumnsNew;
			},

			/**
			 * Table Personalization Function: Further Execution (Press Button 'OK')
			 */
			_personalizationsDone : function(oData) {
				this.bNewVSDialogRequiredAfterTablePers = true; // Is referenced in _onRequestComplete.
				var oMyPromise = this.oPersoService.getPersData();
				oMyPromise.done(this._refilloDataSelectFields.bind(this));
				oMyPromise.done(this._storeTableState.bind(this));
				oMyPromise.done(this._triggerStateMachineEventTableChanged.bind(this));
				this.registerViewChanged(); // What if nothing was changed?
			},

			_triggerStateMachineEventTableChanged : function() {
				this.runStateMachine(this, this.oEvent.tableChanged);
			},

			// changed function for determination of OData fields for personalization function
			_refilloDataSelectFields : function() {
				var aUniqueSelectFields = this._determineFieldsForVisibleColumns();
				this.sDataFieldSelect = "";
				this.sDataFieldSelect += this.getBaseSelectFields();
				for ( var i = 0; i < aUniqueSelectFields.length; i++) {
					this.sDataFieldSelect += "," + aUniqueSelectFields[i];
				}
			},

			// new function for determination of OData Fields

			_determineFieldsForVisibleColumns : function() {
				var aColumns = [];
				var oColumn = {};
				var sThisColumnFields = "";
				var sAllColumnFields = "";
				var aAllColumnFields = [];
				var aUniqueSelectFields = [];

				aColumns = this.oTable.getColumns();
				for ( var i = 0; i < aColumns.length; i++) {
					oColumn = aColumns[i];
					if (oColumn.getVisible() == true) {
						sThisColumnFields = oColumn.data("mrpcoDataField");
						if (sThisColumnFields) {
							if (sAllColumnFields == "") {
								sAllColumnFields = sThisColumnFields;
							} else {
								sAllColumnFields = sAllColumnFields + "," + sThisColumnFields;
							}
						}
					}
				};
				if (sAllColumnFields != "") {
					aAllColumnFields = sAllColumnFields.split(",");
					aUniqueSelectFields = jQuery.sap.unique(aAllColumnFields);
				}
				return aUniqueSelectFields;
			},

			_storeTableState : function(oTableState) {
				this.oViewState.TableState = oTableState;
			},

			_applyTableStateToTable : function(oTableState) {
				this.oPersoService.setPersData(oTableState);
				this.oTPC.applyPersonalizations();
			},

			_resetTableStateToTable : function(oTableState) {
				this.oPersoService.resetPersData(this.aTableStateColumnsInitial);

				if (this.oTPC.refresh) {
					this.oTPC.refresh();
				}
			},

			/**
			 * Table Sorting Function
			 */
			onViewSettingsDialogButtonPressed : function(oEvent) {
				this.oVSDialog.open();
			},

			// --------------------------------------------
			// Display Variant functionalities
			// --------------------------------------------

			onVariantSelectorPress : function(oEvent) {
				this.oObjectHeaderIconDomRef = oEvent.getParameters().domRef;
				i2d.pp.mrpcockpit.reuse.view.DisplayVariant.readVariantList(this);
			},

			_keyGen : function() {
				return jQuery.sap.uid();// (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
			},

			/**
			 * Cross Application Navigation
			 */
			onNavigationButtonPressed : function(oEvent) {
				var oList = this.getView().byId(this.getTableId());
				this.setBtnEnabled("manageButton", false);
				sap.ca.ui.utils.busydialog.requireBusyDialog();
				var aSelectedItems = oList.getSelectedItems();
				// collect parameters of the selected items
				if (aSelectedItems.length > 0) {
					// navigate to "manage" applications
					var fgetService = sap.ushell && sap.ushell.Container && sap.ushell.Container.getService;
					var oCrossAppNavigator = fgetService && fgetService("CrossApplicationNavigation");
					if (oCrossAppNavigator) {
						var bHash = "MRPCockpitNavigation." + this.sViewNumber;
						var oPersonalizationService = sap.ushell.Container.getService("Personalization");
						var sContainerName = bHash;// "MRPCockpitNavigation." + this.sViewNumber;
						if (oPersonalizationService.getContainer) {
							oPersonalizationService.getContainer(sContainerName, {
								validity : i2d.pp.mrpcockpit.reuse.util.CommonConstants.VIEW_STATE_VALIDITY_TIME
							}).fail(function() {
								sap.ca.ui.utils.busydialog.releaseBusyDialog();
								jQuery.sap.log.error("Loading personalization data failed.");
							}).done(function(oContainer) {
								oContainer.setItemValue("Navigation", this.getNavigationParams());
								oContainer.save().done(function() {
									sap.ca.ui.utils.busydialog.releaseBusyDialog();
									// trigger navigation
									//TODO David
//									oCrossAppNavigator.toExternal({
//										target : this.getNavigationTarget(),
//										params : {
//											// "localBookmark" : bHash,
//											"navigationID" : bHash
//										}
//									});
									
									var oParams = {"navigationID" : bHash};
									if (this.sOrderCategory != undefined) {
									oParams.OrderCategory = this.sOrderCategory;
									}

									oCrossAppNavigator.toExternal({
										target : this.getNavigationTarget(),
										params : oParams
									});
								// End TODO

								}.bind(this));
							}.bind(this));
						}

					} else {
						var sMessage = this.oResourceBundle.getText("messNoLaunchpad");
						sap.ca.ui.message.showMessageBox({
							type : sap.ca.ui.message.Type.ERROR,
							message : sMessage
						});
					}
				} else {
					var sMessage = this.oResourceBundle.getText("messNoItems");
					sap.ca.ui.message.showMessageBox({
						type : sap.ca.ui.message.Type.ERROR,
						message : sMessage
					});
				}
			},

			// toggle navigation button
			onItemSelection : function(oEvent) {
				var oList = this.oView.byId(this.getTableId());
				var aSelectedItems = [];
				aSelectedItems = oList.getSelectedItems();
				if (aSelectedItems.length === 0) {
					this.setBtnEnabled("manageButton", false);
				} else {
					this.setBtnEnabled("manageButton", true);
				}
			},
			// Reset navigation button after filter change and new load
			// of table
			onItemsLoaded : function(oEvent) {
				this.setBtnEnabled("manageButton", false);
			},

			/**
			 * Returns the context related buttons (e.g. navigation, AoR, ...)
			 */
			/*
			getHeaderFooterOptions : function() {
				return {
					oEditBtn : {
						sId : "manageButton",
						sI18nBtnTxt : "btnManageShortages",
						bDisabled : false,
						onBtnPressed : jQuery.proxy(this.onNavigationButtonPressed, this)
					},
					bSuppressBookmarkButton : true,
					aAdditionalSettingButtons : [{
						sI18nBtnTxt : "AreaOfResponsibility",
						sIcon : "sap-icon://BusinessSuiteInAppSymbols/icon-responsible-area",
						onBtnPressed : function(evt) {
							this.runStateMachine(this, this.oEvent.aORButtonPressed);
						}.bind(this)
					}]
				};
			},
			*/

			// POPOVER MaterialShortageQuickView
			handlePressMaterialShortageQuickView: function (oEvent) {
				if (! this._oShortageQuickView) {
					this._oShortageQuickView = sap.ui.xmlfragment("i2d.pp.mrpcockpit.reuse.fragments.MaterialShortageQuickView", this);
		    	this._oShortageQuickView.setModel(this.oApplicationImplementation.getApplicationModel("ServiceVersions"),"ServiceVersions");
		    	this._oShortageQuickView.setModel(this.getView().getModel("Common_i18n"), "Common_i18n");
		    	this._oShortageQuickView.setModel(this.getView().getModel());
		    }
				var oSelectedMRPElementItem = oEvent.getSource();
				var oData = oSelectedMRPElementItem.getBindingContext().getObject();
				var quickViewPath = "/Materials(";
						quickViewPath += "MaterialID='" + encodeURIComponent(oData.MaterialID) + "',";
						quickViewPath += "MaterialShortageDefinitionID='" + encodeURIComponent(oData.MaterialShortageDefinitionID) + "',";
						quickViewPath += "MRPArea='" + encodeURIComponent(oData.MRPArea) + "',";
					  quickViewPath += "MRPPlanningSegmentNumber='" + encodeURIComponent(oData.MRPPlanningSegmentNumber) + "',";
						quickViewPath += "MRPPlanningSegmentType='" + encodeURIComponent(oData.MRPPlanningSegmentType) + "',";
						quickViewPath += "MRPPlant='" + encodeURIComponent(oData.MRPPlant) + "'";
						quickViewPath += ")";
						quickViewPath += "?$select=";
						quickViewPath += "MaterialExternalID,MaterialName,AvailabilityChart,MaterialShortageStartDate,MaterialShortageEndDate,DaysOfSupplyDuration,"
								+ "MaterialShortageQuantity,MaterialABCClassification,MRPAvailableStockQuantity,MaterialSafetyStockQty,TargetQuantityUnitDcmls,"
								+ "ManualPlanningHorizonEndDate,TotalReplenishmentLeadDuration,VendorName,MaterialProcurementCategory,UnitOfMeasureTechnicalName,MRPPlant,MRPArea";
				// Service call
				this._oShortageQuickView.bindElement(quickViewPath);
				this._oShortageQuickView.getElementBinding().attachDataReceived(function(){
					this._oShortageQuickView.openBy(oSelectedMRPElementItem);	
				},this);
				
			},

			handleQuickViewCloseButton : function(oEvent) {
				this._oShortageQuickView.close();
			},

			
			
			onExit : function() {
				sap.ca.ui.utils.busydialog.releaseBusyDialog();
				this.oDataModel.detachRequestCompleted(this._onRequestComplete, this);

				this.oDataModel.detachRequestFailed(this.oDataModel, this._handleRequestFailed, this);
				this.oTPC.detachPersonalizationsDone();
				this.oRouter.detachRoutePatternMatched(this.onRouteMatched, this);
				this.oView.byId(this.getViewNumber() + "TablePersoButton").detachPress();
				this.oFacetFilter.detachReset();

				// save viewstate and unbind beforeunload because S2parent uses beforeunload as well
				//i2d.pp.mrpcockpit.reuse.view.ViewStateHandler
				//		.saveViewStateInContainer(null, this.oViewState, this.sStateID,i2d.pp.mrpcockpit.reuse.util.CommonConstants.VIEW_STATE_VALIDITY_TIME);
			}

		});

}; // end of i2d/pp/mrpcockpit/reuse/view/S1parent.js
if ( !jQuery.sap.isDeclared('i2d.pp.mrpcockpit.reuse.view.S2parent') ) {
  jQuery.sap.declare('i2d.pp.mrpcockpit.reuse.view.S2parent');
jQuery.sap.require('sap.ca.scfld.md.controller.ScfldMasterController'); // unlisted dependency retained








sap.ca.scfld.md.controller.ScfldMasterController
		.extend(
				"i2d.pp.mrpcockpit.reuse.view.S2parent",
				{

					/**
					 * @memberOf i2d.pp.mrpcockpit.reuse.view.S2parent
					 */
					onInit : function() {

						/***********************************************************************************************************
						 * NOTICE! <br>
						 * i2d.pp.mrpcockpit.reuse.util.InteroperabilityHelper.getFilterFrontendVersion() delivers the current
						 * Frontend Version. The value in it has to be updated with each new wave to the current Frontend Version
						 * manually! <br>
						 * see _bindGeneralKeyFilters() and _getDirectCallFilters()
						 **********************************************************************************************************/

						sap.ca.scfld.md.controller.ScfldMasterController.prototype.onInit.call(this);

						// Initialize the service version and the service schema version (needed for interoperability)
						i2d.pp.mrpcockpit.reuse.util.InteroperabilityHelper.initialize(this.getView().getModel(), this
								.getMasterServiceEntity(), this.oApplicationFacade);

						// Store the re-use constants as a member
						this.Constants = i2d.pp.mrpcockpit.reuse.util.CommonConstants;

						// add reference to reuse i18N model
						var effectiveUrl = jQuery.sap.getModulePath("i2d.pp.mrpcockpit.reuse") + "/" + "i18n/i18n.properties";
						var oBundle = new sap.ui.model.resource.ResourceModel({
							bundleUrl : effectiveUrl
						});
						this.getView().setModel(oBundle, "Common_i18n");

						// Extract the list item template out of the list and clear all items
						var oList = this.getList();
						var oItem = oList.getItems()[0];
						oList.removeItem(oItem);
						this.oListItemTemplate = oItem;

						// initialize the view state
						this.oViewState = {
							// items shown in the master list
							// (will be filled when navigate from app to app)
							items : null,
							// variant id
							// (will be filled when navigate from tile to app navigation)
							variantID : null
						};

						// create stateID to identify session
						this.sStateID = jQuery.sap.uid();

						// check if an old stateID exist to restore the session
						var myPattern = /id-.*-.*/;
						var sStateID = myPattern.exec(sap.ui.core.routing.HashChanger.getInstance().getHash());
						if (sStateID) {
							// save the first entry and restore old session
							this.sStateID = sStateID[0];
							i2d.pp.mrpcockpit.reuse.view.ViewStateHandler.getViewStateFromContainer(jQuery.proxy(
									this._resetLastViewState, this), this.sStateID, this.Constants.VIEW_STATE_VALIDITY_TIME,
									this.oViewState);
						} else {

							// Determine navigation scenario
							var sComponentId = sap.ui.core.Component.getOwnerIdFor(this.getView());
							var myComponent = sap.ui.component(sComponentId);
							var oComponentData = myComponent.getComponentData();

							// There are different possibilities to start the app
							if (oComponentData && oComponentData.startupParameters) {
								//TODO David
								if (oComponentData.startupParameters.OrderCategory) {
									if (oComponentData.startupParameters.OrderCategory[0] !== undefined) {
										this.sOrderCategory = oComponentData.startupParameters.OrderCategory[0];
										}			
									}
								//End TODO

								// Cross-app navigation
								// either from launchpad tile (as variant) or from 210
								this._bindFilters(oComponentData.startupParameters);
								// Save the variant ID (if there is one) so we could navigate to the
								// monitor app using this variant
								this.oViewState.variantID = oComponentData.startupParameters.VariantID;
								this.oStartParameters = oComponentData.startupParameters;
							} else {
								// If no startup parameters are provided, it is a direct call
								if (this._directCall) { // only implemented in 230
									this.getList().destroyItems(); // because counting in master title
									this._directCall();
								} else {
									jQuery.sap.log
											.error("Startup parameter missing. Only direct call use case of app 230 is allowed without startup parameter.");
									this.oApplicationFacade.oApplicationImplementation.oConnectionManager.showMessageBox({
										type : sap.ca.ui.message.Type.ERROR,
										message : this.getView().getModel('Common_i18n').getResourceBundle().getText("messURLIncorrect")
									});
								}
							}
						}

						var bus = sap.ui.getCore().getEventBus();
						// subscribe on event for a processed solution card on S4 in
						// order to update the status of the master list
						bus.subscribe(this.Constants.EVENT_CHANNELID_CARD_DIALOG_DATACHANGED, this.Constants.EVENT_EVENTID_OK,
								this._updateMasterListItem, this);

						// registering on the error handling of failed odata calls
						this.getView().getModel().attachRequestFailed(null, this.handleRequestFailed, this);

						var changedItems = null;
						changedItems = this.oApplicationFacade.getApplicationModel("changedItems");
						if (!changedItems) {
							changedItems = new sap.ui.model.json.JSONModel();
							this.oApplicationFacade.setApplicationModel("changedItems", changedItems);
						}

						// handle special logic of s2 for master list refresh, e.g. remove the cached items on the master list
						this.oApplicationFacade.registerOnMasterListRefresh(this.onMasterRefresh, this);

						this.oRouter.attachRoutePatternMatched(this._onRoutePatternMatched, this);

						// Save current view state if user leaves application
						// jQuery(window).bind("beforeunload", function(oEvent) {
						// this._storeViewState();
						// jQuery(window).unbind("beforeunload");
						// }.bind(this));

					},

					/**
					 * Overwritten from sap.ca.scfld.md.controller.ScfldMasterController: As the name of the route leading to the
					 * detail view differs from the default which is "detail"
					 * 
					 * @memberOf i2d.pp.mrpcockpit.reuse.view.S2parent
					 * @returns {string} the name of the detail route
					 */
					getDetailRouteName : function() {
						if(this.oStartParameters){
							if(this.oStartParameters.navigationID){
								if(this.oStartParameters.navigationID[0] == i2d.pp.mrpcockpit.reuse.util.CommonConstants.NavToCR){
									return i2d.pp.mrpcockpit.reuse.util.CommonConstants.ROUTING.SUB_DETAIL;
								}
							}
						}
						return i2d.pp.mrpcockpit.reuse.util.CommonConstants.ROUTING.DETAIL;
					},

					/**
					 * Overwritten from sap.ca.scfld.md.controller.ScfldMasterController: Create the parameters necessary for
					 * injecting the stateID into the Detail route of the app.
					 * 
					 * @memberOf i2d.pp.mrpcockpit.reuse.view.S2parent
					 */
					getDetailNavigationParameters : function(oListItem) {
						return {
							contextPath : oListItem.getBindingContext(this.sModelName).getPath().substr(1),
							stateID : this.sStateID
						};
					},

					/**
					 * Handles the event attachRoutePatternMatched; Restores the stateID if parameter was provided
					 * 
					 * @memberOf i2d.pp.mrpcockpit.reuse.view.S2parent
					 * @param {object}
					 *          oEvent: the route matched event
					 */
					_onRoutePatternMatched : function(oEvent) {
						var sRouteName = oEvent.getParameter("name");
						if (sRouteName === "master" || sRouteName === i2d.pp.mrpcockpit.reuse.util.CommonConstants.ROUTING.DETAIL) {
							var sArg = oEvent.getParameter("arguments");
							if (sArg.stateID && (sArg.stateID !== this.sStateID)) {
								// Regex for id-... (to avoid SQL Injection)
								var myPattern = /id-.*-.*/;
								var sStateID = myPattern.exec(sArg.stateID);
								if (sStateID) {
									// restore the old stateID
									this.sStateID = sStateID[0];
								}
							}
						}
					},

					/**
					 * Handles the error event of a oData Call. First triggers a special coding for the AOR case (if the user does
					 * not have an AOR) For all further the error is transferred to the general error handling in the
					 * connectionManager (Scfld) This is necessary because we detach the general error handling in the
					 * configuration.js (Parameter: fRequestFailed of each Service in Service List) in Order not to trigger it
					 * twice
					 * 
					 * @memberOf i2d.pp.mrpcockpit.reuse.view.S2parent
					 * @param {object}
					 *          oEvent: the route matched event
					 */
					handleRequestFailed : function(oEvent) {

						// Predefine close function for error message dialog
						var sErrorText = null;
						var fnClose = function() {
							window.history.back();
						};

						// read error handling
						if (oEvent.getParameter("responseText").match('@AOR@')) {

							// delegate to AoR handling and reexecute onInit after AoR has been defined
							i2d.pp.mrpcockpit.reuse.view.AoRHandler.openFirstOnboardingDialog(this.getView().getModel(),
									this._aorChange.bind(this), this);

						} else if (oEvent.getParameter("responseText").match('@QuickView@')) {

							// error is handled by S3 controller, so ignore it
							// for sure, this is not the best solution, but there are no alternatives so far

						} else if (oEvent.getParameter("responseText").match('@NoAuthorization@')) {

							// no element is shown due to authorization issue
							// we want to inform the user and navigate back to the last page
							sErrorText = this.getView().getModel("Common_i18n").getResourceBundle().getText(
									"MISSING_AUTHORIZATIONS_ERROR");

							sap.ca.ui.message.showMessageBox({
								type : sap.ca.ui.message.Type.ERROR,
								message : sErrorText
							}, fnClose);

						} else if (oEvent.getParameter("responseText").match('@TOO_MANY_MATERIALS@')) {

							// material search ended up in too many results. User should limit the AoR to get less results
							sErrorText = this.getView().getModel("Common_i18n").getResourceBundle().getText(
									"TOO_MANY_MATERIALS_ERROR");

							var oBundle = this.getView().getModel("Common_i18n").getResourceBundle();
							var errorTextAndDetails = i2d.pp.mrpcockpit.reuse.util.Helper.extractErrorMsgFromStream(oBundle, oEvent
									.getParameter("responseText"));
							var aText = errorTextAndDetails.split("@TOO_MANY_MATERIALS@");
							// remove the leading dot and space from the error details and show the error in a message box
							aText[1].replace(". ", "");
							sap.ca.ui.message.showMessageBox({
								type : sap.ca.ui.message.Type.ERROR,
								message : aText[0],
								details : aText[1]
							});

						} else {
							// Set the noDataText of the table to "No items are currently available" and show an empty detail view
							var oTable = this.getList();
							if (oTable) {
								oTable.setBusy(false); // Remove the busy indicator
								oTable.setNoDataText(this.getView().getModel('Common_i18n').getResourceBundle().getText(
										"tableUpdateFinished"));
								this.navToEmptyView();
							}
							// triggering of general error handling
							this.oApplicationFacade.oApplicationImplementation.oConnectionManager.handleRequestFailed(oEvent);
						}

					},

					/**
					 * Handles the Event of using successfully a Solution Card
					 * 
					 * @memberOf i2d.pp.mrpcockpit.reuse.view.S2parent
					 * @param {string}
					 *          channelId: The channel of the event
					 * @param {string}
					 *          eventId: The identifier of the event
					 * @param {object}
					 *          data: the parameter map
					 */
					_updateMasterListItem : function(channelId, eventId, data) {

						var changedItems = this.oApplicationFacade.getApplicationModel("changedItems");

						// get Binding Context of selected Item in List
						var oSelectedItem = null;
						if (this.getList()) {
							oSelectedItem = this.getList().getSelectedItem();
							if (oSelectedItem) {
								var oContext = oSelectedItem.getBindingContext();
								var oEntry = null;

								oEntry = changedItems.getProperty(oContext.getPath());
								if (!oEntry) {
									oEntry = {};
									jQuery.extend(oEntry, oContext.getObject());
								}

								// Set Status code in the current list item
								// update of the status needs to be done by every app itself
								oEntry = this._updateMasterListItemAppSpecific(oEntry, data);
								if (oEntry) {
									changedItems.setProperty(oContext.getPath(), oEntry);

									oSelectedItem.setModel(changedItems);
									this.oApplicationFacade.setApplicationModel("changedItems", changedItems);
								}
							} else {
								jQuery.sap.log.info("S2: Status Update not possible - No item selected");
							}

						} else {
							jQuery.sap.log.info("S2: Status Update not possible - No list available");
						}

					},

					/**
					 * This method is used to update the master list item after an user interaction. It is intended to be
					 * overwritten in the sub classes. We update specific status after user interaction. We need to provide an own
					 * json model as we are not allowed to update the OData values.
					 */
					_updateMasterListItemAppSpecific : function(oEntry, data) {

						oEntry.MaterialShortageStatus = i2d.pp.mrpcockpit.reuse.util.Helper.convertStatusToMasterListStatus(data);
						return oEntry;

					},

					/**
					 * Reads the arguments encapsualted by the (display) variant such as ShortageDefinitionID and horizon
					 */
					_readVariant : function(sVariantID, aFilters) {

						this.aFilters = aFilters;

						// get correct Variant Container Prefix for different Apps
						this.sVariantContainerPrefix = this._getVariantContainerPrefix();

						// get the correct variant ID and use callback method _setFilters
						i2d.pp.mrpcockpit.reuse.view.VariantHandler.getVariantByID(this._setFilters.bind(this),
								this.sVariantContainerPrefix, sVariantID);

					},

					/**
					 * callback variant setup the filters and do the view binding
					 */
					_setFilters : function(bResult, object) {
						var i;
						var j;
						// since wave 5 we have to pass the frontend version to the backend with each master call
						i2d.pp.mrpcockpit.reuse.util.InteroperabilityHelper.addFilterFrontendVersion(this.aFilters, this.getView()
								.getModel(), this.getMasterServiceEntity());

						this.aSorter = [];
						if (object !== null) {

							if (object.MaterialShortageDefinitionID !== undefined) {
								this.aFilters.push(this._getSimpleFilter('MaterialShortageDefinitionID',
										object.MaterialShortageDefinitionID));
							}
							if (object.TimeHorizon !== undefined) {
								this.aFilters.push(this._getSimpleFilter('DynamicHorizonCode', object.TimeHorizon));
							}
							if (object.DemandType !== undefined) {
								this.aFilters.push(this._getSimpleFilter('DemandType', object.DemandType));
							}
							if (object.OrderCategory !== undefined) {
								this.aFilters.push(this._getSimpleFilter('MRPElementCategory', object.OrderCategory));
							}

							if (object.FacetFilterState !== undefined) {
								for (i = 0; i < object.FacetFilterState.length; i++) {
									for (j = 0; j < object.FacetFilterState[i].selectedItemKeys.length; j++) {

										this.aFilters.push(this._getSimpleFilter(object.FacetFilterState[i].listKey,
												object.FacetFilterState[i].selectedItemKeys[j][0]));
									}
								}
							}

							// read sorting out of variant
							if (object.SortKey && object.SortDescending !== undefined) {
								this.aSorter.push(new sap.ui.model.Sorter(object.SortKey, object.SortDescending));
							}
						}

						// allows to do app specific coding based on the variant
						this._handleVariantAppSpecific();

						this._setupViewBinding(this.aFilters, this.aSorter);
					},

					/**
					 * setup data binding for master list
					 */
					_setupViewBinding : function(aFilters, aSorter) {
						var masterList = this.getView().byId("list");

						var oModel = this.oApplicationFacade.getODataModel();

						// activate batch mode
						if (!this._isBatchModeActive()) {
							oModel.setUseBatch(false);
						} else {
							oModel.setUseBatch(true);
						}

						// activate paging
						// 50 records are requested by default with each call
						oModel.setSizeLimit(999);
						masterList.setGrowingThreshold(50);
						masterList.setGrowing(true);

						masterList.bindAggregation("items", {
							path : "/" + this.getMasterListEntity(),
							template : this.oListItemTemplate,
							sorter : aSorter,
							filters : aFilters,
							parameters : {
								select : this._getSelectFields()
							}
						});
						this.registerMasterListBind(masterList);
					},

					/**
					 * This method determines app specific filters and uses them to for the ODataCall that is done within
					 * "setupViewBinding". It is intended to be overwritten in the subclasses if the filter binding has to be
					 * adapted.
					 */
					_bindFilters : function(parameters) {

						var aFilters = [];

						var sNavigationID = null;
						if (parameters.navigationID) {
							sNavigationID = parameters.navigationID[0];
						}
						if (sNavigationID) {
							var oPersonalizationService = sap.ushell.Container.getService('Personalization');
							if (oPersonalizationService.getContainer) {
								oPersonalizationService.getContainer(sNavigationID, this.Constants.VIEW_STATE_VALIDITY_TIME).done(
										function(oContainer) {
											var items = oContainer.getItemValue("Navigation");
											if (items) {
												// Determine the filters for the app
												this._bindAppFilters(items, aFilters);
												// Pass the filters and do the OData-Call
												this._setupViewBinding(aFilters);
												// save the items in the view state object
												this.oViewState.items = items;
												// Store the view state to display the same items if user navigates back
												this._storeViewState();
											} else {
												// invalid parameters
												jQuery.sap.log.error("Invalid localBookmark");
											}
										}.bind(this));
							}

						}
						/*
						 * Old Navigation handling else if (parameters.localBookmark) { // App was called from a monitor app (110 or
						 * 210) var itemsJSON = sessionStorage.getItem(parameters.localBookmark); var items = JSON.parse(itemsJSON);
						 * if (items) { // Determine the filters for the app this._bindAppFilters(items, aFilters); // Pass the
						 * filters and do the OData-Call this._setupViewBinding(aFilters); } else { // invalid parameters
						 * jQuery.sap.log.error("Invalid localBookmark"); } }
						 */
						else if (parameters.VariantID) {
							// App has been started directly using a Launchpad tile having a specific Variant ID
							// (wrapper for Shortage Definition ID and Time Horizon)
							this._readVariant(parameters.VariantID, aFilters);
							this.oViewState.variantID = parameters.VariantID;

							// Store the view state to display the same variant if user navigates back
							this._storeViewState();
						} else {
							// invalid scenario
							jQuery.sap.log
									.error("Invalid scenario, either supply display variant or [material,plant,mrparea] combinations");
							this.oApplicationFacade.oApplicationImplementation.oConnectionManager.showMessageBox({
								type : sap.ca.ui.message.Type.ERROR,
								message : this.getView().getModel('Common_i18n').getResourceBundle().getText("messURLIncorrect")
							});
						}

					},

					/**
					 * This method is used to do App specific coding that is related to the variant e.g. changing the master list
					 * title in 332 app. It is intended to be overwritten in the sub classes.
					 */
					_handleVariantAppSpecific : function() {
					},

					/**
					 * Restores the view state to display the last view state if user navigates back
					 */
					_resetLastViewState : function(bResult, oViewState) {

						this.oViewState = oViewState;
						var aFilters = [];

						if (this.oViewState.items) {
							// Determine the filters for the app
							this._bindAppFilters(this.oViewState.items, aFilters);
							// Pass the filters and do the OData-Call
							this._setupViewBinding(aFilters);
						} else if (this.oViewState.variantID) {
							// App has been started directly using a Launchpad tile having a specific Variant ID
							// (wrapper for Shortage Definition ID and Time Horizon)
							this._readVariant(this.oViewState.variantID, aFilters);
						}

					},

					/**
					 * Stores the view state to display the last view state if user navigates back
					 */
					_storeViewState : function() {
						// store view state
						i2d.pp.mrpcockpit.reuse.view.ViewStateHandler.saveViewStateInContainer(null, this.oViewState,
								this.sStateID, this.Constants.VIEW_STATE_VALIDITY_TIME, null);
					},

					/**
					 * Returns the filters for standalone Scenario
					 */
					_getLocalFilters : function() {

						var aFilters = [];

						this._setTimeHorizonFilter(aFilters);
						this._setShortageFilter(aFilters);
						this._setControllerFilter(aFilters);
						this._setPlantFilter(aFilters);

						return aFilters;

					},

					/**
					 * Returns an 'EQ' filter for a singe value
					 * 
					 * @param filterName
					 * @param filterValue
					 * @returns {sap.ui.model.Filter}
					 */
					_getSimpleFilter : function(filterName, filterValue) {
						var filter = new sap.ui.model.Filter(filterName, sap.ui.model.FilterOperator.EQ, filterValue);
						return filter;
					},

					/**
					 * Adds the url parameter value for 'timeHorizon' to the oData filters
					 */
					_setTimeHorizonFilter : function(aFilters) {
						// var horizon = jQuery.sap.getUriParameters().get("timeHorizon");
						var horizon = "";
						if (horizon === "") {
							jQuery.sap.log.error("Mandatory url parameter 'timeHorizon' not set!");
						}
						aFilters.push(this._getSimpleFilter('DynamicHorizonCode', horizon));

					},

					/**
					 * Adds the url parameter value for 'shortageDef' to the oData filters
					 */
					_setShortageFilter : function(aFilters) {
						// var shortageDef = jQuery.sap.getUriParameters().get("shortageDef");
						var shortageDef = "";
						if (shortageDef === "") {
							jQuery.sap.log.error("Mandatory url parameter 'shortageDef' not set!");
						}
						aFilters.push(this._getSimpleFilter('MaterialShortageDefinitionID', shortageDef));

					},

					/**
					 * Adds the url parameter value for 'plant' to the oData filters
					 */
					_setPlantFilter : function(aFilters) {
						// var plant = jQuery.sap.getUriParameters().get("plant");
						var plant = "";
						if (plant !== null) {
							aFilters.push(this._getSimpleFilter('MRPPlant', plant));
						}
					},

					/**
					 * Adds the url parameter value for 'controller' to the oData filters
					 */
					_setControllerFilter : function(aFilters) {
						// var controller = jQuery.sap.getUriParameters().get("controller");
						var controller = "";
						if (controller !== null) {
							aFilters.push(this._getSimpleFilter('MRPController', controller));
						}
					},

					/**
					 * Checks if batch mode is still active
					 */
					_isBatchModeActive : function() {
						// var noBatch = jQuery.sap.getUriParameters().get("nobatch");
						// do not remove the local variable since it is needed to deactivate the batch mode in the debugger
						var noBatch = "";
						if (noBatch === "X") {
							return false;
						}
						return true;
					},

					/**
					 * Add general key filters for the master call
					 */
					_bindGeneralKeyFilters : function(parameters, aSimpleFilters, aANDFilters) {

						// check that mrpArea, materialID and plant have the same array-length
						if ((!parameters.DirectCall)
								&& (parameters.MRPArea.length !== parameters.MaterialID.length || parameters.MRPArea.length !== parameters.MRPPlant.length)) {

							jQuery.sap.log.error("Same number of entries for MRPArea, MaterialID and MRPPlant expected");

						} else {

							// Material Shortage Definition
							aSimpleFilters.push(this._getSimpleFilter('MaterialShortageDefinitionID',
									parameters.MaterialShortageDefinitionID));

							// in case we bind the filters from view state with Direct call
							// MRPArea will not be supported
							if (parameters.DirectCall) {
								aSimpleFilters.push(this._getSimpleFilter('DirectCall', parameters.DirectCall));
							} else {

								// Areas
								aANDFilters.push(i2d.pp.mrpcockpit.reuse.util.Helper.getORMultiFilter('MRPArea', parameters.MRPArea));
							}

							// Material ID
							aANDFilters.push(i2d.pp.mrpcockpit.reuse.util.Helper
									.getORMultiFilter('MaterialID', parameters.MaterialID));

							// MRPPlant
							aANDFilters.push(i2d.pp.mrpcockpit.reuse.util.Helper.getORMultiFilter('MRPPlant', parameters.MRPPlant));

							// since wave 5 we have to pass the frontend version to the backend with each master call
							i2d.pp.mrpcockpit.reuse.util.InteroperabilityHelper.addFilterFrontendVersion(aSimpleFilters, this
									.getView().getModel(), this.getMasterServiceEntity());
						}

					},

					/**
					 * Method called by the framework as soon as the OData-Call (Master Call) is finished. Based on the result, we
					 * focus on the selected item, select the first item (if nothing was selected before) or we set the default
					 * text for "no data found".
					 */
					onItemsUpdateFinished : function(oEvent) {
						var sMasterList = this.getView().byId("list");
						// Check if the master list has items
						if (sMasterList.getItems().length) {
							// Try to get the selected item
							var oItem = sMasterList.getSelectedItem();
							if (oItem) {
								// If there is a selected item, ensure that the focus is put on the item
								var oRef = oItem.getDomRef();
//							if (oRef && oEvent.mParameters.reason !== "Growing") {
								if (oRef && oEvent.getParameter("reason") !== "Growing") {									
									oRef.focus();
								}
							} else {
								// If there is no selected item at all, select the first one in list
								this.selectFirstItem();
							}
						} else {
							// Set the noDataText of the table to "No items are currently available"
							sMasterList.setNoDataText(this.getView().getModel('Common_i18n').getResourceBundle().getText(
									"tableUpdateFinished"));
							// If we don't have any item in the master list, show an empty detail screen
							this.navToEmptyView();
							// needed in order to update the hash
//							this.oRouter.navTo("master", "", true);
						}
					},

					/**
					 * Returns the settings for the header and footer options
					 */
					getHeaderFooterOptions : function() {

						var headerFooterOptions = {
							// button for assignment of "Area of Responsibility"
							aAdditionalSettingButtons : [{
								sBtnTxt : "AOR",
								// sI18nBtnTxt : "AREA_OF_RESPONSIBILITY",
								sI18nBtnTxt : this.getView().getModel('Common_i18n').getResourceBundle().getText(
										"AREA_OF_RESPONSIBILITY"),
								onBtnPressed : function(evt) {
									i2d.pp.mrpcockpit.reuse.view.AoRHandler.openOnboardingDialog(evt, this.oApplicationFacade
											.getODataModel(), this._aorChange.bind(this), this);
								}.bind(this)
							}]
						};

						// If we have been called with a variant ID and we have a semantic object
						// we allow to navigate to the monitor app using the received variant
						// The semantic object has to be set in the app specific part of the S2 controller
						if (this.oViewState.variantID && this.semanticObject && this.semanticObjectAction) {

							// Create a button in the footer of the master list
							headerFooterOptions.buttonList = [{
								sBtnTxt : "MONITORAPP",
								sI18nBtnTxt : "NAV_TO_MONITOR_APP", // note: the actual UI text is read from the app specific
								// properties file

								onBtnPressed : function(evt) {
									var fgetService = sap.ushell && sap.ushell.Container && sap.ushell.Container.getService;
									this.oCrossAppNavigator = fgetService && fgetService("CrossApplicationNavigation");
									if (this.oCrossAppNavigator) {
										this.oCrossAppNavigator.toExternal({
											target : {
												semanticObject : this.semanticObject,
												action : this.semanticObjectAction
											},
											params : {
												"VariantID" : this.oViewState.variantID
											}
										});
									} else {
										var sMessage = this.oApplicationFacade.getResourceBundle().getText("messNoLaunchpad");
										sap.ca.ui.message.showMessageBox({
											type : sap.ca.ui.message.Type.ERROR,
											message : sMessage
										});
									}
								}.bind(this)

							}];
						}

						return headerFooterOptions;
					},

					/**
					 * Handles the Event of updating the Area of Responsibility
					 */
					_aorChange : function() {

						if ((arguments[0] == i2d.pp.mrpcockpit.reuse.util.CommonConstants.AOR_DEFINITION_CANCELED)
								|| (arguments[0] == i2d.pp.mrpcockpit.reuse.util.CommonConstants.AOR_DEFINITION_FAILED)) {
							// AoR has failed or has been aborted by the user, we don't have to update the app, just continue
						} else {
							// refresh is only necessary if the app is called via a variant (in this case the variable this.aFilters
							// is set, in any other case the filter variable is undefined)
							if (this.aFilters) {
								this._setupViewBinding(this.aFilters, this.aSorter);
							}
						}
					},

					/**
					 * Sets the filter variable aFilters back to undefined
					 */
					clearFilters : function() {
						this.aFilters = undefined;
					},

					/**
					 * Sets the filter variable aSorter back to undefined
					 */
					clearSorter : function() {
						this.aSorter = undefined;
					},

					onExit : function() {
						// De-Register the event!
						var bus = sap.ui.getCore().getEventBus();
						bus.unsubscribe(this.Constants.EVENT_CHANNELID_CARD_DIALOG_DATACHANGED, this.Constants.EVENT_EVENTID_OK,
								this._updateMasterListItem, this);
						this.oApplicationFacade.deRegisterOnMasterListRefresh(this.onMasterRefresh, this);

						// save viewstate and unbind beforeunload because S1parent uses beforeunload as well
						jQuery(window).unbind("beforeunload");
						this._storeViewState();
					},

					/**
					 * Handles the event MasterRefresh; This allows us to reload the master list only when the user has explicitly
					 * refreshed it or for a navigation as well as to remove the cached list items
					 * 
					 * @memberOf i2d.pp.mrpcockpit.reuse.view.S2parent
					 * @param oEvent
					 */
					onMasterRefresh : function(oEvt) {
						if (oEvt.getParameter("bManualRefresh") === true) {
							// a master List refresh was triggered by clicking the refresh button or doing a "pull to refresh"
							var aListItems = this.getList().getItems();
							var i;
							for (i = 0; i < aListItems.length; i++) {
								// reset to original odata model of the view for all elements.
								aListItems[i].setModel();
							}
							// reset the JSon Model
							var changedItems = new sap.ui.model.json.JSONModel();
							this.oApplicationFacade.setApplicationModel("changedItems", changedItems);

						} else {
							// a master list refresh was done by the scaffolding e.g. during a back end search or after getting items
							// of a growing list
						}
					}

				});

}; // end of i2d/pp/mrpcockpit/reuse/view/S2parent.js
